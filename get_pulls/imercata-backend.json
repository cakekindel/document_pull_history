[
  {
    "pull": {
      "user": {
        "login": "johannmorales",
        "html_url": "https://github.com/johannmorales"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/197",
      "updated_at": "2021-11-04T17:11:11Z",
      "title": "IMERC-307: remove empty options on project form",
      "state": "open",
      "number": 197,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "b92aec96adf5c85ebe6adeff166387d050d221d9",
        "ref": "feature/IMERC-307/dropdowns-pre-selected"
      },
      "created_at": "2021-11-04T17:09:47Z",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e5157baf2549d9c99caa29b2c7fffb455af2ab3e",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "r2g",
        "html_url": "https://github.com/r2g"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/196",
      "updated_at": "2021-11-03T19:00:46Z",
      "title": "[Fix] Remove route cost factory to avoid confusion",
      "state": "open",
      "number": 196,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5a9ef2798773292e7deb17b2ec5f445f7866e84e",
        "ref": "Fix-remove-the-forecast-cost-factory"
      },
      "created_at": "2021-11-03T18:23:57Z",
      "body": "- It was replaced with the forecast-cost.factory",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "7474b710c843973a4bd80fbb9950210969c7d30c",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "r2g",
        "html_url": "https://github.com/r2g"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/195",
      "updated_at": "2021-11-03T18:16:58Z",
      "title": "[IMERC-238] unable to optimize a route",
      "state": "closed",
      "number": 195,
      "merged_at": "2021-11-03T18:16:57Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "36e68d44988ba4fc5335f3971de954542ca9087f",
        "ref": "IMERC-238-Unable-to-optimize-a-route"
      },
      "created_at": "2021-11-03T15:39:00Z",
      "closed_at": "2021-11-03T18:16:57Z",
      "body": "- Updated the getForecastCost method of the layer cost service to expect a segment response as below\r\n```json\r\n{\r\n    \"nodeData\": {\r\n        \"type\": \"FeatureCollection\",\r\n        \"features\": [ ... ]\r\n    },\r\n    \"forecastCost\": {\r\n        \"baseLayUnitCost\": 60.65,\r\n        \"totalBaseLayCost\": 7481247.321524231,\r\n        \"totalAdderCost\": 27520.671700665447,\r\n        \"adderAverageCost\": 0.22310834903734886,\r\n        \"totalRouteCost\": 7508767.9932248965,\r\n        \"totalDistance\": 123351.15122051493,\r\n        \"baseLayItems\": [ ... ],\r\n        \"adders\": [ ... ],\r\n        \"projectAdders\": [ ... ]\r\n    }\r\n}\r\n```\r\n- Modified the segment Interface `nodeData key` to expect an `optional cost key` in the features array as below\r\n```typescript\r\nexport interface NodeFeature {\r\n  geometry: NodeGeometry;\r\n  id: string;\r\n  properties: NodeProperties;\r\n  type: string;\r\n  cost?: NodeCost;\r\n}\r\n\r\nexport interface NodeCost {\r\n  breakdown: {\r\n    distanceToNext: number;\r\n    surfaces: string[];\r\n    adders: Adder[];\r\n  };\r\n  total: {\r\n    adderCost: number;\r\n    baselayCosts: number;\r\n    cost: number;\r\n  };\r\n}\r\n```\r\n\r\n- Updated all relevant DTO's to conform to the above change\r\n- Fixed `failing companies.e2e-spec test and layer-costs.service.spec test`",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "10a70a031243456990366dec9600c4847b031f96",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 796749714,
        "path": "test/factories/forecast-cost.factory.ts",
        "id": 742082258,
        "diff_hunk": "@@ -0,0 +1,19 @@\n+import { Factory } from 'fishery';\n+\n+import { ForecastCost } from '@/route-planner/interfaces';\n+\n+class ForecastCostFactory extends Factory<ForecastCost> {}\n+\n+export const forecastCostFactory = ForecastCostFactory.define(\n+  (): ForecastCost => ({\n+    baseLayUnitCost: 1,\n+    totalBaseLayCost: 1,\n+    baseLayItems: [],\n+    adders: [],\n+    projectAdders: [],\n+    totalAdderCost: 1,\n+    adderAverageCost: 1,\n+    totalRouteCost: 1,\n+    totalDistance: 1,\n+  }),\n+);",
        "created_at": "2021-11-03T15:49:19Z",
        "body": "Does this take the place of `routeCostFactory`?  If so, can we get rid of that one to avoid confusion?"
      },
      {
        "user": {
          "login": "r2g",
          "html_url": "https://github.com/r2g"
        },
        "pull_request_review_id": 796917159,
        "path": "test/factories/forecast-cost.factory.ts",
        "in_reply_to_id": 742082258,
        "id": 742200516,
        "diff_hunk": "@@ -0,0 +1,19 @@\n+import { Factory } from 'fishery';\n+\n+import { ForecastCost } from '@/route-planner/interfaces';\n+\n+class ForecastCostFactory extends Factory<ForecastCost> {}\n+\n+export const forecastCostFactory = ForecastCostFactory.define(\n+  (): ForecastCost => ({\n+    baseLayUnitCost: 1,\n+    totalBaseLayCost: 1,\n+    baseLayItems: [],\n+    adders: [],\n+    projectAdders: [],\n+    totalAdderCost: 1,\n+    adderAverageCost: 1,\n+    totalRouteCost: 1,\n+    totalDistance: 1,\n+  }),\n+);",
        "created_at": "2021-11-03T17:57:40Z",
        "body": "Yes it does. Let me remove the route cost factory to avoid confusion"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/194",
      "updated_at": "2021-11-02T10:05:52Z",
      "title": "[Snyk] Upgrade nodemailer from 6.6.5 to 6.7.0",
      "state": "open",
      "number": 194,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "dd3d94d3409d42d87dd973c7bc5b2c16695b1f60",
        "ref": "snyk-upgrade-edd7227e85574fd89e726128479e8be8"
      },
      "created_at": "2021-11-02T10:05:51Z",
      "body": "<h3>Snyk has created this PR to upgrade nodemailer from 6.6.5 to 6.7.0.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=nodemailer&from_version=6.6.5&to_version=6.7.0&pr_id=04437408-9808-4f85-8adf-3aaf28a8b349&visibility=true&has_feature_flag=false)\nAs this is a private repository, Snyk-bot does not have access. Therefore, this PR has been created automatically, but appears to have been created by a real user.</br>\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **22 days ago**, on 2021-10-11.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>nodemailer</b></summary>\n    <ul>\n      <li>\n        <b>6.7.0</b> - <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases/tag/v6.7.0\">2021-10-11</a></br><p>v6.7.0</p>\n      </li>\n      <li>\n        <b>6.6.5</b> - <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases/tag/v6.6.5\">2021-09-23</a></br><p>v6.6.5</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases\">nodemailer GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>nodemailer</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/efc394754571c5986ef6d9c3ed56c1e2d1944531\">efc3947</a> v6.7.0</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/compare/b7498993b991eee5fcbb3e1c0801dc5a2d5369ed...efc394754571c5986ef6d9c3ed56c1e2d1944531\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIwNDQzNzQwOC05ODA4LTRmODUtOGFkZi0zYWFmMjhhOGIzNDkiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjA0NDM3NDA4LTk4MDgtNGY4NS04YWRmLTNhYWYyOGE4YjM0OSJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;nodemailer&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"04437408-9808-4f85-8adf-3aaf28a8b349\",\"prPublicId\":\"04437408-9808-4f85-8adf-3aaf28a8b349\",\"dependencies\":[{\"name\":\"nodemailer\",\"from\":\"6.6.5\",\"to\":\"6.7.0\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=referral&page=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-10-11T11:05:10.614Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "0bbbc10f4c383d6ab26fc3d3883624d20872cdc1",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "rledford",
        "html_url": "https://github.com/rledford"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/193",
      "updated_at": "2021-11-03T20:57:44Z",
      "title": "[IMERC-303] - Separate route forecast cost calculation from route updates",
      "state": "closed",
      "number": 193,
      "merged_at": "2021-11-03T20:57:43Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "80a93ed1e18f16df7c618d81685d5b51f22b2d30",
        "ref": "IMERC-303-separate-forecast-cost"
      },
      "created_at": "2021-10-29T19:19:07Z",
      "closed_at": "2021-11-03T20:57:44Z",
      "body": "### Changes\r\n- Updating a route no longer calculates the route's forecast cost\r\n- Updated tests to accommodate the new route-update implementation\r\n- Updated .env example files to include the LAYER_COSTS_HOST variable",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "7474b710c843973a4bd80fbb9950210969c7d30c",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/192",
      "updated_at": "2021-11-02T17:02:43Z",
      "title": "[IMERC-211] Nest projects under programs",
      "state": "closed",
      "number": 192,
      "merged_at": "2021-11-02T17:02:42Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9e1faad140ab93a1aba32cda81cae8be9ff9e710",
        "ref": "feature/IMERC-211-programs"
      },
      "created_at": "2021-10-28T16:47:50Z",
      "closed_at": "2021-11-02T17:02:42Z",
      "body": "[IMERC-211](https://imercata.atlassian.net/browse/IMERC-211)\r\n\r\nNests most of the system under `programs` (which follows the actual heirarchy in the database).\r\n\r\n- Updated all endpoints to follow the new URL scheme\r\n- Standardized all unit tests\r\n- Added some unit tests for some of the more esoteric endpoints that don't get a lot of traffic (like `/restore`).\r\n- Spent some time cleaning up our TypeORM mocking framework.\r\n\r\nReviewing this PR will most definitely be easier going commit by commit, as most of the system has been touched.  I tried to keep the commit history relative clean.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "0bbbc10f4c383d6ab26fc3d3883624d20872cdc1",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 795514652,
        "path": "src/migrations/1635522046029-CreateProgramsAndRemoveCompanyIdFromProjects.ts",
        "id": 741148786,
        "diff_hunk": "@@ -0,0 +1,66 @@\n+import {\n+  MigrationInterface,\n+  QueryRunner,\n+  TableColumn,\n+  TableForeignKey,\n+  TableIndex,\n+} from 'typeorm';\n+\n+export class CreateProgramsAndRemoveCompanyIdFromProjects1635522046029\n+  implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    const result = await queryRunner.query(\n+      `SELECT id, name, company_id FROM projects`,\n+    );\n+    let name: string;\n+    let companyId: string;\n+    await Promise.all(\n+      // For each project, create a program with the same name, and link them\n+      result.map(async (project: any) => {\n+        name = project.name;\n+        companyId = project.company_id;\n+        const programResult = await queryRunner.query(\n+          `INSERT INTO programs (name, company_id) VALUES ($1, $2) RETURNING id`,\n+          [name, companyId],\n+        );\n+\n+        if (programResult) {\n+          const programId = programResult[0].id;\n+          await queryRunner.query(\n+            `UPDATE projects SET program_id = $1 WHERE id = $2`,\n+            [programId, project.id],\n+          );\n+        }\n+      }),\n+    );\n+\n+    // Remove the company_id column from projects (moved to programs)\n+    await queryRunner.dropColumn('projects', 'company_id');\n+  }\n+\n+  public async down(queryRunner: QueryRunner): Promise<void> {",
        "created_at": "2021-11-02T14:53:20Z",
        "body": "`company_id` to be re-associated with the project for in this down method."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 795541892,
        "path": "src/migrations/1635522046029-CreateProgramsAndRemoveCompanyIdFromProjects.ts",
        "in_reply_to_id": 741148786,
        "id": 741169372,
        "diff_hunk": "@@ -0,0 +1,66 @@\n+import {\n+  MigrationInterface,\n+  QueryRunner,\n+  TableColumn,\n+  TableForeignKey,\n+  TableIndex,\n+} from 'typeorm';\n+\n+export class CreateProgramsAndRemoveCompanyIdFromProjects1635522046029\n+  implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    const result = await queryRunner.query(\n+      `SELECT id, name, company_id FROM projects`,\n+    );\n+    let name: string;\n+    let companyId: string;\n+    await Promise.all(\n+      // For each project, create a program with the same name, and link them\n+      result.map(async (project: any) => {\n+        name = project.name;\n+        companyId = project.company_id;\n+        const programResult = await queryRunner.query(\n+          `INSERT INTO programs (name, company_id) VALUES ($1, $2) RETURNING id`,\n+          [name, companyId],\n+        );\n+\n+        if (programResult) {\n+          const programId = programResult[0].id;\n+          await queryRunner.query(\n+            `UPDATE projects SET program_id = $1 WHERE id = $2`,\n+            [programId, project.id],\n+          );\n+        }\n+      }),\n+    );\n+\n+    // Remove the company_id column from projects (moved to programs)\n+    await queryRunner.dropColumn('projects', 'company_id');\n+  }\n+\n+  public async down(queryRunner: QueryRunner): Promise<void> {",
        "created_at": "2021-11-02T15:07:52Z",
        "body": "Added the necessary logic to the migration.  Nice catch. üëç "
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "r2g",
        "html_url": "https://github.com/r2g"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/191",
      "updated_at": "2021-11-02T12:33:48Z",
      "title": "IMERC-216: Add EIN duplicate validation against existing records",
      "state": "closed",
      "number": 191,
      "merged_at": "2021-11-02T12:33:47Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "fa972a487b4f55477b2fd50ad25587da107889c8",
        "ref": "IMERC-216-Validate-EIN-against-duplicate-existing-records"
      },
      "created_at": "2021-10-28T05:14:41Z",
      "closed_at": "2021-11-02T12:33:47Z",
      "body": "- added a `custom UniqueEIN validator` that checks if an EIN is unique and if  not returns the error response below\r\n\r\nusage:\r\n```typescript\r\n  /**\r\n   * Company EIN\r\n   */\r\n  @Expose()\r\n  @IsNotEmpty()\r\n  @MaxLength(50)\r\n  @ApiProperty({ example: '12-3456789' })\r\n  @UniqueEIN()\r\n  ein: string;\r\n```\r\n  \r\nResponse:\r\n\r\n  ```json\r\n{\r\n    \"timestamp\": \"2021-10-28T16:31:05.866Z\",\r\n    \"path\": \"/companies\",\r\n    \"code\": 400,\r\n    \"message\": \"Bad Request\",\r\n    \"errors\": [\r\n        \"EIN already exists\"\r\n    ]\r\n}\r\n```\r\n\r\n ",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "0bbbc10f4c383d6ab26fc3d3883624d20872cdc1",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "r2g",
        "html_url": "https://github.com/r2g"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/190",
      "updated_at": "2021-10-27T16:56:07Z",
      "title": "[IMERC-218-Hotfix] Fix adder average cost calculation",
      "state": "closed",
      "number": 190,
      "merged_at": "2021-10-27T16:56:06Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "27fe9a6da0658722a2a963f082d69368d111af17",
        "ref": "IMERC-218-Hotfix-Fix-adder-average-cost-calculation"
      },
      "created_at": "2021-10-27T16:50:03Z",
      "closed_at": "2021-10-27T16:56:06Z",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "328a8a200b425ac2314250346c132c77c0b53e36",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/189",
      "updated_at": "2021-10-27T09:29:47Z",
      "title": "[Snyk] Upgrade nanoid from 3.1.28 to 3.1.29",
      "state": "open",
      "number": 189,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "82628a4a1407f371ba9835d4b2a5aad638329caf",
        "ref": "snyk-upgrade-daea005613e789a16dcdd144332bd9cc"
      },
      "created_at": "2021-10-27T09:29:46Z",
      "body": "<h3>Snyk has created this PR to upgrade nanoid from 3.1.28 to 3.1.29.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=nanoid&from_version=3.1.28&to_version=3.1.29&pr_id=ff08679a-c35e-4e68-b23e-f8ae3cb76d4d&visibility=true&has_feature_flag=false)\nAs this is a private repository, Snyk-bot does not have access. Therefore, this PR has been created automatically, but appears to have been created by a real user.</br>\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **22 days ago**, on 2021-10-05.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>nanoid</b></summary>\n    <ul>\n      <li>\n        <b>3.1.29</b> - 2021-10-05\n      </li>\n      <li>\n        <b>3.1.28</b> - 2021-09-26\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/ai/nanoid/releases\">nanoid GitHub release notes</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJmZjA4Njc5YS1jMzVlLTRlNjgtYjIzZS1mOGFlM2NiNzZkNGQiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImZmMDg2NzlhLWMzNWUtNGU2OC1iMjNlLWY4YWUzY2I3NmQ0ZCJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;nanoid&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"ff08679a-c35e-4e68-b23e-f8ae3cb76d4d\",\"prPublicId\":\"ff08679a-c35e-4e68-b23e-f8ae3cb76d4d\",\"dependencies\":[{\"name\":\"nanoid\",\"from\":\"3.1.28\",\"to\":\"3.1.29\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=referral&page=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-10-05T21:04:25.179Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "328a8a200b425ac2314250346c132c77c0b53e36",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "johannmorales",
        "html_url": "https://github.com/johannmorales"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/188",
      "updated_at": "2021-10-26T18:12:46Z",
      "title": "IMERC-139: Update map layers",
      "state": "closed",
      "number": 188,
      "merged_at": "2021-10-26T18:12:45Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5d892eb99c0d09b1f8d0ce433a42bbd9ae3b015b",
        "ref": "feature/IMERC-139/update-map-layers"
      },
      "created_at": "2021-10-26T18:09:36Z",
      "closed_at": "2021-10-26T18:12:45Z",
      "body": "[IMERC-139](https://imercata.atlassian.net/browse/IMERC-139)\r\n\r\nUpdated map layers data so that it is usable on the frontend\r\n\r\n- Update `geometryType` to be either `POLYGON`, `POINT`, `LINE` or `BOUNDARY`\r\n- Remove max/min zoom levels on city/county/state layers as they need to be always visible\r\n- Update city layer name to `urban_areas`",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "dbf2a9e24a4f49d241834d83106d3c4764a210b2",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "rledford",
        "html_url": "https://github.com/rledford"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/187",
      "updated_at": "2021-10-26T16:43:19Z",
      "title": "Hotfix: Stop route optimization on failed layer cost request",
      "state": "closed",
      "number": 187,
      "merged_at": "2021-10-26T16:43:18Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "2de5e9ca91701e10cd49b00d3d4bfa4c7f1bfb75",
        "ref": "hotfix-stop-route-optimization-on-failed-layer-cost-request"
      },
      "created_at": "2021-10-26T15:33:46Z",
      "closed_at": "2021-10-26T16:43:18Z",
      "body": "### Changes\r\n- Route planner LayerCostsService's `getLayerCosts` method now throws an error when the request fails instead of returning an empty properties object.\r\n- Updated appropriate tests for `getLayerCosts` to check that an error is throw when expected.\r\n- `node-data.factory.ts` file was updated due to tests failing - the generated NodeData had a `number` type id instead of `string`.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e326b70373ad39ecc5a597269ddf7d85b45152bd",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "r2g",
        "html_url": "https://github.com/r2g"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/186",
      "updated_at": "2021-10-26T16:41:53Z",
      "title": "enhancement: Removed JSON pretty printing from the logs",
      "state": "closed",
      "number": 186,
      "merged_at": "2021-10-26T16:41:52Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "07b84065dbb0af8fa9b3b1623c20885d570c02e9",
        "ref": "enhancement-enhanced-layer-costs-service-logs"
      },
      "created_at": "2021-10-26T13:27:53Z",
      "closed_at": "2021-10-26T16:41:52Z",
      "body": "- With JSON pretty printing, the logs were spreading over multiple lines in AWS  making them unreadable.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e326b70373ad39ecc5a597269ddf7d85b45152bd",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "r2g",
        "html_url": "https://github.com/r2g"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/185",
      "updated_at": "2021-10-26T12:44:31Z",
      "title": "Enhancement: Enhanced layer costs service logs",
      "state": "closed",
      "number": 185,
      "merged_at": "2021-10-26T12:44:30Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "fb694c466cb464ac4e6a5ce4b2300943548d6c58",
        "ref": "enhancement-enhanced-layer-costs-service-logs"
      },
      "created_at": "2021-10-26T07:39:25Z",
      "closed_at": "2021-10-26T12:44:31Z",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "62272a92d6fead44334e0de67cd6bbe02639e834",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/184",
      "updated_at": "2021-10-25T16:41:28Z",
      "title": "[Snyk] Upgrade typeorm from 0.2.36 to 0.2.38",
      "state": "closed",
      "number": 184,
      "merged_at": "2021-10-25T16:41:27Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "639b6aee3924758f6e1b2809d6e9fca5518bfe54",
        "ref": "snyk-upgrade-4bf1484cb77b6c5e09c352a137b71ec7"
      },
      "created_at": "2021-10-24T07:01:55Z",
      "closed_at": "2021-10-25T16:41:27Z",
      "body": "<h3>Snyk has created this PR to upgrade typeorm from 0.2.36 to 0.2.38.</h3>\n\nAs this is a private repository, Snyk-bot does not have access. Therefore, this PR has been created automatically, but appears to have been created by a real user.</br>\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **35 versions** ahead of your current version.\n- The recommended version was released **21 days ago**, on 2021-10-02.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>typeorm</b></summary>\n    <ul>\n      <li>\n        <b>0.2.38</b> - <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases/tag/0.2.38\">2021-10-02</a></br><h3>Bug Fixes</h3>\n<ul>\n<li>prevent using absolute table path in migrations unless required (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8038\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8038/hovercard\">#8038</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/e9366b33ddff296de1254019589b85e40aa53e12\">e9366b3</a>)</li>\n<li>snakecase conversion for strings with numbers (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8111\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8111/hovercard\">#8111</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/749511d981f6b9a1a08113b23e8779a91cda78f8\">749511d</a>)</li>\n<li>use full path for table lookups (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8097\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8097/hovercard\">#8097</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/22676a04c30b3b49a61003320dfad3ecad3791e8\">22676a0</a>)</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>support QueryRunner.stream with Oracle (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8086\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8086/hovercard\">#8086</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/b858f84e6fb15f801f2564088428d250d1c59e18\">b858f84</a>)</li>\n</ul>\n      </li>\n      <li>\n        <b>0.2.38-dev.e9366b3</b> - 2021-08-18\n      </li>\n      <li>\n        <b>0.2.38-dev.d8f6037</b> - 2021-10-02\n      </li>\n      <li>\n        <b>0.2.38-dev.d4111ce</b> - 2021-10-02\n      </li>\n      <li>\n        <b>0.2.38-dev.b858f84</b> - 2021-08-17\n      </li>\n      <li>\n        <b>0.2.38-dev.a868078</b> - 2021-08-28\n      </li>\n      <li>\n        <b>0.2.38-dev.749511d</b> - 2021-08-25\n      </li>\n      <li>\n        <b>0.2.38-dev.324f1d8</b> - 2021-10-02\n      </li>\n      <li>\n        <b>0.2.38-dev.22676a0</b> - 2021-08-24\n      </li>\n      <li>\n        <b>0.2.38-dev.02f0bce</b> - 2021-08-13\n      </li>\n      <li>\n        <b>0.2.37</b> - <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases/tag/0.2.37\">2021-08-13</a></br><h3>Bug Fixes</h3>\n<ul>\n<li>allow periods in parameter identifiers (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8022\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8022/hovercard\">#8022</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/420193892ffe857c532130c0c7b18dcc4c8d38e2\">4201938</a>)</li>\n<li>ConnectionManager <code>connections</code> property should include list of <code>Connection</code>s (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8004\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8004/hovercard\">#8004</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/2344db60c4314da31885f5686e94bb6dcb203a96\">2344db6</a>)</li>\n<li>entity value for date columns that are related (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8027\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8027/hovercard\">#8027</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/5a3767f58f6ef355b01cf6e92342401a051a369c\">5a3767f</a>)</li>\n<li>handle brackets when only one condition is passed (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8048\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8048/hovercard\">#8048</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/ab39066f182d357fcc999cd976510c0e2a61d6de\">ab39066</a>)</li>\n<li>handle enums with multiple apostrophes in MySQL (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8013\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8013/hovercard\">#8013</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/37c40a610caecfc3b27b48a87b0e98d715f23395\">37c40a6</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8011\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/8011/hovercard\">#8011</a></li>\n<li>include all drivers in driverfactory error message (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8061\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8061/hovercard\">#8061</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/fbd1ef74e84b59ef0b8d99e311f0aced902190e6\">fbd1ef7</a>)</li>\n<li>resolve not returning soft deleted relations with withDeleted find option (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8017\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8017/hovercard\">#8017</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/65cbcc79bceac4cf8d15dec8c558dcbc9a037220\">65cbcc7</a>)</li>\n<li>SAP HANA inserts used incorrect value for returning query (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8072\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8072/hovercard\">#8072</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/36398dbe467274a9ac08a013ed4daaf307ee2de2\">36398db</a>)</li>\n<li>some drivers set the wrong database name when defined from url (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8058\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8058/hovercard\">#8058</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/a3a32849c04a83adbf775fcf07843a934551dbfb\">a3a3284</a>)</li>\n<li>throw error when not connected in drivers (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7995\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7995/hovercard\">#7995</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/cd71f62cb8125d1bbd92b341aa2eea1de0ac3537\">cd71f62</a>)</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>add relations option to tree queries (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7981\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7981/hovercard\">#7981</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/ca26297484542498b8f622f540ca354360d53ed0\">ca26297</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7974\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7974/hovercard\">#7974</a> <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/4564\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/4564/hovercard\">#4564</a></li>\n<li>add serviceName option for oracle connections (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8021\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8021/hovercard\">#8021</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/37bd0124dc81c957b2a036436594ae8c4606eb6c\">37bd012</a>)</li>\n<li>add support to string array on dropColumns (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7654\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7654/hovercard\">#7654</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/91d5b2fc374c2f7b1545d40ee76577272de21436\">91d5b2f</a>)</li>\n<li>support Oracle Implicit Results (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8050\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8050/hovercard\">#8050</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/fe78bee3725efef47d5be6f924b9caf13f3299a7\">fe78bee</a>)</li>\n</ul>\n      </li>\n      <li>\n        <b>0.2.37-dev.fe78bee</b> - 2021-08-08\n      </li>\n      <li>\n        <b>0.2.37-dev.fbd1ef7</b> - 2021-08-11\n      </li>\n      <li>\n        <b>0.2.37-dev.fbbac93</b> - 2021-08-03\n      </li>\n      <li>\n        <b>0.2.37-dev.f7eb46d</b> - 2021-07-31\n      </li>\n      <li>\n        <b>0.2.37-dev.f0e40f6</b> - 2021-08-06\n      </li>\n      <li>\n        <b>0.2.37-dev.cd71f62</b> - 2021-07-31\n      </li>\n      <li>\n        <b>0.2.37-dev.ca26297</b> - 2021-08-04\n      </li>\n      <li>\n        <b>0.2.37-dev.ba366f2</b> - 2021-08-08\n      </li>\n      <li>\n        <b>0.2.37-dev.ab39066</b> - 2021-08-06\n      </li>\n      <li>\n        <b>0.2.37-dev.a5e4ce7</b> - 2021-08-05\n      </li>\n      <li>\n        <b>0.2.37-dev.a3a3284</b> - 2021-08-10\n      </li>\n      <li>\n        <b>0.2.37-dev.91d5b2f</b> - 2021-07-31\n      </li>\n      <li>\n        <b>0.2.37-dev.80cdf8f</b> - 2021-08-11\n      </li>\n      <li>\n        <b>0.2.37-dev.768b4fe</b> - 2021-08-05\n      </li>\n      <li>\n        <b>0.2.37-dev.69fabaf</b> - 2021-07-31\n      </li>\n      <li>\n        <b>0.2.37-dev.65cbcc7</b> - 2021-08-10\n      </li>\n      <li>\n        <b>0.2.37-dev.5a3767f</b> - 2021-08-08\n      </li>\n      <li>\n        <b>0.2.37-dev.5714e8d</b> - 2021-08-11\n      </li>\n      <li>\n        <b>0.2.37-dev.37c40a6</b> - 2021-08-11\n      </li>\n      <li>\n        <b>0.2.37-dev.37bd012</b> - 2021-08-04\n      </li>\n      <li>\n        <b>0.2.37-dev.36398db</b> - 2021-08-12\n      </li>\n      <li>\n        <b>0.2.37-dev.2344db6</b> - 2021-08-04\n      </li>\n      <li>\n        <b>0.2.37-dev.01a038c</b> - 2021-08-13\n      </li>\n      <li>\n        <b>0.2.37-dev.4201938</b> - 2021-08-05\n      </li>\n      <li>\n        <b>0.2.36</b> - <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases/tag/0.2.36\">2021-07-31</a></br><h3>Bug Fixes</h3>\n<ul>\n<li>add deprecated <code>WhereExpression</code> alias for <code>WhereExpressionBuilder</code> (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7980\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7980/hovercard\">#7980</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/76e7ed943779b940212c4e453d97028b5ffed7d0\">76e7ed9</a>)</li>\n<li>always generate migrations with template string literals (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7971\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7971/hovercard\">#7971</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/e9c2af610a1c9a632605b71d67b97e048be2e29e\">e9c2af6</a>)</li>\n<li>use js rather than ts in all <code>browser</code> package manifests (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7982\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7982/hovercard\">#7982</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/0d90bcdc8c77f2080aa200fe9f4f962b7b01c9ee\">0d90bcd</a>)</li>\n<li>use nvarchar/ntext during transit for SQLServer queries (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7933\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7933/hovercard\">#7933</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/62d79762dbfe58219a5673ba4d404fe9f2e40436\">62d7976</a>)</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>add postgres connection option <code>applicationName</code> (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7989\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7989/hovercard\">#7989</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/d365acca68069d0bd9acea5b45a73d7f4c1f4d8f\">d365acc</a>)</li>\n</ul>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases\">typeorm GitHub release notes</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIzOTE2MGQ3Mi1mZWRiLTQ5NzUtOWEwOC1kZWYwMjA3YmIzZWIiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjM5MTYwZDcyLWZlZGItNDk3NS05YTA4LWRlZjAyMDdiYjNlYiJ9fQ==\" width=\"0\" height=\"0\"/><img src=\"https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=typeorm&from_version=0.2.36&to_version=0.2.38&pr_id=39160d72-fedb-4975-9a08-def0207bb3eb&visibility=false&has_feature_flag=false\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;typeorm&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"39160d72-fedb-4975-9a08-def0207bb3eb\",\"prPublicId\":\"39160d72-fedb-4975-9a08-def0207bb3eb\",\"dependencies\":[{\"name\":\"typeorm\",\"from\":\"0.2.36\",\"to\":\"0.2.38\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=referral&page=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":35,\"publishedDate\":\"2021-10-02T21:49:29.724Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "45869d94017826e6163ddd76a7cbabf348f24e08",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/183",
      "updated_at": "2021-10-22T19:17:16Z",
      "title": "Re-introduce auto-assignment of missing segment ids.",
      "state": "closed",
      "number": 183,
      "merged_at": "2021-10-22T19:15:50Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ba893f9fc68259723229dcb6508551378c1b7be9",
        "ref": "hotfix/segment-ids"
      },
      "created_at": "2021-10-22T19:11:45Z",
      "closed_at": "2021-10-22T19:15:50Z",
      "body": "- Re-adds auto-assignment of missing segment ids\r\n- Adds some unit tests to make sure we don't lose this functionality again.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "46dd6ebfa1fd3384963a720b53287caf583a8996",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "r2g",
        "html_url": "https://github.com/r2g"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/182",
      "updated_at": "2021-10-22T14:51:11Z",
      "title": "[IMERC-218]: added the projectAdders accumulation to the Forecast Cost summary",
      "state": "closed",
      "number": 182,
      "merged_at": "2021-10-22T14:51:10Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "2a8aee17599b8ed5a5a8554dae1809663a7f13de",
        "ref": "IMERC-218-Project-adders-and-new-calculation-types-for-one-time-project-costs"
      },
      "created_at": "2021-10-21T18:33:47Z",
      "closed_at": "2021-10-22T14:51:10Z",
      "body": "- Added the `projectAdders accumulation` to the Forecast Cost summary",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c1de67626a17496b7fde42d024e2722540e9ece2",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/181",
      "updated_at": "2021-10-25T18:20:21Z",
      "title": "Merge qa -> staging",
      "state": "closed",
      "number": 181,
      "merged_at": "2021-10-25T18:20:21Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "62272a92d6fead44334e0de67cd6bbe02639e834",
        "ref": "qa"
      },
      "created_at": "2021-10-21T17:15:16Z",
      "closed_at": "2021-10-25T18:20:21Z",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "353a511ef460e4a4840534825f981e761bf672d0",
        "ref": "staging"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/180",
      "updated_at": "2021-10-21T16:45:15Z",
      "title": "[IMERC-138] Properly handle unexpected responses from CARTO.",
      "state": "closed",
      "number": 180,
      "merged_at": "2021-10-21T16:45:14Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "624a326e05004a41cf936767da3e90bbc85ca0ab",
        "ref": "feature/IMERC-138-carto-long-routes"
      },
      "created_at": "2021-10-21T16:33:29Z",
      "closed_at": "2021-10-21T16:45:14Z",
      "body": "[IMERC-138](https://imercata.atlassian.net/browse/IMERC-138)\r\n\r\n- Adds some error handling for responses from CARTO that do not match the expected structure (most likely for routes that are too long)",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9ac2f8d2ba1fabc12d6642a86b071fc48922740b",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/179",
      "updated_at": "2021-10-21T13:35:45Z",
      "title": "Update to the newest version of surrogarto (284d79b)",
      "state": "closed",
      "number": 179,
      "merged_at": "2021-10-21T13:35:44Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "8fd38ac8f913bbab2b3971685f713d3a4428ec39",
        "ref": "update-surrogarto/284d79b"
      },
      "created_at": "2021-10-21T11:48:08Z",
      "closed_at": "2021-10-21T13:35:44Z",
      "body": "Includes the nodes file updates.\r\n\r\nThis will require everyone to execute the following commands from within the `imercata-backend` directory to update their local environment:\r\n```shell-script\r\n$ git submodule update --init --recursive\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "82423f933827fdfb93145731250bfb0d13e2c2cb",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/178",
      "updated_at": "2021-10-20T13:34:05Z",
      "title": "adderPreferences inconsistencies",
      "state": "closed",
      "number": 178,
      "merged_at": "2021-10-20T13:34:04Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "abb0ab6b2762673f908fe60d4b9aef7aa4288557",
        "ref": "hotfix/adderPreferences"
      },
      "created_at": "2021-10-20T12:21:10Z",
      "closed_at": "2021-10-20T13:34:04Z",
      "body": "I spent some time playing around with the backend now that the current phase of layer cost functionality is complete, and I noticed some inconsistencies with how the `adderPreferences` were being referenced.  In some places, the code was expecting an object like `{ adders: [] }`, and in some places `{ preferredAdderIds: [] }`.  I chose the latter, and modified all references accordingly.\r\n\r\nI also beefed up testing around this behavior quite a bit so we catch it in the future.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c677c51bf8fbc0989e3898a4cbc2402bfe52b82d",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 784442429,
        "path": "src/projects/dto/adder-preferences.dto.ts",
        "id": 732744546,
        "diff_hunk": "@@ -1,10 +1,12 @@\n import { ApiProperty } from '@nestjs/swagger';\n import { Expose } from 'class-transformer';\n+import { IsString } from 'class-validator';\n \n import { AdderPreferences } from '../interfaces';\n \n export class AdderPreferencesDTO implements AdderPreferences {\n   @Expose()\n   @ApiProperty()\n-  adders: string[];\n+  @IsString({ each: true })",
        "created_at": "2021-10-20T12:53:35Z",
        "body": "Class validator has an `IsUUID` decorator we could use to be more strict - Postgres is using UUID v4."
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 784442429,
        "path": "test/factories/projects.factory.ts",
        "id": 732749781,
        "diff_hunk": "@@ -50,6 +50,7 @@ export const projectsFactory = ProjectFactory.define(\n       type: ProjectType.NEW_FIELD,\n       productType: ProductType.CRUDE,\n       routeSpecification: new RouteSpecificationDTO(),\n+      adderPreferences: { preferredAdderIds: ['adder1', 'addr2'] },",
        "created_at": "2021-10-20T12:59:05Z",
        "body": "NOTE: This would fail validation for UUIDv4 if it's being checked for."
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 784442429,
        "path": "test/route-planner/services/layer-costs.service.spec.ts",
        "id": 732751527,
        "diff_hunk": "@@ -39,6 +39,45 @@ describe('LayerCostsService', () => {\n     http = module.get<HttpService>('HttpService');\n   });\n \n+  beforeEach(() => {\n+    jest.clearAllMocks();\n+  });\n+\n+  describe('getLayerCosts', () => {\n+    const preferredAdderIds = ['abc', '123'];",
        "created_at": "2021-10-20T13:00:53Z",
        "body": "Same as above."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 784487377,
        "path": "src/projects/dto/adder-preferences.dto.ts",
        "in_reply_to_id": 732744546,
        "id": 732777446,
        "diff_hunk": "@@ -1,10 +1,12 @@\n import { ApiProperty } from '@nestjs/swagger';\n import { Expose } from 'class-transformer';\n+import { IsString } from 'class-validator';\n \n import { AdderPreferences } from '../interfaces';\n \n export class AdderPreferencesDTO implements AdderPreferences {\n   @Expose()\n   @ApiProperty()\n-  adders: string[];\n+  @IsString({ each: true })",
        "created_at": "2021-10-20T13:28:23Z",
        "body": "Migrated to `@IsUUID('4', { each: true })`"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 784487841,
        "path": "test/factories/projects.factory.ts",
        "in_reply_to_id": 732749781,
        "id": 732777763,
        "diff_hunk": "@@ -50,6 +50,7 @@ export const projectsFactory = ProjectFactory.define(\n       type: ProjectType.NEW_FIELD,\n       productType: ProductType.CRUDE,\n       routeSpecification: new RouteSpecificationDTO(),\n+      adderPreferences: { preferredAdderIds: ['adder1', 'addr2'] },",
        "created_at": "2021-10-20T13:28:42Z",
        "body": "Generated actual UUID's."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 784488105,
        "path": "test/route-planner/services/layer-costs.service.spec.ts",
        "in_reply_to_id": 732751527,
        "id": 732777939,
        "diff_hunk": "@@ -39,6 +39,45 @@ describe('LayerCostsService', () => {\n     http = module.get<HttpService>('HttpService');\n   });\n \n+  beforeEach(() => {\n+    jest.clearAllMocks();\n+  });\n+\n+  describe('getLayerCosts', () => {\n+    const preferredAdderIds = ['abc', '123'];",
        "created_at": "2021-10-20T13:28:53Z",
        "body": "Same as above."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/177",
      "updated_at": "2021-10-19T17:42:09Z",
      "title": "Convert `Feature` id to string (seems to be a string coming from CARTO).",
      "state": "closed",
      "number": 177,
      "merged_at": "2021-10-19T17:42:08Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5a45daf6afdd8250a2854c39635b3aea392a22e0",
        "ref": "hotfix/zero-node-data"
      },
      "created_at": "2021-10-19T16:33:50Z",
      "closed_at": "2021-10-19T17:42:08Z",
      "body": "[IMERC-177](https://github.com/iMercatus/imercata-backend/pull/177)\r\n\r\n- converts `Feature.id` to a string (was originally a number, but CARTO sends it as a string).\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ea5f87cef54e229a49f3775e06c40a5febe5a2e7",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/176",
      "updated_at": "2021-10-20T09:02:21Z",
      "title": "[IMERC-192] Expose the ability to recalculate costs for a route",
      "state": "closed",
      "number": 176,
      "merged_at": "2021-10-20T09:02:20Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e488d1d6ac6ce8d91653c52562d29078a4dfb1ba",
        "ref": "feature/IMERC-192-expose-recalculate-forecast-cost"
      },
      "created_at": "2021-10-19T15:00:49Z",
      "closed_at": "2021-10-20T09:02:20Z",
      "body": "[IMERC-192](https://imercata.atlassian.net/browse/IMERC-192)\r\n\r\n- Refactors code from `RoutesService` and `LateralsService` into `LayerCostsService` to reduce duplication\r\n- Adds 2 API endpoints to recalculate cost:\r\n    - `POST /projects/{projectId}/routes/{routeId}/recalculate-cost`\r\n    - `POST /projects/{projectId}/routes/{routeId}/laterals/{lateralId}/recalculate-cost`",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "f5e4ed264582331e28f2c4d0b0aa7cf11fcba4f1",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "r2g",
          "html_url": "https://github.com/r2g"
        },
        "pull_request_review_id": 783602240,
        "path": "test/route-planner/controllers/routes.controller.spec.ts",
        "id": 732107927,
        "diff_hunk": "@@ -204,4 +204,6 @@ describe('RoutesController', () => {\n       expect(service.delete).toHaveBeenCalledWith(project, user, routeId);\n     });\n   });\n+\n+  describe('recalculateCost', () => {});",
        "created_at": "2021-10-19T17:47:48Z",
        "body": "Maybe this shouldn't be here as it has no implementation. Otherwise, everything else looks good to me"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 783653969,
        "path": "test/route-planner/controllers/routes.controller.spec.ts",
        "in_reply_to_id": 732107927,
        "id": 732147263,
        "diff_hunk": "@@ -204,4 +204,6 @@ describe('RoutesController', () => {\n       expect(service.delete).toHaveBeenCalledWith(project, user, routeId);\n     });\n   });\n+\n+  describe('recalculateCost', () => {});",
        "created_at": "2021-10-19T18:42:36Z",
        "body": "Instead of removing it, I filled it in with actual tests."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "r2g",
        "html_url": "https://github.com/r2g"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/175",
      "updated_at": "2021-10-18T20:42:49Z",
      "title": "hotfix: fixed failing optimization request e2e tests",
      "state": "closed",
      "number": 175,
      "merged_at": "2021-10-18T20:42:49Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "b4a3aa0bd3dc7ceacd51beb3e8373d01d5cd7b14",
        "ref": "hotfix-fix-failing-optimization-request-e2e-tests"
      },
      "created_at": "2021-10-18T20:33:13Z",
      "closed_at": "2021-10-18T20:42:49Z",
      "body": "- the tests were failing because the nodeData key's value was returned as an empty object.\r\n```\r\n    $ npx jest --config jest.e2e-config.ts --runInBand\r\n     PASS  test/e2e/optimization-requests.e2e-spec.ts (10.427 s)\r\n     PASS  test/e2e/laterals.e2e-spec.ts (7.61 s)\r\n     PASS  test/e2e/routes.e2e-spec.ts (6.148 s)\r\n     PASS  test/e2e/lateral-optimization-requests.e2e-spec.ts (5.766 s)\r\n     PASS  test/e2e/users.e2e-spec.ts\r\n     PASS  test/e2e/admin-roles.e2e-spec.ts\r\n     PASS  test/e2e/programs.e2e-spec.ts\r\n     PASS  test/e2e/projects.e2e-spec.ts\r\n     PASS  test/e2e/companies.e2e-spec.ts\r\n     PASS  test/e2e/s3-files.e2e-spec.ts\r\n     PASS  test/e2e/authentication.e2e-spec.ts\r\n     PASS  test/e2e/map-layers.e2e-spec.ts\r\n     PASS  test/e2e/features.e2e-spec.ts\r\n     PASS  test/e2e/form-fields.e2e-spec.ts\r\n     PASS  test/e2e/app.e2e-spec.ts\r\n    \r\n    Test Suites: 15 passed, 15 total\r\n    Tests:       267 passed, 267 total\r\n    Snapshots:   0 total\r\n    Time:        57.039 s, estimated 59 s\r\n    Ran all test suites.\r\n    ‚ú®  Done in 61.40s.\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "8ef21e1efcd40a211a8f992d43d2273ec8c3e83b",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "r2g",
        "html_url": "https://github.com/r2g"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/174",
      "updated_at": "2021-10-18T20:10:16Z",
      "title": "IMERC-196: BE consolidates base lay items breakdown and adders accumulators",
      "state": "closed",
      "number": 174,
      "merged_at": "2021-10-18T20:10:15Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "2496561a9c67b4d02c8b785ebccfc2130b93d085",
        "ref": "IMERC-196-BE-consolidates-base-lay-items-breakdown-and-adders-accumulators"
      },
      "created_at": "2021-10-18T17:06:46Z",
      "closed_at": "2021-10-18T20:10:15Z",
      "body": " - added an `adders and baseLayItems key to the forecast cost response` from the backend\r\n - added `bignumber.js` to avoid floating point math issues\r\n\r\nThe forecast cost response now looks similar to the one below:\r\n\r\n```json\r\n  {\r\n          \"baseLayUnitCost\": 60.65,\r\n          \"totalBaseLayCost\": 3115642.913381309,\r\n          \"totalAdderCost\": 1016665.9166258115,\r\n          \"adderAverageCost\": 19.79071079632709,\r\n          \"routeCost\": 4132308.83000712,\r\n          \"totalDistance\": 51370.86419425077,\r\n          \"baseLayItems\": [\r\n              {\r\n                  \"id\": \"f8dd8de1-65c2-40cd-886f-23eedf8918f0\",\r\n                  \"name\": \"One Call / Locate/Potholing\",\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"unitCost\": 0.5,\r\n                  \"multiplier\": 1,\r\n                  \"totalCost\": 25685.432097125384\r\n              },\r\n              {\r\n                  \"id\": \"1d4e2143-8142-4ccf-8b33-4deb2c2e637d\",\r\n                  \"name\": \"ROW Clearing\",\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"unitCost\": 1.2,\r\n                  \"multiplier\": 1,\r\n                  \"totalCost\": 61645.037033100925\r\n              },\r\n              {\r\n                  \"id\": \"79eeba66-fd18-4017-8800-3a3dde651f2a\",\r\n                  \"name\": \"ROW Grading\",\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"unitCost\": 4.4,\r\n                  \"multiplier\": 1,\r\n                  \"totalCost\": 226031.8024547034\r\n              },\r\n              {\r\n                  \"id\": \"6da7a145-126e-4491-b29f-acb0739f9051\",\r\n                  \"name\": \"Stringing\",\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"unitCost\": 6.2,\r\n                  \"multiplier\": 1,\r\n                  \"totalCost\": 318499.35800435476\r\n              },\r\n              {\r\n                  \"id\": \"c2b0639d-5fa1-49a1-b2a7-d475518d8b44\",\r\n                  \"name\": \"Bending\",\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"unitCost\": 3,\r\n                  \"multiplier\": 1,\r\n                  \"totalCost\": 154112.59258275232\r\n              },\r\n              {\r\n                  \"id\": \"19a30f6a-7f30-422f-aba1-e5865835feb7\",\r\n                  \"name\": \"Ditching\",\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"unitCost\": 4.4,\r\n                  \"multiplier\": 1,\r\n                  \"totalCost\": 226031.8024547034\r\n              },\r\n              {\r\n                  \"id\": \"14b9312d-1e2b-49e4-aaa4-5328a1b891dd\",\r\n                  \"name\": \"Pipe Lay / Welding\",\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"unitCost\": 18.5,\r\n                  \"multiplier\": 1,\r\n                  \"totalCost\": 950360.9875936393\r\n              },\r\n              {\r\n                  \"id\": \"b536d098-cf40-4ac8-b0da-454a4d642508\",\r\n                  \"name\": \"Coating\",\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"unitCost\": 2.75,\r\n                  \"multiplier\": 1,\r\n                  \"totalCost\": 141269.87653418962\r\n              },\r\n              {\r\n                  \"id\": \"98a9c703-509f-40c4-97ff-f18da6211e0e\",\r\n                  \"name\": \"Lowering\",\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"unitCost\": 3.5,\r\n                  \"multiplier\": 1,\r\n                  \"totalCost\": 179798.0246798777\r\n              },\r\n              {\r\n                  \"id\": \"97da5f5f-6474-4ed1-82e4-8087b8a88097\",\r\n                  \"name\": \"Tie-In\",\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"unitCost\": 5.45,\r\n                  \"multiplier\": 1,\r\n                  \"totalCost\": 279971.2098586667\r\n              },\r\n              {\r\n                  \"id\": \"4c43b97c-187a-4bec-8868-7251f8ea4546\",\r\n                  \"name\": \"Backfill\",\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"unitCost\": 1.65,\r\n                  \"multiplier\": 1,\r\n                  \"totalCost\": 84761.92592051376\r\n              },\r\n              {\r\n                  \"id\": \"c5086911-844a-426a-99f7-ea362015326d\",\r\n                  \"name\": \"Cleaning Pigs / Hydrostatic Testing / Dewatering\",\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"unitCost\": 3.55,\r\n                  \"multiplier\": 1,\r\n                  \"totalCost\": 182366.56788959022\r\n              },\r\n              {\r\n                  \"id\": \"9be01180-a2e1-477a-b8a5-db2a0e60c3f9\",\r\n                  \"name\": \"Successful Baseline ILI and Caliper Tool Run\",\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"unitCost\": 0.65,\r\n                  \"multiplier\": 1,\r\n                  \"totalCost\": 33391.061726263004\r\n              },\r\n              {\r\n                  \"id\": \"c8b1af7d-e3c5-4263-8b76-0a799e367a7e\",\r\n                  \"name\": \"Clean-up\",\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"unitCost\": 4.9,\r\n                  \"multiplier\": 1,\r\n                  \"totalCost\": 251717.23455182876\r\n              }\r\n          ],\r\n          \"adders\": [\r\n              {\r\n                  \"id\": \"a6d0a32f-19e9-49db-9de8-5bc29d0cef1b\",\r\n                  \"name\": \"A - HDD (Dirt)\",\r\n                  \"unitCost\": 300,\r\n                  \"totalCost\": 172111.9786009151,\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"totalDistance\": 573.7065953363838\r\n              },\r\n              {\r\n                  \"id\": \"6785abd6-7631-4684-937f-7561f824e575\",\r\n                  \"name\": \"B - HDD (Rock)\",\r\n                  \"unitCost\": 350,\r\n                  \"totalCost\": 200797.3083677343,\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"totalDistance\": 573.7065953363838\r\n              },\r\n              {\r\n                  \"id\": \"8c317853-96b1-4ce2-b25c-ceb6b3eb8c20\",\r\n                  \"name\": \"C - HDD Wireline Adder\",\r\n                  \"unitCost\": 25,\r\n                  \"totalCost\": 14342.664883409592,\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"totalDistance\": 573.7065953363838\r\n              },\r\n              {\r\n                  \"id\": \"f4c8beb2-9fa5-415e-9ec6-2c623858630f\",\r\n                  \"name\": \"D - Bore (Dirt)\",\r\n                  \"unitCost\": 325,\r\n                  \"totalCost\": 186454.6434843247,\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"totalDistance\": 573.7065953363838\r\n              },\r\n              {\r\n                  \"id\": \"5a3b69ad-a97c-484d-ad12-d9728839223c\",\r\n                  \"name\": \"E - Bore (Rock)\",\r\n                  \"unitCost\": 375,\r\n                  \"totalCost\": 215139.9732511439,\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"totalDistance\": 573.7065953363838\r\n              },\r\n              {\r\n                  \"id\": \"e13c6f29-e24b-4e1c-a563-2e5d7902eb9a\",\r\n                  \"name\": \"A - Open Cut Road Crossings (Unidentified)\",\r\n                  \"unitCost\": 250,\r\n                  \"totalCost\": 34819.348038283795,\r\n                  \"calculationType\": \"PER_LINEAR_FEET\",\r\n                  \"totalDistance\": 139.27739215313517\r\n              },\r\n              {\r\n                  \"id\": \"fd0f65b4-4ec2-4376-8597-1dccecf95669\",\r\n                  \"name\": \"C - Open Cut Road Crossings (Total Identified)\",\r\n                  \"unitCost\": 150000,\r\n                  \"totalCost\": 150000,\r\n                  \"calculationType\": \"OCCURRENCE\",\r\n                  \"totalDistance\": 139.27739215313517\r\n              },\r\n              {\r\n                  \"id\": \"2acf603a-3b9f-4ceb-a2a4-9063df6ccf2e\",\r\n                  \"name\": \"D - Waterbody Crossing Using Dam and Pump (Unidentified)\",\r\n                  \"unitCost\": 25000,\r\n                  \"totalCost\": 25000,\r\n                  \"calculationType\": \"OCCURRENCE\",\r\n                  \"totalDistance\": 139.27739215313517\r\n              },\r\n              {\r\n                  \"id\": \"da06971c-8b8b-4af2-a549-a04a7c2a9a9e\",\r\n                  \"name\": \"E - Waterbody Crossing Using Flume Method (Unidentified)\",\r\n                  \"unitCost\": 18000,\r\n                  \"totalCost\": 18000,\r\n                  \"calculationType\": \"OCCURRENCE\",\r\n                  \"totalDistance\": 139.27739215313517\r\n              }\r\n          ]\r\n      }\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c3f1191d2ef5c3bdab9a749ff1ced4f8fadf9b21",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/173",
      "updated_at": "2021-10-18T12:38:40Z",
      "title": "[IMERC-177] Properly handle nodeData when received for segments update",
      "state": "closed",
      "number": 173,
      "merged_at": "2021-10-18T12:38:39Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "709c2094ace9a09993cad4d9b0266707ebb772a3",
        "ref": "hotfix/IMERC-177-forecast-cost"
      },
      "created_at": "2021-10-18T12:24:54Z",
      "closed_at": "2021-10-18T12:38:39Z",
      "body": "Hotfix for issue encountered by FE:\r\n\r\n> @imerc-be is anything pending to be merged in BE to allow me to complete this task? https://imercata.atlassian.net/browse/IMERC-207 Currently getting a ‚ÄúnodeData shouldn't be part of segments‚Äù error when sending the PATCH request",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c0e29e7e64bead06fcd8c768572b3d6da68e64ea",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/172",
      "updated_at": "2021-10-20T09:16:10Z",
      "title": "[Snyk] Upgrade nanoid from 3.1.25 to 3.1.28",
      "state": "closed",
      "number": 172,
      "merged_at": "2021-10-20T09:16:09Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "34a66995bdaf49e752da75ab9788a0c08f14151f",
        "ref": "snyk-upgrade-4a0d5d8b94228119a07dbaaaf2820450"
      },
      "created_at": "2021-10-18T06:25:27Z",
      "closed_at": "2021-10-20T09:16:09Z",
      "body": "<h3>Snyk has created this PR to upgrade nanoid from 3.1.25 to 3.1.28.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=nanoid&from_version=3.1.25&to_version=3.1.28&pr_id=3d9e0fed-4d5d-4f48-ac55-38ba74c8e282&visibility=true&has_feature_flag=false)\nAs this is a private repository, Snyk-bot does not have access. Therefore, this PR has been created automatically, but appears to have been created by a real user.</br>\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **3 versions** ahead of your current version.\n- The recommended version was released **22 days ago**, on 2021-09-26.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>nanoid</b></summary>\n    <ul>\n      <li>\n        <b>3.1.28</b> - <a href=\"https://snyk.io/redirect/github/ai/nanoid/releases/tag/3.1.28\">2021-09-26</a></br><p>3.1.28</p>\n      </li>\n      <li>\n        <b>3.1.27</b> - <a href=\"https://snyk.io/redirect/github/ai/nanoid/releases/tag/3.1.27\">2021-09-26</a></br><p>3.1.27</p>\n      </li>\n      <li>\n        <b>3.1.26</b> - <a href=\"https://snyk.io/redirect/github/ai/nanoid/releases/tag/3.1.26\">2021-09-26</a></br><p>3.1.26</p>\n      </li>\n      <li>\n        <b>3.1.25</b> - <a href=\"https://snyk.io/redirect/github/ai/nanoid/releases/tag/3.1.25\">2021-08-12</a></br><p>3.1.25</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/ai/nanoid/releases\">nanoid GitHub release notes</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIzZDllMGZlZC00ZDVkLTRmNDgtYWM1NS0zOGJhNzRjOGUyODIiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjNkOWUwZmVkLTRkNWQtNGY0OC1hYzU1LTM4YmE3NGM4ZTI4MiJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;nanoid&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"3d9e0fed-4d5d-4f48-ac55-38ba74c8e282\",\"prPublicId\":\"3d9e0fed-4d5d-4f48-ac55-38ba74c8e282\",\"dependencies\":[{\"name\":\"nanoid\",\"from\":\"3.1.25\",\"to\":\"3.1.28\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=referral&page=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":3,\"publishedDate\":\"2021-09-26T08:26:56.420Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c0e29e7e64bead06fcd8c768572b3d6da68e64ea",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/171",
      "updated_at": "2021-10-15T18:03:21Z",
      "title": "[IMERC-177] forecast cost",
      "state": "closed",
      "number": 171,
      "merged_at": "2021-10-15T18:03:20Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "1ed3c5465fded243bb2a012590608bd23422ccc1",
        "ref": "feature/IMERC-177-forecast-cost"
      },
      "created_at": "2021-10-15T14:35:49Z",
      "closed_at": "2021-10-15T18:03:20Z",
      "body": "[IMERC-177](https://imercata.atlassian.net/browse/IMERC-177)\r\n\r\n- Contacts the LayerCost service on route up date to get the forecast cost\r\n- Calculates total costs for the route\r\n- Returns the Forecast Cost to the FE",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "8303323060c72b1ab136bbcd69cb7358ec87ad22",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/170",
      "updated_at": "2021-10-20T09:29:01Z",
      "title": "[Snyk] Upgrade @nestjs/axios from 0.0.1 to 0.0.2",
      "state": "closed",
      "number": 170,
      "merged_at": "2021-10-20T09:29:00Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "63795f98e845ddb74eea493a6315ab3da81478f0",
        "ref": "snyk-upgrade-e29392f29cb81fa41674e25a47d7676f"
      },
      "created_at": "2021-10-15T08:17:50Z",
      "closed_at": "2021-10-20T09:29:00Z",
      "body": "<h3>Snyk has created this PR to upgrade @nestjs/axios from 0.0.1 to 0.0.2.</h3>\n\nAs this is a private repository, Snyk-bot does not have access. Therefore, this PR has been created automatically, but appears to have been created by a real user.</br>\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **22 days ago**, on 2021-09-23.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>@nestjs/axios</b></summary>\n    <ul>\n      <li>\n        <b>0.0.2</b> - <a href=\"https://snyk.io/redirect/github/nestjs/axios/releases/tag/0.0.2\">2021-09-23</a></br><a href=\"https://snyk.io/redirect/github/nestjs/axios/releases/tag/0.0.2\"> Read more </a>\n      </li>\n      <li>\n        <b>0.0.1</b> - 2021-07-07\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nestjs/axios/releases\">@nestjs/axios GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>@nestjs/axios</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/d960f9177972da2f29dfda1de4b06cab4a706679\">d960f91</a> Merge pull request #145 from gul-leanix/update_axios</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/92764c81cf3d6c1c54715cf50c0a08d834aff07c\">92764c8</a> Merge pull request #117 from nestjs/renovate/npm-path-parse-vulnerability</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/12396e8b65d3cd1018416cc063b51e528da40902\">12396e8</a> chore(deps): update dependency release-it to v14.11.6</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/f88fb7042ec7e06145887d8662d37e40e95e57d0\">f88fb70</a> chore(deps): update dependency @ types/node to v14.17.18</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/e0587001eb66a6ba7f2089ee07587fa6278eac7a\">e058700</a> chore(deps): update dependency @ types/jest to v27.0.2</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/03f7f0bf8a82bfdd897bc0262244f9e14573f0ec\">03f7f0b</a> chore(deps): update typescript-eslint monorepo to v4.31.2</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/aaeeca5b3e36bb1e6642f6978111d5c5e7efe9a4\">aaeeca5</a> chore(deps): update dependency jest to v27.2.1</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/aea2088916eb17ca5eced0668cd3f5049ebb77bc\">aea2088</a> chore(deps): update dependency @ types/node to v14.17.17</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/7ff447837682251205ea8e80e71649691e11e7e6\">7ff4478</a> chore(deps): update dependency prettier to v2.4.1</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/da4b8e5d6a21157f74001f92495046396289f6a0\">da4b8e5</a> chore(deps): update dependency @ types/node to v14.17.16</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/eaa186782200504752c7cec34de4d951acbaf66b\">eaa1867</a> chore(deps): update typescript-eslint monorepo to v4.31.1</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/0331993450329bd5efeddb8691faca21efaa6a8d\">0331993</a> chore(deps): update dependency jest to v27.2.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/dea8539823e21662fa962dd21f9fff29f0a08127\">dea8539</a> fix(deps): update dependency axios to v0.21.4</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/b3d61abaf9e12f1fbd49c7c81c1d6700bd1cb8d8\">b3d61ab</a> chore(deps): update dependency typescript to v4.4.3</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/7fee6eff78cf3745f82c3d15d3399e715e8833b8\">7fee6ef</a> chore(deps): update dependency prettier to v2.4.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/8c1577d17f147ea3ba934d5d770c20950e36266e\">8c1577d</a> chore(deps): update dependency jest to v27.1.1</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/6a43b0243d13c580b326537ce31d1f58c6668729\">6a43b02</a> chore(deps): update dependency @ types/node to v14.17.15</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/70641f3e0fe59da3ec93f5947409e7b912417981\">70641f3</a> chore(deps): update typescript-eslint monorepo to v4.31.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/70c6d76eb1e165efb4236b28f95da412b6476ab0\">70c6d76</a> chore(deps): update dependency @ types/node to v14.17.14</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/3c1754a61c932bbcc1f0abb95176c622c94dcb1f\">3c1754a</a> chore(deps): update dependency @ types/node to v14.17.13</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/cee250701724a9593ec7e61f78102f30b885b360\">cee2507</a> chore(deps): update typescript-eslint monorepo to v4.30.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/8c0c47fcccaada3934da0ebe72b864841aafbe55\">8c0c47f</a> chore(deps): update dependency jest to v27.1.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/7cb97d22fb3dcadb9b4921be6519f693cbbe6fdf\">7cb97d2</a> chore(deps): update dependency typescript to v4.4.2</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/axios/commit/93e11db3521bb3d8f7526b53b9f0cd3604ea07c5\">93e11db</a> chore(deps): update dependency @ types/node to v14.17.12</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/nestjs/axios/compare/7032def6e247f5c69a14df2f7ebff536dcb6d0d6...d960f9177972da2f29dfda1de4b06cab4a706679\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI2NDNlYTRhOS0wMTJjLTRlMDItYThlNS0wNDFlMjY4YTA1OWYiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjY0M2VhNGE5LTAxMmMtNGUwMi1hOGU1LTA0MWUyNjhhMDU5ZiJ9fQ==\" width=\"0\" height=\"0\"/><img src=\"https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=@nestjs/axios&from_version=0.0.1&to_version=0.0.2&pr_id=643ea4a9-012c-4e02-a8e5-041e268a059f&visibility=false&has_feature_flag=false\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;@nestjs/axios&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"643ea4a9-012c-4e02-a8e5-041e268a059f\",\"prPublicId\":\"643ea4a9-012c-4e02-a8e5-041e268a059f\",\"dependencies\":[{\"name\":\"@nestjs/axios\",\"from\":\"0.0.1\",\"to\":\"0.0.2\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=referral&page=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-09-23T12:29:21.618Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "8303323060c72b1ab136bbcd69cb7358ec87ad22",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/169",
      "updated_at": "2021-10-20T09:41:37Z",
      "title": "[Snyk] Upgrade nodemailer from 6.6.3 to 6.6.5",
      "state": "closed",
      "number": 169,
      "merged_at": "2021-10-20T09:41:37Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e32a1c3b115fa29a8ee17f8393bcc6d695b4aa64",
        "ref": "snyk-upgrade-76ab9818f8b25503ea43cd9121132ff1"
      },
      "created_at": "2021-10-15T08:17:45Z",
      "closed_at": "2021-10-20T09:41:37Z",
      "body": "<h3>Snyk has created this PR to upgrade nodemailer from 6.6.3 to 6.6.5.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=nodemailer&from_version=6.6.3&to_version=6.6.5&pr_id=79acb3df-f1df-4f61-848f-0fce1a2c3cbc&visibility=true&has_feature_flag=false)\nAs this is a private repository, Snyk-bot does not have access. Therefore, this PR has been created automatically, but appears to have been created by a real user.</br>\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **2 versions** ahead of your current version.\n- The recommended version was released **22 days ago**, on 2021-09-23.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>nodemailer</b></summary>\n    <ul>\n      <li>\n        <b>6.6.5</b> - <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases/tag/v6.6.5\">2021-09-23</a></br><p>v6.6.5</p>\n      </li>\n      <li>\n        <b>6.6.4</b> - <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases/tag/v6.6.4\">2021-09-23</a></br><p>v6.6.4</p>\n      </li>\n      <li>\n        <b>6.6.3</b> - <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases/tag/v6.6.3\">2021-07-14</a></br><p>v6.6.3</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases\">nodemailer GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>nodemailer</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/b7498993b991eee5fcbb3e1c0801dc5a2d5369ed\">b749899</a> v6.6.5</li>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/420244fea13cabed222f2a4c3244cb9b8af69965\">420244f</a> v6.6.4</li>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/114d2898baf1bd663fe237ac76aa903f5aa8c66a\">114d289</a> Fix ses verify for sdk v3</li>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/04e6c2c402a3f2317ce0074d7939c5cc87d2174d\">04e6c2c</a> Added SECURITY.txt</li>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/6ead859307db2183229e79dd68494fa150e38eb7\">6ead859</a> Update report-an-issue.md</li>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/3aca7be0919c6f17b2d18ba8420a6464c7c22be0\">3aca7be</a> resolver: skip answers of unsupported IP versions</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/compare/fed2ebd5dc68094ea843d7a51c1c27527ac25626...b7498993b991eee5fcbb3e1c0801dc5a2d5369ed\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI3OWFjYjNkZi1mMWRmLTRmNjEtODQ4Zi0wZmNlMWEyYzNjYmMiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6Ijc5YWNiM2RmLWYxZGYtNGY2MS04NDhmLTBmY2UxYTJjM2NiYyJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;nodemailer&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"79acb3df-f1df-4f61-848f-0fce1a2c3cbc\",\"prPublicId\":\"79acb3df-f1df-4f61-848f-0fce1a2c3cbc\",\"dependencies\":[{\"name\":\"nodemailer\",\"from\":\"6.6.3\",\"to\":\"6.6.5\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=referral&page=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":2,\"publishedDate\":\"2021-09-23T12:10:20.564Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "db789efa9b4b25d4f572e8ef84b3a2979e400cfc",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/168",
      "updated_at": "2021-10-08T17:49:55Z",
      "title": "Bring OptimizationRequestDTO up to speed with layer cost changes.",
      "state": "closed",
      "number": 168,
      "merged_at": "2021-10-08T17:49:55Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "b4c3169b5d039eeb888e02bc269e9126000f641d",
        "ref": "hotfix/layer-cost-model"
      },
      "created_at": "2021-10-08T17:37:54Z",
      "closed_at": "2021-10-08T17:49:55Z",
      "body": "Just adding the new values to the DTO match the interface.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "1461afaa029a04180496b874c711fc4fb88309a5",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/167",
      "updated_at": "2021-10-07T19:53:52Z",
      "title": "[IMERC-121] Pull CARTO properties from layer cost service.",
      "state": "closed",
      "number": 167,
      "merged_at": "2021-10-07T19:53:51Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "783d39eedb4245e460962e55f7ad8a9615516f1e",
        "ref": "feature/IMERC-121-layer-cost-preferences"
      },
      "created_at": "2021-10-07T14:33:20Z",
      "closed_at": "2021-10-07T19:53:51Z",
      "body": "[IMERC-121](https://imercata.atlassian.net/browse/IMERC-121)\r\n\r\n- Also store both CARTO response files in the DB.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9dd4cd1a7cede7d09ebcb2ad9ecc33abc32ed9f2",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "rledford",
        "html_url": "https://github.com/rledford"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/166",
      "updated_at": "2021-10-06T19:15:30Z",
      "title": "Added project category to form field data",
      "state": "closed",
      "number": 166,
      "merged_at": "2021-10-06T19:15:29Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5cbee598882ffe28b54984092a748e2c37f19b88",
        "ref": "feature-add-project-form-field-data"
      },
      "created_at": "2021-10-06T18:53:33Z",
      "closed_at": "2021-10-06T19:15:29Z",
      "body": "Adds a `project` category with fields `type` and `productType`.\r\n\r\n_NOTE_: The value`NEW_MARKET_OPORTUNITY` is misspelled but it has to match the enum definition which is where it's spelled this way. This has probably been like this for a long time and may require a separate migration to prevent breaking existing records and rules in the database.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "633548f41904ef8b8aa96bb9b766dcb95b1ade3a",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 773122774,
        "path": "seeds/form-field-data.json",
        "id": 723598093,
        "diff_hunk": "@@ -1,4 +1,63 @@\n [\n+  {\n+    \"category\": \"project\",\n+    \"fields\": [\n+      {\n+        \"field\": \"type\",\n+        \"options\": [\n+          {\n+            \"value\": null,\n+            \"label\": \"\"",
        "created_at": "2021-10-06T19:05:50Z",
        "body": "any reason to have empty string as the label here?\r\n```suggestion\r\n            \"label\": \"None\"\r\n```"
      },
      {
        "user": {
          "login": "msallent",
          "html_url": "https://github.com/msallent"
        },
        "pull_request_review_id": 773124431,
        "path": "seeds/form-field-data.json",
        "id": 723599321,
        "diff_hunk": "@@ -1,4 +1,63 @@\n [\n+  {\n+    \"category\": \"project\",\n+    \"fields\": [\n+      {\n+        \"field\": \"type\",\n+        \"options\": [\n+          {\n+            \"value\": null,\n+            \"label\": \"\"\n+          },\n+          {\n+            \"value\": \"CUSTOMER_DRIVEN\",\n+            \"label\": \"Customer Driven\"\n+          },\n+          {\n+            \"value\": \"NEW_REFINERY\",\n+            \"label\": \"New Refinery\"\n+          },\n+          {\n+            \"value\": \"NEW_MARKET_OPORTUNITY\",\n+            \"label\": \"New Market Opportunity\"\n+          },\n+          {\n+            \"value\": \"NEW_TECHNOLOGY\",\n+            \"label\": \"New Technology\"\n+          },\n+          {\n+            \"value\": \"NEW_FIELD\",\n+            \"label\": \"New Field\"\n+          }\n+        ]\n+      },\n+      {\n+        \"field\": \"productType\",\n+        \"options\": [\n+          {\n+            \"value\": null,\n+            \"label\": \"\"\n+          },\n+          {\n+            \"value\": \"CRUDE\",\n+            \"label\": \"Crude\"\n+          },\n+          {\n+            \"value\": \"NATURAL_GAS\",\n+            \"label\": \"Natrual Gas\"",
        "created_at": "2021-10-06T19:07:39Z",
        "body": "Small typo here, same in line 51"
      },
      {
        "user": {
          "login": "msallent",
          "html_url": "https://github.com/msallent"
        },
        "pull_request_review_id": 773125126,
        "path": "seeds/form-field-data.json",
        "in_reply_to_id": 723598093,
        "id": 723599909,
        "diff_hunk": "@@ -1,4 +1,63 @@\n [\n+  {\n+    \"category\": \"project\",\n+    \"fields\": [\n+      {\n+        \"field\": \"type\",\n+        \"options\": [\n+          {\n+            \"value\": null,\n+            \"label\": \"\"",
        "created_at": "2021-10-06T19:08:27Z",
        "body": "@cakekindel We're showing empty options by default in FE for each dropdown"
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 773127398,
        "path": "seeds/form-field-data.json",
        "in_reply_to_id": 723599321,
        "id": 723601674,
        "diff_hunk": "@@ -1,4 +1,63 @@\n [\n+  {\n+    \"category\": \"project\",\n+    \"fields\": [\n+      {\n+        \"field\": \"type\",\n+        \"options\": [\n+          {\n+            \"value\": null,\n+            \"label\": \"\"\n+          },\n+          {\n+            \"value\": \"CUSTOMER_DRIVEN\",\n+            \"label\": \"Customer Driven\"\n+          },\n+          {\n+            \"value\": \"NEW_REFINERY\",\n+            \"label\": \"New Refinery\"\n+          },\n+          {\n+            \"value\": \"NEW_MARKET_OPORTUNITY\",\n+            \"label\": \"New Market Opportunity\"\n+          },\n+          {\n+            \"value\": \"NEW_TECHNOLOGY\",\n+            \"label\": \"New Technology\"\n+          },\n+          {\n+            \"value\": \"NEW_FIELD\",\n+            \"label\": \"New Field\"\n+          }\n+        ]\n+      },\n+      {\n+        \"field\": \"productType\",\n+        \"options\": [\n+          {\n+            \"value\": null,\n+            \"label\": \"\"\n+          },\n+          {\n+            \"value\": \"CRUDE\",\n+            \"label\": \"Crude\"\n+          },\n+          {\n+            \"value\": \"NATURAL_GAS\",\n+            \"label\": \"Natrual Gas\"",
        "created_at": "2021-10-06T19:11:03Z",
        "body": "fixed"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "cakekindel",
        "html_url": "https://github.com/cakekindel"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/165",
      "updated_at": "2021-10-05T21:07:20Z",
      "title": "qa -> staging",
      "state": "closed",
      "number": 165,
      "merged_at": "2021-10-05T21:07:20Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "633548f41904ef8b8aa96bb9b766dcb95b1ade3a",
        "ref": "qa"
      },
      "created_at": "2021-10-05T21:04:03Z",
      "closed_at": "2021-10-05T21:07:20Z",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "a99962116ca3e4bd4ab226820680d698cd5bdeaf",
        "ref": "staging"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "cakekindel",
        "html_url": "https://github.com/cakekindel"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/164",
      "updated_at": "2021-10-05T20:58:19Z",
      "title": "deploy staging",
      "state": "closed",
      "number": 164,
      "merged_at": "2021-10-05T20:58:19Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "633548f41904ef8b8aa96bb9b766dcb95b1ade3a",
        "ref": "qa"
      },
      "created_at": "2021-10-05T16:30:07Z",
      "closed_at": "2021-10-05T20:58:19Z",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "db83b977500351bed50425e4bf9af669d396f338",
        "ref": "staging"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "r2g",
        "html_url": "https://github.com/r2g"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/163",
      "updated_at": "2021-10-08T09:40:25Z",
      "title": "fix: remove hardcoded port value from app.module.spec",
      "state": "closed",
      "number": 163,
      "merged_at": "2021-10-08T09:40:24Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "77a9dcaee8d267984039074d41ac21b1172889cb",
        "ref": "hotfix/remove-hardcoded-port-value-from-app.module.spec"
      },
      "created_at": "2021-10-01T21:20:40Z",
      "closed_at": "2021-10-08T09:40:24Z",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9812c7d2ee4ecbe30409e0cee33dac1d14d09e3e",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 770280059,
        "path": "test/app.module.spec.ts",
        "id": 721353359,
        "diff_hunk": "@@ -22,7 +27,7 @@ describe('Environment variables', () => {\n \n   it('should return loaded env variables', () => {\n     const port: string = configService.get('port');\n-    expect(port === '4000').toBe(true);\n+    expect(+port === +process.env.PORT).toBe(true);",
        "created_at": "2021-10-04T13:15:41Z",
        "body": "A small nit-pick, but wouldn't this be clearer to represent as:\r\n\r\n```typescript\r\nexpect(+port).toBe(+process.env.PORT)\r\n```\r\n?"
      },
      {
        "user": {
          "login": "r2g",
          "html_url": "https://github.com/r2g"
        },
        "pull_request_review_id": 770343784,
        "path": "test/app.module.spec.ts",
        "in_reply_to_id": 721353359,
        "id": 721398723,
        "diff_hunk": "@@ -22,7 +27,7 @@ describe('Environment variables', () => {\n \n   it('should return loaded env variables', () => {\n     const port: string = configService.get('port');\n-    expect(port === '4000').toBe(true);\n+    expect(+port === +process.env.PORT).toBe(true);",
        "created_at": "2021-10-04T14:05:35Z",
        "body": "totally"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "cakekindel",
        "html_url": "https://github.com/cakekindel"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/162",
      "updated_at": "2021-09-30T22:00:00Z",
      "title": "diff between deploy_staging and qa",
      "state": "closed",
      "number": 162,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "7ae2c9137855508ee668c7522605ca8b9f62bbb0",
        "ref": "deploy_staging"
      },
      "created_at": "2021-09-30T18:32:53Z",
      "closed_at": "2021-09-30T22:00:00Z",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "1eba15cb6b7b3b3cbc761ea88b3ecb6f1a6cd17d",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "cakekindel",
        "html_url": "https://github.com/cakekindel"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/161",
      "updated_at": "2021-09-30T18:58:27Z",
      "title": "deploy staging",
      "state": "closed",
      "number": 161,
      "merged_at": "2021-09-30T18:58:27Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "7ae2c9137855508ee668c7522605ca8b9f62bbb0",
        "ref": "deploy_staging"
      },
      "created_at": "2021-09-29T18:56:42Z",
      "closed_at": "2021-09-30T18:58:27Z",
      "body": "`git merge qa -X theirs`",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "44a152657c34f50f81b0e289a33443f5481ad99c",
        "ref": "staging"
      }
    },
    "comments": [
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 767355169,
        "path": "test/e2e/routes.e2e-spec.ts",
        "id": 719023863,
        "diff_hunk": "@@ -12,6 +12,15 @@ import { Spread } from '@/route-planner/types';\n \n import { initTestingModule, TestDBManager, TestingContext } from '@/test/utils';\n import factories from '@/test/factories';\n+import {\n+  PipeCoatingType,\n+  PipeJointLength,\n+  PipeJointType,\n+  PipeMaterialGrade,\n+  PipeMaterialType,\n+} from '@/src/shared/enums';\n+\n+type Callback = (res: request.Response) => void;",
        "created_at": "2021-09-30T03:08:56Z",
        "body": "Duplicate identifier 'Callback'"
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 767355169,
        "path": "test/app.module.spec.ts",
        "id": 719025162,
        "diff_hunk": "@@ -21,7 +21,8 @@ describe('Environment variables', () => {\n   });\n \n   it('should return loaded env variables', () => {\n-    expect(configService.get('port')).toEqual(4000);\n+    const port: string = configService.get('port');\n+    expect(port === '4000').toBe(true);",
        "created_at": "2021-09-30T03:13:07Z",
        "body": "`port` is type number. The original `expect(configService.get('port')).toEqual(4000);` should be kept."
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 768200803,
        "path": "test/app.module.spec.ts",
        "in_reply_to_id": 719025162,
        "id": 719656448,
        "diff_hunk": "@@ -21,7 +21,8 @@ describe('Environment variables', () => {\n   });\n \n   it('should return loaded env variables', () => {\n-    expect(configService.get('port')).toEqual(4000);\n+    const port: string = configService.get('port');\n+    expect(port === '4000').toBe(true);",
        "created_at": "2021-09-30T18:25:54Z",
        "body": "this is the state of QA right now, how did a failing test get merged?"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "cakekindel",
        "html_url": "https://github.com/cakekindel"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/160",
      "updated_at": "2021-09-29T18:59:23Z",
      "title": "deploy staging",
      "state": "closed",
      "number": 160,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "1eba15cb6b7b3b3cbc761ea88b3ecb6f1a6cd17d",
        "ref": "qa"
      },
      "created_at": "2021-09-29T18:54:24Z",
      "closed_at": "2021-09-29T18:59:23Z",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "44a152657c34f50f81b0e289a33443f5481ad99c",
        "ref": "staging"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "cakekindel",
        "html_url": "https://github.com/cakekindel"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/159",
      "updated_at": "2021-09-29T18:03:14Z",
      "title": "resolve qa -> staging merge conflicts",
      "state": "closed",
      "number": 159,
      "merged_at": "2021-09-29T18:03:13Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "1bb28f0173d4d3a16b8a909f07615df4f13bba1a",
        "ref": "qa-staging-parity"
      },
      "created_at": "2021-09-28T16:47:49Z",
      "closed_at": "2021-09-29T18:03:13Z",
      "body": "in order to resolve merge conflicts between `qa` and `staging`, first we need to bring the tip of qa to match the tip of staging - this comes with no code changes and only affects the commit history\r\n```\r\n> git merge staging --strategy ours\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "3df933481126cec849e48dd24dcb9b95d3e8a865",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "cakekindel",
        "html_url": "https://github.com/cakekindel"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/158",
      "updated_at": "2021-10-05T16:29:50Z",
      "title": "fix: add surrogarto + docs",
      "state": "closed",
      "number": 158,
      "merged_at": "2021-10-05T16:29:50Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "f97cb115384222093cd263c4a24f072ffaab4f61",
        "ref": "add_surrogarto"
      },
      "created_at": "2021-09-28T16:47:19Z",
      "closed_at": "2021-10-05T16:29:50Z",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "3df933481126cec849e48dd24dcb9b95d3e8a865",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "cakekindel",
        "html_url": "https://github.com/cakekindel"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/157",
      "updated_at": "2021-09-29T17:06:06Z",
      "title": "deploy staging",
      "state": "closed",
      "number": 157,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "3df933481126cec849e48dd24dcb9b95d3e8a865",
        "ref": "qa"
      },
      "created_at": "2021-09-28T16:08:05Z",
      "closed_at": "2021-09-29T17:06:06Z",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "44a152657c34f50f81b0e289a33443f5481ad99c",
        "ref": "staging"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "rledford",
        "html_url": "https://github.com/rledford"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/156",
      "updated_at": "2021-09-27T20:54:12Z",
      "title": "Bug Fix: Form field type error for non-string option values",
      "state": "closed",
      "number": 156,
      "merged_at": "2021-09-27T20:54:11Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "87a790fa173ff9f0af85cc1747c01613be5cbe40",
        "ref": "bug-fix-form-field-type-error"
      },
      "created_at": "2021-09-27T20:52:01Z",
      "closed_at": "2021-09-27T20:54:11Z",
      "body": "Added number and null to form field entry option",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "3c2e14ee34a389f505d738d1ca94e89a0a8221ef",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/155",
      "updated_at": "2021-09-27T20:39:21Z",
      "title": "[IMERC-127] Add the ability to soft-delete/restore routes and laterals",
      "state": "closed",
      "number": 155,
      "merged_at": "2021-09-27T20:39:20Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "6a1d591198683f71fd390febee33c139aed2d405",
        "ref": "feature/IMERC-127-route-soft-delete"
      },
      "created_at": "2021-09-27T19:30:46Z",
      "closed_at": "2021-09-27T20:39:20Z",
      "body": "[IMERC-127](https://imercata.atlassian.net/browse/IMERC-127)\r\n\r\n- Converts deletion to soft-delete (adds a deletedAt column which typeorm respects when executing queries)\r\n- Adds a `PATCH /:id/restore` for undeleting a route/lateral",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e23db069bbd1545c880716f693ca09465db4991e",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 764679764,
        "path": "src/route-planner/decorators/scoped-lateral.decorator.ts",
        "id": 716991875,
        "diff_hunk": "@@ -58,7 +58,7 @@ export class ParseLateralIdPipe implements PipeTransform {\n       throw new NotFoundException(`Route not found: ${routeId}`);\n     }\n \n-    const lateral = route.children.find((lat) => lat.id == lateralId);\n+    const lateral = route.children.find((lat) => lat.id === Number(lateralId));",
        "created_at": "2021-09-27T19:44:38Z",
        "body": "I see what you did. I used == but with your approach, it coerces a specific side without letting Node do the decision making."
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 764679764,
        "path": "src/route-planner/services/laterals.service.ts",
        "id": 717012629,
        "diff_hunk": "@@ -145,10 +144,43 @@ export class LateralsService {\n   ): Promise<Route> {\n     const lateral = await this.findOne(project, route, user, id);\n     if (lateral) {\n-      await this.routesRepository.delete(id);\n+      await this.routesRepository.softDelete(id);\n       return lateral;\n     }\n \n     return null;\n   }\n+\n+  public async restore(\n+    project: Project,\n+    route: Route,\n+    user: User,\n+    id: number,\n+  ): Promise<Route> {\n+    const query = this.findOneQuery(project, route, user, id);\n+    const lateral = await query.withDeleted().getOne();\n+\n+    if (lateral) {\n+      await this.routesRepository.restore(id);\n+      return this.findOne(project, route, user, id);\n+    }\n+\n+    return null;\n+  }\n+\n+  private findOneQuery(\n+    project: Project,\n+    route: Route,\n+    user: User,\n+    id: number,\n+  ): SelectQueryBuilder<Route> {\n+    return this.routesRepository\n+      .createQueryBuilder('route')\n+      .innerJoin('route.project', 'project')\n+      .innerJoin('project.users', 'user')\n+      .where('project.id = :projectId', { projectId: project.id })\n+      .andWhere('user.id = :userId', { userId: user.id })\n+      .andWhere('route.parent_id = :parentId', { parentId: route.id })",
        "created_at": "2021-09-27T20:15:04Z",
        "body": "Should there be an _and_ clause where _deletedAt_ is equal to _null_ so that we don't return soft-deleted children or is FE going to be handling which routes/children to render based on whether they're considered deleted or not?"
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 764679764,
        "path": "src/route-planner/services/routes.service.ts",
        "id": 717012871,
        "diff_hunk": "@@ -140,10 +132,43 @@ export class RoutesService {\n   ): Promise<Route> {\n     const route = await this.findOne(project, user, id);\n     if (route) {\n-      await this.routesRepository.delete(id);\n+      await this.routesRepository.softDelete(id);\n       return route;\n     }\n \n     return null;\n   }\n+\n+  public async restore(\n+    project: Project,\n+    user: User,\n+    id: number,\n+  ): Promise<Route> {\n+    const query = this.findOneQuery(project, user, id);\n+    const route = await query.withDeleted().getOne();\n+\n+    if (route) {\n+      await this.routesRepository.restore(id);\n+      return this.findOne(project, user, id);\n+    }\n+\n+    return null;\n+  }\n+\n+  private findOneQuery(\n+    project: Project,\n+    user: User,\n+    id: number,\n+  ): SelectQueryBuilder<Route> {\n+    return this.routesRepository\n+      .createQueryBuilder('route')\n+      .innerJoin('route.project', 'project')\n+      .innerJoin('project.users', 'user')\n+      .leftJoinAndSelect('route.children', 'child', 'child.parent_id = :id', {",
        "created_at": "2021-09-27T20:15:27Z",
        "body": "same as question as above regarding soft-deleted routes."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 764722715,
        "path": "src/route-planner/services/laterals.service.ts",
        "in_reply_to_id": 717012629,
        "id": 717023222,
        "diff_hunk": "@@ -145,10 +144,43 @@ export class LateralsService {\n   ): Promise<Route> {\n     const lateral = await this.findOne(project, route, user, id);\n     if (lateral) {\n-      await this.routesRepository.delete(id);\n+      await this.routesRepository.softDelete(id);\n       return lateral;\n     }\n \n     return null;\n   }\n+\n+  public async restore(\n+    project: Project,\n+    route: Route,\n+    user: User,\n+    id: number,\n+  ): Promise<Route> {\n+    const query = this.findOneQuery(project, route, user, id);\n+    const lateral = await query.withDeleted().getOne();\n+\n+    if (lateral) {\n+      await this.routesRepository.restore(id);\n+      return this.findOne(project, route, user, id);\n+    }\n+\n+    return null;\n+  }\n+\n+  private findOneQuery(\n+    project: Project,\n+    route: Route,\n+    user: User,\n+    id: number,\n+  ): SelectQueryBuilder<Route> {\n+    return this.routesRepository\n+      .createQueryBuilder('route')\n+      .innerJoin('route.project', 'project')\n+      .innerJoin('project.users', 'user')\n+      .where('project.id = :projectId', { projectId: project.id })\n+      .andWhere('user.id = :userId', { userId: user.id })\n+      .andWhere('route.parent_id = :parentId', { parentId: route.id })",
        "created_at": "2021-09-27T20:31:01Z",
        "body": "TypeORM automatically performs the logic you've described if you have a `@DeleteDateColumn` defined on your model."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 764723375,
        "path": "src/route-planner/decorators/scoped-lateral.decorator.ts",
        "in_reply_to_id": 716991875,
        "id": 717023731,
        "diff_hunk": "@@ -58,7 +58,7 @@ export class ParseLateralIdPipe implements PipeTransform {\n       throw new NotFoundException(`Route not found: ${routeId}`);\n     }\n \n-    const lateral = route.children.find((lat) => lat.id == lateralId);\n+    const lateral = route.children.find((lat) => lat.id === Number(lateralId));",
        "created_at": "2021-09-27T20:31:49Z",
        "body": "For the record, I only made my change to appease the linter."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "rledford",
        "html_url": "https://github.com/rledford"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/154",
      "updated_at": "2021-09-27T20:05:39Z",
      "title": "[No Ticket] Feature: Added numerical form fields",
      "state": "closed",
      "number": 154,
      "merged_at": "2021-09-27T20:05:38Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c9f839a2665df3d32c486b5fff17519694b1be21",
        "ref": "feature-add-numerical-form-field-data"
      },
      "created_at": "2021-09-27T18:29:23Z",
      "closed_at": "2021-09-27T20:05:38Z",
      "body": "Adds numLines and pipeDiameter to route_specification category.\r\n\r\n### E2E Test Results\r\n\r\n PASS  test/e2e/app.e2e-spec.ts (7.027 s)\r\n **PASS  test/e2e/form-fields.e2e-spec.ts (7.133 s)**\r\n PASS  test/e2e/features.e2e-spec.ts (7.882 s)\r\n PASS  test/e2e/map-layers.e2e-spec.ts (8.325 s)\r\n PASS  test/e2e/authentication.e2e-spec.ts (8.354 s)\r\n PASS  test/e2e/s3-files.e2e-spec.ts (12.704 s)\r\n PASS  test/e2e/projects.e2e-spec.ts (13.256 s)\r\n PASS  test/e2e/companies.e2e-spec.ts (13.335 s)\r\n PASS  test/e2e/programs.e2e-spec.ts (13.874 s)\r\n PASS  test/e2e/admin-roles.e2e-spec.ts (14.275 s)\r\n PASS  test/e2e/users.e2e-spec.ts (15.312 s)\r\n PASS  test/e2e/lateral-optimization-requests.e2e-spec.ts (16.385 s)\r\n PASS  test/e2e/routes.e2e-spec.ts (17.383 s)\r\n PASS  test/e2e/laterals.e2e-spec.ts (19.59 s)\r\n PASS  test/e2e/optimization-requests.e2e-spec.ts (19.823 s)\r\n\r\nTest Suites: 15 passed, 15 total\r\nTests:       265 passed, 265 total\r\nSnapshots:   0 total\r\nTime:        20.498 s",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e23db069bbd1545c880716f693ca09465db4991e",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "msallent",
          "html_url": "https://github.com/msallent"
        },
        "pull_request_review_id": 764636634,
        "path": "seeds/form-field-data.json",
        "id": 716959152,
        "diff_hunk": "@@ -114,6 +114,41 @@\n             \"label\": \"80' QRL\"\n           }\n         ]\n+      },\n+      {\n+        \"field\": \"numLines\",\n+        \"options\": [\n+          { \"value\": null, \"label\": \"\" },\n+          { \"value\": 1, \"label\": \"1\" },\n+          { \"value\": 2, \"label\": \"2\" },\n+          { \"value\": 3, \"label\": \"3\" },\n+          { \"value\": 4, \"label\": \"4\" },\n+          { \"value\": 5, \"label\": \"5\" },\n+          { \"value\": 6, \"label\": \"6\" },\n+          { \"value\": 7, \"label\": \"7\" },\n+          { \"value\": 8, \"label\": \"8\" },\n+          { \"value\": 9, \"label\": \"9\" }\n+        ]",
        "created_at": "2021-09-27T18:54:13Z",
        "body": "There's an option missing: `{ value: 10, label: '10' }`"
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 764646483,
        "path": "seeds/form-field-data.json",
        "in_reply_to_id": 716959152,
        "id": 716966701,
        "diff_hunk": "@@ -114,6 +114,41 @@\n             \"label\": \"80' QRL\"\n           }\n         ]\n+      },\n+      {\n+        \"field\": \"numLines\",\n+        \"options\": [\n+          { \"value\": null, \"label\": \"\" },\n+          { \"value\": 1, \"label\": \"1\" },\n+          { \"value\": 2, \"label\": \"2\" },\n+          { \"value\": 3, \"label\": \"3\" },\n+          { \"value\": 4, \"label\": \"4\" },\n+          { \"value\": 5, \"label\": \"5\" },\n+          { \"value\": 6, \"label\": \"6\" },\n+          { \"value\": 7, \"label\": \"7\" },\n+          { \"value\": 8, \"label\": \"8\" },\n+          { \"value\": 9, \"label\": \"9\" }\n+        ]",
        "created_at": "2021-09-27T19:05:24Z",
        "body": "fixed"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/153",
      "updated_at": "2021-10-21T13:21:35Z",
      "title": "[Snyk] Security upgrade @nestjs/common from 7.6.18 to 8.0.7",
      "state": "closed",
      "number": 153,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "41510a02618a3b1158a73d8dfa37db32dbafa504",
        "ref": "snyk-fix-8d636d5dc001e9548bcd3717870a0301"
      },
      "created_at": "2021-09-25T07:27:46Z",
      "closed_at": "2021-10-01T12:50:51Z",
      "body": "<h3>Snyk has created this PR to fix one or more vulnerable packages in the `npm` dependencies of this project.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=@nestjs/common&from_version=7.6.18&to_version=8.0.7&pr_id=c3048f5e-37b6-40d2-b86a-60dc87d7ab0a&visibility=true&has_feature_flag=false)\n\n:sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr/settings/integration).\n\n\n\n#### Changes included in this PR\n\n- Changes to the following files to upgrade the vulnerable dependencies to a fixed version:\n    - package.json\n    - package-lock.json\n\n\n\n#### Vulnerabilities that will be fixed\n##### With an upgrade:\nSeverity                   | Priority Score (*)                   | Issue                   | Breaking Change                   | Exploit Maturity\n:-------------------------:|-------------------------|:-------------------------|:-------------------------|:-------------------------\n![high severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/h.png \"high severity\")  |  **696/1000**  <br/> **Why?** Proof of Concept exploit, Has a fix available, CVSS 7.5  | Regular Expression Denial of Service (ReDoS) <br/>[SNYK-JS-AXIOS-1579269](https://snyk.io/vuln/SNYK-JS-AXIOS-1579269) |  Yes  | Proof of Concept \n\n(*) Note that the real score may have changed since the PR was raised.\n\n\n\n\n\n\n\n\n\n\n\nCheck the changes in this PR to ensure they won't cause issues with your project.\n\n\n\n------------\n\n\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJjMzA0OGY1ZS0zN2I2LTQwZDItYjg2YS02MGRjODdkN2FiMGEiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImMzMDQ4ZjVlLTM3YjYtNDBkMi1iODZhLTYwZGM4N2Q3YWIwYSJ9fQ==\" width=\"0\" height=\"0\"/>\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr/settings/integration)\n\nüõ† [Adjust project settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr/settings)\n\nüìö [Read more about Snyk's upgrade and patch logic](https://support.snyk.io/hc/en-us/articles/360003891078-Snyk-patches-to-fix-vulnerabilities)\n\n[//]: # (snyk:metadata:{\"prId\":\"c3048f5e-37b6-40d2-b86a-60dc87d7ab0a\",\"prPublicId\":\"c3048f5e-37b6-40d2-b86a-60dc87d7ab0a\",\"dependencies\":[{\"name\":\"@nestjs/common\",\"from\":\"7.6.18\",\"to\":\"8.0.7\"}],\"packageManager\":\"npm\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=referral&page=fix-pr\",\"type\":\"auto\",\"patch\":[],\"vulns\":[\"SNYK-JS-AXIOS-1579269\"],\"upgrade\":[\"SNYK-JS-AXIOS-1579269\"],\"isBreakingChange\":true,\"env\":\"prod\",\"prType\":\"fix\",\"templateVariants\":[\"updated-fix-title\",\"priorityScore\",\"merge-advice-badge-shown\"],\"priorityScoreList\":[696]})\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "edbabd7dfc7d92d9a4db085b4f7d2d051a3fbbad",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "rledford",
        "html_url": "https://github.com/rledford"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/152",
      "updated_at": "2021-09-27T17:18:02Z",
      "title": "[IMERC-100] Dynamic new project forms",
      "state": "closed",
      "number": 152,
      "merged_at": "2021-09-27T17:18:01Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "d0721bc89bf67210e9897230689833f715bf496a",
        "ref": "IMERC-100-dynamic-new-project-forms"
      },
      "created_at": "2021-09-25T04:17:00Z",
      "closed_at": "2021-09-27T17:18:01Z",
      "body": "### Changes\r\n- Adds API endpoints to GET categorized form field options\r\n\r\n### Usage\r\n- Use `/form_fields` to get a list of categorized form fields\r\n- Use `/form_fields/:category` to retrieve the form fields for a specific category.\r\n\r\n### Categories\r\n| Category | Description |\r\n| --- | --- |\r\n| `route_specification` | Includes pipeline specification options to use for projects and routes. |\r\n\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "edbabd7dfc7d92d9a4db085b4f7d2d051a3fbbad",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 764521131,
        "path": "src/core/dto/index.ts",
        "id": 716872150,
        "diff_hunk": "@@ -2,3 +2,6 @@ export * from './carto-layer-data.dto';\n export * from './map-layer.dto';\n export * from './map-layer-filters.dto';\n export * from './map-layer-query.dto';\n+export * from './form-field-entry-option.dto';\n+export * from './form-field-entry.dto';\n+export * from './form-field-category.dto';",
        "created_at": "2021-09-27T16:49:32Z",
        "body": "Huge nit-pick, but its really nice when these are in alphabetical order.  Makes it much easier to tell if/when something is missing."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 764521452,
        "path": "src/core/interfaces/index.ts",
        "id": 716872368,
        "diff_hunk": "@@ -2,3 +2,6 @@ export * from './carto-layer-data';\n export * from './map-layer';\n export * from './map-layer-filters';\n export * from './map-layer-query';\n+export * from './form-field-entry-option';\n+export * from './form-field-entry';\n+export * from './form-field-category';",
        "created_at": "2021-09-27T16:49:51Z",
        "body": "Same as above"
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 764531735,
        "path": "src/core/dto/index.ts",
        "in_reply_to_id": 716872150,
        "id": 716880234,
        "diff_hunk": "@@ -2,3 +2,6 @@ export * from './carto-layer-data.dto';\n export * from './map-layer.dto';\n export * from './map-layer-filters.dto';\n export * from './map-layer-query.dto';\n+export * from './form-field-entry-option.dto';\n+export * from './form-field-entry.dto';\n+export * from './form-field-category.dto';",
        "created_at": "2021-09-27T17:00:02Z",
        "body": "fixed"
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 764531846,
        "path": "src/core/interfaces/index.ts",
        "in_reply_to_id": 716872368,
        "id": 716880321,
        "diff_hunk": "@@ -2,3 +2,6 @@ export * from './carto-layer-data';\n export * from './map-layer';\n export * from './map-layer-filters';\n export * from './map-layer-query';\n+export * from './form-field-entry-option';\n+export * from './form-field-entry';\n+export * from './form-field-category';",
        "created_at": "2021-09-27T17:00:09Z",
        "body": "fixed"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "rledford",
        "html_url": "https://github.com/rledford"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/151",
      "updated_at": "2021-09-24T18:54:41Z",
      "title": "QA Hotfix - Project tests failing",
      "state": "closed",
      "number": 151,
      "merged_at": "2021-09-24T18:54:41Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "dbf7e48991e1591f4b19b341637f01ce91673a56",
        "ref": "qa-hotfix-e2e-project-tests"
      },
      "created_at": "2021-09-24T18:19:43Z",
      "closed_at": "2021-09-24T18:54:41Z",
      "body": "Adds routeSpecification to project factory builder, and add appropriate response validator in e2e spec file.\r\n\r\n### Requirements\r\n- [Surrogarto](https://github.com/iMercatus/surrogarto)\r\n  - See [imercata-backend README](https://github.com/iMercatus/imercata-backend/blob/qa/README.md#route-optimization-tests) to get _.env.test_ file set up with appropriate environment vars to use Surrogarto.\r\n- Ensure test database has latest migrations applied using `npm run test:migrate`\r\n\r\n### E2E Test Output\r\n\r\n PASS  test/e2e/optimization-requests.e2e-spec.ts (12.101 s)\r\n PASS  test/e2e/laterals.e2e-spec.ts (8.768 s)\r\n PASS  test/e2e/routes.e2e-spec.ts (6.465 s)\r\n PASS  test/e2e/lateral-optimization-requests.e2e-spec.ts (5.072 s)\r\n PASS  test/e2e/users.e2e-spec.ts\r\n PASS  test/e2e/admin-roles.e2e-spec.ts\r\n PASS  test/e2e/programs.e2e-spec.ts\r\n PASS  test/e2e/projects.e2e-spec.ts (7.441 s)\r\n PASS  test/e2e/companies.e2e-spec.ts\r\n PASS  test/e2e/s3-files.e2e-spec.ts\r\n PASS  test/e2e/authentication.e2e-spec.ts\r\n PASS  test/e2e/map-layers.e2e-spec.ts\r\n PASS  test/e2e/features.e2e-spec.ts\r\n PASS  test/e2e/app.e2e-spec.ts\r\n\r\nTest Suites: 14 passed, 14 total\r\nTests:       257 passed, 257 total\r\nSnapshots:   0 total\r\nTime:        64.742 s",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "10143daa7481173b5de53e77743c196616a69f02",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/150",
      "updated_at": "2021-10-21T13:21:36Z",
      "title": "[Snyk] Upgrade typeorm from 0.2.36 to 0.2.37",
      "state": "closed",
      "number": 150,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9a64954a431b16e1b4b17eb06c749c27f5cf5e1e",
        "ref": "snyk-upgrade-eec69733c07ab7b164e1891ea0f64b0c"
      },
      "created_at": "2021-09-24T08:50:25Z",
      "closed_at": "2021-10-01T12:57:48Z",
      "body": "<h3>Snyk has created this PR to upgrade typeorm from 0.2.36 to 0.2.37.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=typeorm&from_version=0.2.36&to_version=0.2.37&pr_id=aa96c6ca-890e-4428-b3dd-d700b2ce3a36&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **25 versions** ahead of your current version.\n- The recommended version was released **a month ago**, on 2021-08-13.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>typeorm</b></summary>\n    <ul>\n      <li>\n        <b>0.2.37</b> - <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases/tag/0.2.37\">2021-08-13</a></br><h3>Bug Fixes</h3>\n<ul>\n<li>allow periods in parameter identifiers (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8022\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8022/hovercard\">#8022</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/420193892ffe857c532130c0c7b18dcc4c8d38e2\">4201938</a>)</li>\n<li>ConnectionManager <code>connections</code> property should include list of <code>Connection</code>s (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8004\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8004/hovercard\">#8004</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/2344db60c4314da31885f5686e94bb6dcb203a96\">2344db6</a>)</li>\n<li>entity value for date columns that are related (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8027\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8027/hovercard\">#8027</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/5a3767f58f6ef355b01cf6e92342401a051a369c\">5a3767f</a>)</li>\n<li>handle brackets when only one condition is passed (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8048\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8048/hovercard\">#8048</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/ab39066f182d357fcc999cd976510c0e2a61d6de\">ab39066</a>)</li>\n<li>handle enums with multiple apostrophes in MySQL (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8013\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8013/hovercard\">#8013</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/37c40a610caecfc3b27b48a87b0e98d715f23395\">37c40a6</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8011\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/8011/hovercard\">#8011</a></li>\n<li>include all drivers in driverfactory error message (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8061\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8061/hovercard\">#8061</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/fbd1ef74e84b59ef0b8d99e311f0aced902190e6\">fbd1ef7</a>)</li>\n<li>resolve not returning soft deleted relations with withDeleted find option (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8017\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8017/hovercard\">#8017</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/65cbcc79bceac4cf8d15dec8c558dcbc9a037220\">65cbcc7</a>)</li>\n<li>SAP HANA inserts used incorrect value for returning query (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8072\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8072/hovercard\">#8072</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/36398dbe467274a9ac08a013ed4daaf307ee2de2\">36398db</a>)</li>\n<li>some drivers set the wrong database name when defined from url (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8058\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8058/hovercard\">#8058</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/a3a32849c04a83adbf775fcf07843a934551dbfb\">a3a3284</a>)</li>\n<li>throw error when not connected in drivers (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7995\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7995/hovercard\">#7995</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/cd71f62cb8125d1bbd92b341aa2eea1de0ac3537\">cd71f62</a>)</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>add relations option to tree queries (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7981\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7981/hovercard\">#7981</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/ca26297484542498b8f622f540ca354360d53ed0\">ca26297</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7974\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7974/hovercard\">#7974</a> <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/4564\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/4564/hovercard\">#4564</a></li>\n<li>add serviceName option for oracle connections (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8021\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8021/hovercard\">#8021</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/37bd0124dc81c957b2a036436594ae8c4606eb6c\">37bd012</a>)</li>\n<li>add support to string array on dropColumns (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7654\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7654/hovercard\">#7654</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/91d5b2fc374c2f7b1545d40ee76577272de21436\">91d5b2f</a>)</li>\n<li>support Oracle Implicit Results (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/8050\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/8050/hovercard\">#8050</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/fe78bee3725efef47d5be6f924b9caf13f3299a7\">fe78bee</a>)</li>\n</ul>\n      </li>\n      <li>\n        <b>0.2.37-dev.fe78bee</b> - 2021-08-08\n      </li>\n      <li>\n        <b>0.2.37-dev.fbd1ef7</b> - 2021-08-11\n      </li>\n      <li>\n        <b>0.2.37-dev.fbbac93</b> - 2021-08-03\n      </li>\n      <li>\n        <b>0.2.37-dev.f7eb46d</b> - 2021-07-31\n      </li>\n      <li>\n        <b>0.2.37-dev.f0e40f6</b> - 2021-08-06\n      </li>\n      <li>\n        <b>0.2.37-dev.cd71f62</b> - 2021-07-31\n      </li>\n      <li>\n        <b>0.2.37-dev.ca26297</b> - 2021-08-04\n      </li>\n      <li>\n        <b>0.2.37-dev.ba366f2</b> - 2021-08-08\n      </li>\n      <li>\n        <b>0.2.37-dev.ab39066</b> - 2021-08-06\n      </li>\n      <li>\n        <b>0.2.37-dev.a5e4ce7</b> - 2021-08-05\n      </li>\n      <li>\n        <b>0.2.37-dev.a3a3284</b> - 2021-08-10\n      </li>\n      <li>\n        <b>0.2.37-dev.91d5b2f</b> - 2021-07-31\n      </li>\n      <li>\n        <b>0.2.37-dev.80cdf8f</b> - 2021-08-11\n      </li>\n      <li>\n        <b>0.2.37-dev.768b4fe</b> - 2021-08-05\n      </li>\n      <li>\n        <b>0.2.37-dev.69fabaf</b> - 2021-07-31\n      </li>\n      <li>\n        <b>0.2.37-dev.65cbcc7</b> - 2021-08-10\n      </li>\n      <li>\n        <b>0.2.37-dev.5a3767f</b> - 2021-08-08\n      </li>\n      <li>\n        <b>0.2.37-dev.5714e8d</b> - 2021-08-11\n      </li>\n      <li>\n        <b>0.2.37-dev.37c40a6</b> - 2021-08-11\n      </li>\n      <li>\n        <b>0.2.37-dev.37bd012</b> - 2021-08-04\n      </li>\n      <li>\n        <b>0.2.37-dev.36398db</b> - 2021-08-12\n      </li>\n      <li>\n        <b>0.2.37-dev.2344db6</b> - 2021-08-04\n      </li>\n      <li>\n        <b>0.2.37-dev.01a038c</b> - 2021-08-13\n      </li>\n      <li>\n        <b>0.2.37-dev.4201938</b> - 2021-08-05\n      </li>\n      <li>\n        <b>0.2.36</b> - <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases/tag/0.2.36\">2021-07-31</a></br><h3>Bug Fixes</h3>\n<ul>\n<li>add deprecated <code>WhereExpression</code> alias for <code>WhereExpressionBuilder</code> (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7980\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7980/hovercard\">#7980</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/76e7ed943779b940212c4e453d97028b5ffed7d0\">76e7ed9</a>)</li>\n<li>always generate migrations with template string literals (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7971\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7971/hovercard\">#7971</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/e9c2af610a1c9a632605b71d67b97e048be2e29e\">e9c2af6</a>)</li>\n<li>use js rather than ts in all <code>browser</code> package manifests (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7982\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7982/hovercard\">#7982</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/0d90bcdc8c77f2080aa200fe9f4f962b7b01c9ee\">0d90bcd</a>)</li>\n<li>use nvarchar/ntext during transit for SQLServer queries (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7933\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7933/hovercard\">#7933</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/62d79762dbfe58219a5673ba4d404fe9f2e40436\">62d7976</a>)</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>add postgres connection option <code>applicationName</code> (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7989\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7989/hovercard\">#7989</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/d365acca68069d0bd9acea5b45a73d7f4c1f4d8f\">d365acc</a>)</li>\n</ul>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases\">typeorm GitHub release notes</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJhYTk2YzZjYS04OTBlLTQ0MjgtYjNkZC1kNzAwYjJjZTNhMzYiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImFhOTZjNmNhLTg5MGUtNDQyOC1iM2RkLWQ3MDBiMmNlM2EzNiJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;typeorm&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"aa96c6ca-890e-4428-b3dd-d700b2ce3a36\",\"prPublicId\":\"aa96c6ca-890e-4428-b3dd-d700b2ce3a36\",\"dependencies\":[{\"name\":\"typeorm\",\"from\":\"0.2.36\",\"to\":\"0.2.37\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=referral&page=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":25,\"publishedDate\":\"2021-08-13T06:42:07.871Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "10143daa7481173b5de53e77743c196616a69f02",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/149",
      "updated_at": "2021-09-23T19:09:22Z",
      "title": "hotfix/Update map layer seed file",
      "state": "closed",
      "number": 149,
      "merged_at": "2021-09-23T19:09:22Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "41477d139da82b73d6790420ca0702802b96c154",
        "ref": "hotfix/map-layers"
      },
      "created_at": "2021-09-23T19:06:46Z",
      "closed_at": "2021-09-23T19:09:22Z",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "a24576ba8aeb6946c6ffbda2ff56c46d87b55a77",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "rledford",
        "html_url": "https://github.com/rledford"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/148",
      "updated_at": "2021-09-23T19:33:05Z",
      "title": "QA Hotfix null Route Specifications",
      "state": "closed",
      "number": 148,
      "merged_at": "2021-09-23T19:33:04Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c785510de68939537df74b7252950703069c66eb",
        "ref": "qa-hotfix-null-route-specifications"
      },
      "created_at": "2021-09-23T16:04:11Z",
      "closed_at": "2021-09-23T19:33:04Z",
      "body": "### Reason for Hotfix\r\n\r\nIMERC-18 was implemented to support having additional details on projects and routes that would be used for cost calculations. These values were to be selected by the user and required in order to create a project.\r\n\r\nScope and FE implementations have changed to allow users to create a project with or without specifying these values.\r\n\r\nThe FE breaks when the `routeSpecification` is null because it expects `routeSpecification` to be an object. The object can contain fields that have null values but the `routeSpecification` property itself cannot be null.\r\n\r\n### Changes\r\n\r\n- Added migration to populate the `route_specification` column in projects where `route_specification` is null. The column is populated with the following:\r\n```js\r\n{\r\n      pipeMaterialType: null,\r\n      pipeMaterialGrade: null,\r\n      pipeCoatingType: null,\r\n      pipeDiameter: null,\r\n      pipeJointType: null,\r\n      pipeJointLength: null,\r\n      numLines: null,\r\n}\r\n```\r\n- The `routeSpecification` on a project can be update as long as all fields are provided in and they contain either `null` or valid values for their expected type.\r\n\r\n### Discussion Topics\r\n- It's important to note that each route has a `specification` column that uses the same schema as the `routeSpecification` for projects. When the route is created without a `specification` set, the value is null. We could run into the same issue with the FE expecting `specification` to never be null. Just something to note for later on when editing specifications on routes is going to be implemented.\r\n\r\nThe overall solution for supporting this on FE and BE seems clunky in my opinion. The user is no longer expected to fill out route specifications and can also unset them if they wish (why?). Also, cost calculations are to be shown early in the route building process in the UI, having unset fields for some or all of the route specs will prevent calculating costs.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "a24576ba8aeb6946c6ffbda2ff56c46d87b55a77",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 762311590,
        "path": "src/migrations/1632362405013-PopulateNullRouteSpecOnProjects.ts",
        "id": 715010284,
        "diff_hunk": "@@ -0,0 +1,23 @@\n+import { MigrationInterface, QueryRunner } from 'typeorm';\n+\n+export class PopulateNullRouteSpecOnProjects1632362405013\n+  implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    const defaultRouteSpec = {\n+      pipeMaterialType: null,\n+      pipeMaterialGrade: null,\n+      pipeCoatingType: null,\n+      pipeDiameter: null,\n+      pipeJointType: null,\n+      pipeJointLength: null,\n+      numLines: null,\n+    };\n+    await queryRunner.query(`\n+        update projects\n+        set route_specification = '${JSON.stringify(defaultRouteSpec)}'\n+        where route_specification is null;",
        "created_at": "2021-09-23T17:29:59Z",
        "body": "could the column be non-nullable with this as a default? something like\r\n```\r\nalter table add column route_specification  jsonb not null default(stuff)\r\n```"
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 762318938,
        "path": "src/migrations/1632362405013-PopulateNullRouteSpecOnProjects.ts",
        "in_reply_to_id": 715010284,
        "id": 715015972,
        "diff_hunk": "@@ -0,0 +1,23 @@\n+import { MigrationInterface, QueryRunner } from 'typeorm';\n+\n+export class PopulateNullRouteSpecOnProjects1632362405013\n+  implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    const defaultRouteSpec = {\n+      pipeMaterialType: null,\n+      pipeMaterialGrade: null,\n+      pipeCoatingType: null,\n+      pipeDiameter: null,\n+      pipeJointType: null,\n+      pipeJointLength: null,\n+      numLines: null,\n+    };\n+    await queryRunner.query(`\n+        update projects\n+        set route_specification = '${JSON.stringify(defaultRouteSpec)}'\n+        where route_specification is null;",
        "created_at": "2021-09-23T17:38:00Z",
        "body": "I'll test that out. Thanks."
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 762326572,
        "path": "src/migrations/1632362405013-PopulateNullRouteSpecOnProjects.ts",
        "in_reply_to_id": 715010284,
        "id": 715021644,
        "diff_hunk": "@@ -0,0 +1,23 @@\n+import { MigrationInterface, QueryRunner } from 'typeorm';\n+\n+export class PopulateNullRouteSpecOnProjects1632362405013\n+  implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    const defaultRouteSpec = {\n+      pipeMaterialType: null,\n+      pipeMaterialGrade: null,\n+      pipeCoatingType: null,\n+      pipeDiameter: null,\n+      pipeJointType: null,\n+      pipeJointLength: null,\n+      numLines: null,\n+    };\n+    await queryRunner.query(`\n+        update projects\n+        set route_specification = '${JSON.stringify(defaultRouteSpec)}'\n+        where route_specification is null;",
        "created_at": "2021-09-23T17:46:02Z",
        "body": "This is for a new migration file. I didn't want to edit the migration file that added the `route_specification` column to projects because there have been a couple other migration files added since then. Since the column already exists I was filling it with defaults and then going to set it to not nullable."
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 762330232,
        "path": "src/migrations/1632362405013-PopulateNullRouteSpecOnProjects.ts",
        "in_reply_to_id": 715010284,
        "id": 715024509,
        "diff_hunk": "@@ -0,0 +1,23 @@\n+import { MigrationInterface, QueryRunner } from 'typeorm';\n+\n+export class PopulateNullRouteSpecOnProjects1632362405013\n+  implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    const defaultRouteSpec = {\n+      pipeMaterialType: null,\n+      pipeMaterialGrade: null,\n+      pipeCoatingType: null,\n+      pipeDiameter: null,\n+      pipeJointType: null,\n+      pipeJointLength: null,\n+      numLines: null,\n+    };\n+    await queryRunner.query(`\n+        update projects\n+        set route_specification = '${JSON.stringify(defaultRouteSpec)}'\n+        where route_specification is null;",
        "created_at": "2021-09-23T17:49:55Z",
        "body": "something like\r\n`alter table projects alter column route_specification set not null;`\r\nThis would be run after default values were set"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 762343824,
        "path": "src/migrations/1632362405013-PopulateNullRouteSpecOnProjects.ts",
        "in_reply_to_id": 715010284,
        "id": 715034339,
        "diff_hunk": "@@ -0,0 +1,23 @@\n+import { MigrationInterface, QueryRunner } from 'typeorm';\n+\n+export class PopulateNullRouteSpecOnProjects1632362405013\n+  implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    const defaultRouteSpec = {\n+      pipeMaterialType: null,\n+      pipeMaterialGrade: null,\n+      pipeCoatingType: null,\n+      pipeDiameter: null,\n+      pipeJointType: null,\n+      pipeJointLength: null,\n+      numLines: null,\n+    };\n+    await queryRunner.query(`\n+        update projects\n+        set route_specification = '${JSON.stringify(defaultRouteSpec)}'\n+        where route_specification is null;",
        "created_at": "2021-09-23T18:03:53Z",
        "body": "cool cool!"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/147",
      "updated_at": "2021-09-23T13:09:30Z",
      "title": "Add npm wrapper script to run migrations and seeds",
      "state": "closed",
      "number": 147,
      "merged_at": "2021-09-23T13:09:30Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "d1cc53ac68326c37baa08d77a022b31d86b8d0ff",
        "ref": "hotfix/IMERC-25-layer-catalog"
      },
      "created_at": "2021-09-23T13:08:16Z",
      "closed_at": "2021-09-23T13:09:30Z",
      "body": "- Adds 2 new npm scripts (`preparedb` and `test:preparedb`) which are wrappers for `migrate` and `seed`.\r\n\r\nThis is to work around an apparent limitation with ECS preventing 2 commands to be run on deploy in series (they will run in parallel, which obviously won't work for seeding, since the tables might not exist yet).",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "36297964ff3a0c387f29324884e119e07cf1ce36",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "r2g",
        "html_url": "https://github.com/r2g"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/146",
      "updated_at": "2021-10-01T13:01:50Z",
      "title": "[IMERC 42] - Backend e2e tests failing",
      "state": "closed",
      "number": 146,
      "merged_at": "2021-09-23T16:49:23Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "11a7a534cb1c8d1499601296d41e68bbc4f907d7",
        "ref": "IMERC-42-backend-e2e-tests-failing"
      },
      "created_at": "2021-09-23T03:50:55Z",
      "closed_at": "2021-09-23T16:49:23Z",
      "body": "[IMERC-42](https://imercata.atlassian.net/browse/IMERC-42) - Backend e2e tests failing\r\n\r\n## Core Fixes\r\n- Adds expected `specification` property in the create/update optimization status, andcreate/update lateral e2e tests \r\n- Disables hard-coded auth0 override in the authentication.e2e-spec\r\n- Updates `env.test.example` to use the `Surrogarto mock service`\r\n\r\n## Other fixes/enhancements\r\n- Fixes `eslint errors`\r\n- For resource constrained environments:\r\n    - increases `Jest timeout to 60 seconds`\r\n    - adds` --runInBand flag` to the test:e2e npm script to run tests serially without spawning a resource intensive worker pool\r\n- Adds the `test:e2e-concurrent npm script` to run e2e tests via a worker pool on resource rich environments\r\n- Enhances `'should return loaded env variables'` test with correct types\r\n- `patches PipeCoatingType enum` with the value BARE to fix a failing test\r\n-  Added a `route optimization tests section` explaining the role of the Surrogarto Mock API and where to find it",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "8e8b47847f345ead48d2d7a13237cec5a8bb615e",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 761994690,
        "path": "src/shared/enums/pipe-coating-type.enum.ts",
        "id": 714778582,
        "diff_hunk": "@@ -1,4 +1,5 @@\n export enum PipeCoatingType {\n+  NONE = 'NONE',\n   BARE = 'BARE',",
        "created_at": "2021-09-23T13:07:57Z",
        "body": "NONE was changed to BARE in 8e8b478 so we are no longer using NONE."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 762045513,
        "path": ".env.test.example",
        "id": 714815398,
        "diff_hunk": "@@ -32,9 +32,9 @@ MAIL_FROM=\n AUTH0_AUDIENCE=https://imercata.com\n \n # If disabled, all interaction with Auth0 in e2e tests will be mocked\n-TESTING_AUTH0_ENABLED=true\n+TESTING_AUTH0_ENABLED=false\n \n # CARTO API credentials\n-CARTO_HOST=https://imercatus-routing-api-staging.carto.solutions\n+CARTO_HOST=http://localhost:8080",
        "created_at": "2021-09-23T13:47:34Z",
        "body": "As we discussed yesterday, this change needs a corresponding change to the README explaining the differences, and something explaining where the mock CARTO service lives so future developers know how to get it up and running."
      },
      {
        "user": {
          "login": "r2g",
          "html_url": "https://github.com/r2g"
        },
        "pull_request_review_id": 762052762,
        "path": "src/shared/enums/pipe-coating-type.enum.ts",
        "in_reply_to_id": 714778582,
        "id": 714820549,
        "diff_hunk": "@@ -1,4 +1,5 @@\n export enum PipeCoatingType {\n+  NONE = 'NONE',\n   BARE = 'BARE',",
        "created_at": "2021-09-23T13:53:02Z",
        "body": "This is noted."
      },
      {
        "user": {
          "login": "r2g",
          "html_url": "https://github.com/r2g"
        },
        "pull_request_review_id": 762053459,
        "path": ".env.test.example",
        "in_reply_to_id": 714815398,
        "id": 714821090,
        "diff_hunk": "@@ -32,9 +32,9 @@ MAIL_FROM=\n AUTH0_AUDIENCE=https://imercata.com\n \n # If disabled, all interaction with Auth0 in e2e tests will be mocked\n-TESTING_AUTH0_ENABLED=true\n+TESTING_AUTH0_ENABLED=false\n \n # CARTO API credentials\n-CARTO_HOST=https://imercatus-routing-api-staging.carto.solutions\n+CARTO_HOST=http://localhost:8080",
        "created_at": "2021-09-23T13:53:32Z",
        "body": "This is noted. On it."
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 762119702,
        "path": ".env.test.example",
        "in_reply_to_id": 714815398,
        "id": 714868544,
        "diff_hunk": "@@ -32,9 +32,9 @@ MAIL_FROM=\n AUTH0_AUDIENCE=https://imercata.com\n \n # If disabled, all interaction with Auth0 in e2e tests will be mocked\n-TESTING_AUTH0_ENABLED=true\n+TESTING_AUTH0_ENABLED=false\n \n # CARTO API credentials\n-CARTO_HOST=https://imercatus-routing-api-staging.carto.solutions\n+CARTO_HOST=http://localhost:8080",
        "created_at": "2021-09-23T14:41:52Z",
        "body": "oh shit I did this but never opened a PR"
      },
      {
        "user": {
          "login": "r2g",
          "html_url": "https://github.com/r2g"
        },
        "pull_request_review_id": 762122802,
        "path": ".env.test.example",
        "in_reply_to_id": 714815398,
        "id": 714870749,
        "diff_hunk": "@@ -32,9 +32,9 @@ MAIL_FROM=\n AUTH0_AUDIENCE=https://imercata.com\n \n # If disabled, all interaction with Auth0 in e2e tests will be mocked\n-TESTING_AUTH0_ENABLED=true\n+TESTING_AUTH0_ENABLED=false\n \n # CARTO API credentials\n-CARTO_HOST=https://imercatus-routing-api-staging.carto.solutions\n+CARTO_HOST=http://localhost:8080",
        "created_at": "2021-09-23T14:44:04Z",
        "body": "No worries @cakekindel . I've added it to this PR. Your feedback is highly appreciated"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 762123412,
        "path": "test/app.module.spec.ts",
        "id": 714871199,
        "diff_hunk": "@@ -21,7 +21,8 @@ describe('Environment variables', () => {\n   });\n \n   it('should return loaded env variables', () => {\n-    expect(configService.get('port')).toEqual(4000);\n+    const port: string | number = configService.get('port');",
        "created_at": "2021-09-23T14:44:32Z",
        "body": "I don't think this should be `string | number`, the config service should always return a string"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 762126191,
        "path": "test/e2e/optimization-requests.e2e-spec.ts",
        "id": 714873217,
        "diff_hunk": "@@ -562,13 +562,45 @@ describe('OptimizationRequests (e2e)', () => {\n \n     it('should respond with the optimization request status', (done) =>\n       refreshOptimization((response) => {\n+        /**\n+         * NB:\n+            From the Carto API in production, the tests should expect the response body to contain:\n+\n+            { id:optimization.id, status:\"pending\", data:null, optimizedPoints:null }\n+\n+            For Rapid Testing as the Carto API may take a while to run and delay the test Suite, We use the Surrogarto Mock API\n+            expect the response body to contain:\n+\n+            { id:optimization.id, data: { features:[Array]}, optimizedPoints:[[Array]], status:OptimizationStatus.SUCCESS}\n+\n+         * The test spec is defined below:\n+         */\n         expect(response.body).toHaveProperty(\n           'data',\n           expect.objectContaining({\n             id: optimization.id,\n-            status: optimization.status,\n-            data: null,\n-            optimizedPoints: null,\n+            segmentId: expect.any(String),\n+            jobId: expect.any(String),\n+            status: OptimizationStatus.SUCCESS,\n+            data: expect.objectContaining({\n+              features: expect.arrayContaining([\n+                expect.objectContaining({\n+                  geometry: expect.objectContaining({\n+                    coordinates: expect.arrayContaining([\n+                      expect.arrayContaining([\n+                        expect.any(Number),\n+                        expect.any(Number),\n+                      ]),\n+                    ]),\n+                  }),\n+                }),\n+              ]),\n+            }),\n+            optimizedPoints: expect.arrayContaining([\n+              expect.arrayContaining([expect.any(Number), expect.any(Number)]),\n+            ]),\n+            createdAt: expect.any(String),\n+            updatedAt: expect.any(String),\n           }),\n         );\n         done();",
        "created_at": "2021-09-23T14:46:37Z",
        "body": "shouldn't this `done()` call be in the callback?"
      },
      {
        "user": {
          "login": "r2g",
          "html_url": "https://github.com/r2g"
        },
        "pull_request_review_id": 762131181,
        "path": "test/app.module.spec.ts",
        "in_reply_to_id": 714871199,
        "id": 714876908,
        "diff_hunk": "@@ -21,7 +21,8 @@ describe('Environment variables', () => {\n   });\n \n   it('should return loaded env variables', () => {\n-    expect(configService.get('port')).toEqual(4000);\n+    const port: string | number = configService.get('port');",
        "created_at": "2021-09-23T14:50:19Z",
        "body": "Noted. On it"
      },
      {
        "user": {
          "login": "r2g",
          "html_url": "https://github.com/r2g"
        },
        "pull_request_review_id": 762131994,
        "path": "test/e2e/optimization-requests.e2e-spec.ts",
        "in_reply_to_id": 714873217,
        "id": 714877518,
        "diff_hunk": "@@ -562,13 +562,45 @@ describe('OptimizationRequests (e2e)', () => {\n \n     it('should respond with the optimization request status', (done) =>\n       refreshOptimization((response) => {\n+        /**\n+         * NB:\n+            From the Carto API in production, the tests should expect the response body to contain:\n+\n+            { id:optimization.id, status:\"pending\", data:null, optimizedPoints:null }\n+\n+            For Rapid Testing as the Carto API may take a while to run and delay the test Suite, We use the Surrogarto Mock API\n+            expect the response body to contain:\n+\n+            { id:optimization.id, data: { features:[Array]}, optimizedPoints:[[Array]], status:OptimizationStatus.SUCCESS}\n+\n+         * The test spec is defined below:\n+         */\n         expect(response.body).toHaveProperty(\n           'data',\n           expect.objectContaining({\n             id: optimization.id,\n-            status: optimization.status,\n-            data: null,\n-            optimizedPoints: null,\n+            segmentId: expect.any(String),\n+            jobId: expect.any(String),\n+            status: OptimizationStatus.SUCCESS,\n+            data: expect.objectContaining({\n+              features: expect.arrayContaining([\n+                expect.objectContaining({\n+                  geometry: expect.objectContaining({\n+                    coordinates: expect.arrayContaining([\n+                      expect.arrayContaining([\n+                        expect.any(Number),\n+                        expect.any(Number),\n+                      ]),\n+                    ]),\n+                  }),\n+                }),\n+              ]),\n+            }),\n+            optimizedPoints: expect.arrayContaining([\n+              expect.arrayContaining([expect.any(Number), expect.any(Number)]),\n+            ]),\n+            createdAt: expect.any(String),\n+            updatedAt: expect.any(String),\n           }),\n         );\n         done();",
        "created_at": "2021-09-23T14:50:55Z",
        "body": "Let me add this too."
      },
      {
        "user": {
          "login": "r2g",
          "html_url": "https://github.com/r2g"
        },
        "pull_request_review_id": 762152782,
        "path": "test/e2e/optimization-requests.e2e-spec.ts",
        "in_reply_to_id": 714873217,
        "id": 714892605,
        "diff_hunk": "@@ -562,13 +562,45 @@ describe('OptimizationRequests (e2e)', () => {\n \n     it('should respond with the optimization request status', (done) =>\n       refreshOptimization((response) => {\n+        /**\n+         * NB:\n+            From the Carto API in production, the tests should expect the response body to contain:\n+\n+            { id:optimization.id, status:\"pending\", data:null, optimizedPoints:null }\n+\n+            For Rapid Testing as the Carto API may take a while to run and delay the test Suite, We use the Surrogarto Mock API\n+            expect the response body to contain:\n+\n+            { id:optimization.id, data: { features:[Array]}, optimizedPoints:[[Array]], status:OptimizationStatus.SUCCESS}\n+\n+         * The test spec is defined below:\n+         */\n         expect(response.body).toHaveProperty(\n           'data',\n           expect.objectContaining({\n             id: optimization.id,\n-            status: optimization.status,\n-            data: null,\n-            optimizedPoints: null,\n+            segmentId: expect.any(String),\n+            jobId: expect.any(String),\n+            status: OptimizationStatus.SUCCESS,\n+            data: expect.objectContaining({\n+              features: expect.arrayContaining([\n+                expect.objectContaining({\n+                  geometry: expect.objectContaining({\n+                    coordinates: expect.arrayContaining([\n+                      expect.arrayContaining([\n+                        expect.any(Number),\n+                        expect.any(Number),\n+                      ]),\n+                    ]),\n+                  }),\n+                }),\n+              ]),\n+            }),\n+            optimizedPoints: expect.arrayContaining([\n+              expect.arrayContaining([expect.any(Number), expect.any(Number)]),\n+            ]),\n+            createdAt: expect.any(String),\n+            updatedAt: expect.any(String),\n           }),\n         );\n         done();",
        "created_at": "2021-09-23T15:06:00Z",
        "body": "Seems that its in the callback\r\n\r\n```js\r\nrefreshOptimization((response) => {\r\n    // ...\r\n    expect(response.body).toHaveProperty( 'data',\r\n      expect.objectContaining({ /*...*/ }),\r\n    );\r\n    done();\r\n}));\r\n```"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/145",
      "updated_at": "2021-09-23T12:39:36Z",
      "title": "[IMERC-25] - Add map layer catalog",
      "state": "closed",
      "number": 145,
      "merged_at": "2021-09-23T12:39:35Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ed1a875cda5d954e238dfa5793b345c289a06316",
        "ref": "feature/IMERC-25-layer-catalog"
      },
      "created_at": "2021-09-22T17:38:09Z",
      "closed_at": "2021-09-23T12:39:35Z",
      "body": "[IMERC-25](https://imercata.atlassian.net/browse/IMERC-25) - Add map layers to BE\r\n\r\n- Adds an npm task (`npm run seed`) that will populate the `map_layers` table from the `seeds/map-layers.json` file.\r\n- Adds an endpoint (`/layers`) that returns a list of CARTO map layers\r\n\r\nResponse\r\n----------\r\n```json\r\n{\r\n  \"id\": 1,\r\n  \"label\": \"US Port Facilities\",\r\n  \"category\": \"map details\",\r\n  \"subcategory\": \"geographic\",\r\n  \"layerType\": \"CARTO\",\r\n  \"layerData\": {\r\n    \"tableName\": \"major_us_port_facilities\",\r\n    \"minZoom\": 0,\r\n    \"maxZoom\": 15\r\n  }\r\n}\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "8e8b47847f345ead48d2d7a13237cec5a8bb615e",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "rledford",
        "html_url": "https://github.com/rledford"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/144",
      "updated_at": "2021-09-21T17:38:08Z",
      "title": "QA Hotfix for IMERC-18 enum terminology",
      "state": "closed",
      "number": 144,
      "merged_at": "2021-09-21T17:38:08Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "612a8f1ca8985bd679786b230c3958b5d057df31",
        "ref": "qa-hotfix-IMERC-18-enum-terminology"
      },
      "created_at": "2021-09-21T17:33:00Z",
      "closed_at": "2021-09-21T17:38:08Z",
      "body": "Updated terminology to better match frontend and fixed typos.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "fe91bb2b6e68d609d052cb27a62d86530d1f6317",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "rledford",
        "html_url": "https://github.com/rledford"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/143",
      "updated_at": "2021-09-21T16:58:22Z",
      "title": "QA Hotfix for pipeDiameter validation error introduced in IMERC-18 changes",
      "state": "closed",
      "number": 143,
      "merged_at": "2021-09-21T16:58:21Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "58d118cc3fe134d78c22b363d954343bdf67d519",
        "ref": "qa-hotfix-IMERC-18-route-specification-dto-validation"
      },
      "created_at": "2021-09-21T16:43:04Z",
      "closed_at": "2021-09-21T16:58:21Z",
      "body": "Fixed pipeDiameter validation error by adding appropriate validation decorator.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "679db47da8f609cf3086bc781edfed45bfb6c5a0",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "msallent",
          "html_url": "https://github.com/msallent"
        },
        "pull_request_review_id": 760008556,
        "path": "src/shared/dto/route-specification.dto.ts",
        "id": 713232986,
        "diff_hunk": "@@ -35,6 +35,7 @@ export class RouteSpecificationDTO implements RouteSpecification {\n \n   @Expose()\n   @ApiProperty()\n+  @IsNumber()",
        "created_at": "2021-09-21T16:47:23Z",
        "body": "You're using `@IsInt()` below for `numLines`, is there a difference between the two?"
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 760011691,
        "path": "src/shared/dto/route-specification.dto.ts",
        "in_reply_to_id": 713232986,
        "id": 713235433,
        "diff_hunk": "@@ -35,6 +35,7 @@ export class RouteSpecificationDTO implements RouteSpecification {\n \n   @Expose()\n   @ApiProperty()\n+  @IsNumber()",
        "created_at": "2021-09-21T16:50:25Z",
        "body": "The number of lines is an integer but the pipe diameter may not always be a whole number."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "rledford",
        "html_url": "https://github.com/rledford"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/142",
      "updated_at": "2021-09-21T16:38:30Z",
      "title": "QA hotfix IMERC 18 route specification dto validation",
      "state": "closed",
      "number": 142,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "af8fd5cc887e9b5cbe5a687df408fd16721194b0",
        "ref": "qa-hotfix-IMERC-18-route-specification-dto-validation"
      },
      "created_at": "2021-09-21T16:30:35Z",
      "closed_at": "2021-09-21T16:36:36Z",
      "body": "Fix pipeDiameter validation error on POST to create a new project that includes route specifications.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "679db47da8f609cf3086bc781edfed45bfb6c5a0",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "rledford",
        "html_url": "https://github.com/rledford"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/141",
      "updated_at": "2021-09-23T17:12:25Z",
      "title": "[IMERC-67] Finding route by ID will include its children (laterals)",
      "state": "closed",
      "number": 141,
      "merged_at": "2021-09-23T17:12:24Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "8286920cde310a2e04531d9600649d9ae7915c4f",
        "ref": "IMERC-67-include-laterals-in-route-response"
      },
      "created_at": "2021-09-17T20:54:35Z",
      "closed_at": "2021-09-23T17:12:24Z",
      "body": "Populates a route with its `children` where the child route's `parent_id` matches the requested route `id`.\r\n\r\nOther files that use `routesService.findOne` were refactored.\r\n- _scoped-lateral.decorator.ts_ - Will no longer need to query using `lateralService.findOne` since the lateral (if associated with the route) will be present in the `route.children` array.\r\n  - IMPORTANT: When finding a matching `lateralId` in `route.children`, although the `LateralIdPipeArgs` interface defines `lateralId` as a `number`, it is not coerced by the param decorator and remains a `string`, so the find method compares with == instead of ===. See commit [c17f2a1](https://github.com/iMercatus/imercata-backend/pull/141/commits/c17f2a133b6e78001bf75b3548f8b55eea643ad4) below.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "938c2ac7136551849a9bf7f87d727df6a89feaf5",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 761214348,
        "path": "src/route-planner/decorators/scoped-lateral.decorator.ts",
        "id": 714164289,
        "diff_hunk": "@@ -59,12 +58,7 @@ export class ParseLateralIdPipe implements PipeTransform {\n       throw new NotFoundException(`Route not found: ${routeId}`);\n     }\n \n-    const lateral = await this.lateralsService.findOne(\n-      project,\n-      route,\n-      userProfile.profile,\n-      lateralId,\n-    );\n+    const lateral = route.children.find((lat) => lat.id == lateralId);",
        "created_at": "2021-09-22T17:32:58Z",
        "body": "üëç "
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "rledford",
        "html_url": "https://github.com/rledford"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/140",
      "updated_at": "2021-09-17T15:01:38Z",
      "title": "[IMERC-18] Add specification data to Projects and Routes",
      "state": "closed",
      "number": 140,
      "merged_at": "2021-09-17T15:01:37Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "4379d6135a840e8c1ce5e1a8022060c625021486",
        "ref": "IMERC-18-route-specifications"
      },
      "created_at": "2021-09-15T15:03:39Z",
      "closed_at": "2021-09-17T15:01:37Z",
      "body": "Adds a `route_specification` column to Project and a `specification` column to Route, both of type `jsonb` with the same schema. The specifications contain relevant information for cost calculations. Using IMERC-16 as reference for specifics on acceptable enum values and other other constraints. These fields are optional and _do not_ have to be provided in the DTO when creating or updating a Project or Route, but must be valid if they are provided.\r\n\r\n### Discussion Topics (FE and BE)\r\n- ~~When a new project is being created, the form will allow users to specify these specifications before the first route is created~~.\r\n  - ~~Should the FE store those values until the first route is saved, and send the specifications along with it?~~\r\n  - ~~How are we going to handle when the user creates a new project but does not save the initial route? The project would still exist but the route specifications would be lost if no route was saved.~~\r\n- Will the specifications for child routes default to the same as the parent unless the user modifies them?\r\n- ~~Should the _specification_ field be nullable?~~\r\n  - ~~If not, **for migrations**, what should the default values be for all existing routes that do not have a specification?~~\r\n- ~~There are specification fields that have been marked out such as viscosity~~.\r\n  - ~~Should these be in the backend data model? If so, while not being utilized in the frontend, what should the default values be for each?~~\r\n- There are probably a lot of _Pipe Material Grades_ which will depend on the _Pipe Material Type_.\r\n  - Are we implementing validation to ensure only appropriate grades are used for the types (FE, BE, both)?\r\n  - Using enums for materials, grades, coatings, and joint types will require changes to source code to accommodate new ones. Is there another approach or is everyone ok with this for now?\r\n- ~~Joint Length~~\r\n  - ~~Should this be enum or a number? Looking at the examples, such as _Double Random Length (40')_, it's unclear whether we'd be storing a number such as _40.0_ or an enum like _DRL40_.~~\r\n- Need all relevant values for enums\r\n  - Pipe Materials\r\n  - Pipe Material Grades\r\n  - Pipe Coatings\r\n  - Joint Types\r\n- What is _Number of Lines_  referring to?",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "b46a192b1c56fd4f11a9122d6dd4acb792a6142f",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 755527533,
        "path": "src/route-planner/entities/route.entity.ts",
        "id": 709501215,
        "diff_hunk": "@@ -43,6 +44,9 @@ export class RouteEntity implements Route {\n   @Column({ type: 'jsonb' })\n   spreads?: Spread[];\n \n+  @Column({ type: 'jsonb' })\n+  specification?: RouteSpecification;",
        "created_at": "2021-09-15T19:13:01Z",
        "body": "Shouldn't this be on project? I don't think the specs will change across routes"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 755527533,
        "path": "src/route-planner/enums/pipe-coating-type.enum.ts",
        "id": 709501927,
        "diff_hunk": "@@ -0,0 +1,5 @@\n+export enum PipeCoatingType {\n+  NONE = 'NONE', // no coating\n+  FBE = 'FBE', // fusion bonded epoxy\n+  ARO = 'ARO', // abrasion resistant overlay",
        "created_at": "2021-09-15T19:14:06Z",
        "body": "`PipeCoatingType.FBE` is not terribly meaningful;\r\n\r\n```suggestion\r\n  NONE = 'none',\r\n  FUSION_BONDED_EPOXY = 'fusion_bonded_epoxy',\r\n  ABRASION_RESIST_OVERLAY = 'abrasion_resistant_overlay',\r\n```"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 755527533,
        "path": "src/route-planner/enums/pipe-material-grade.enum.ts",
        "id": 709502923,
        "diff_hunk": "@@ -0,0 +1,4 @@\n+export enum PipeMaterialGrade {\n+  T304 = 'T304', // stainless steel\n+  T316 = 'T316', // stainless steel",
        "created_at": "2021-09-15T19:15:51Z",
        "body": "```suggestion\r\n  STAINLESS_T304 = 'STAINLESS_T304',\r\n  STAINLESS_T316 = 'STAINLESS_T316',\r\n```"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 755527533,
        "path": "src/route-planner/interfaces/route-specification.ts",
        "id": 709503221,
        "diff_hunk": "@@ -0,0 +1,14 @@\n+import { PipeCoatingType } from '../enums/pipe-coating-type.enum';\n+import { PipeJointType } from '../enums/pipe-joint-type.enum';\n+import { PipeMaterialGrade } from '../enums/pipe-material-grade.enum';\n+import { PipeMaterialType } from '../enums/pipe-material-type.enum';\n+\n+export interface RouteSpecification {\n+  pipeMaterialType: PipeMaterialType;\n+  pipeMaterialGrade: PipeMaterialGrade;",
        "created_at": "2021-09-15T19:16:18Z",
        "body": "wouldn't grade only apply if type is stainless?"
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 755541087,
        "path": "src/route-planner/entities/route.entity.ts",
        "in_reply_to_id": 709501215,
        "id": 709511640,
        "diff_hunk": "@@ -43,6 +44,9 @@ export class RouteEntity implements Route {\n   @Column({ type: 'jsonb' })\n   spreads?: Spread[];\n \n+  @Column({ type: 'jsonb' })\n+  specification?: RouteSpecification;",
        "created_at": "2021-09-15T19:29:22Z",
        "body": "We will need to store specs for each route I believe. Would we store the main routes specs on the project and the child route specs on the routes themselves?\r\n\r\nOne of the notes on IMERC-18: __Note: mainline and segments can all have different sets of parameters, and will be accessed in the left navigation of the route planner__"
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 755550012,
        "path": "src/route-planner/interfaces/route-specification.ts",
        "in_reply_to_id": 709503221,
        "id": 709518423,
        "diff_hunk": "@@ -0,0 +1,14 @@\n+import { PipeCoatingType } from '../enums/pipe-coating-type.enum';\n+import { PipeJointType } from '../enums/pipe-joint-type.enum';\n+import { PipeMaterialGrade } from '../enums/pipe-material-grade.enum';\n+import { PipeMaterialType } from '../enums/pipe-material-type.enum';\n+\n+export interface RouteSpecification {\n+  pipeMaterialType: PipeMaterialType;\n+  pipeMaterialGrade: PipeMaterialGrade;",
        "created_at": "2021-09-15T19:40:16Z",
        "body": "There are grades for carbon steel as well."
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 756354956,
        "path": "src/route-planner/interfaces/route-specification.ts",
        "in_reply_to_id": 709503221,
        "id": 710157133,
        "diff_hunk": "@@ -0,0 +1,14 @@\n+import { PipeCoatingType } from '../enums/pipe-coating-type.enum';\n+import { PipeJointType } from '../enums/pipe-joint-type.enum';\n+import { PipeMaterialGrade } from '../enums/pipe-material-grade.enum';\n+import { PipeMaterialType } from '../enums/pipe-material-type.enum';\n+\n+export interface RouteSpecification {\n+  pipeMaterialType: PipeMaterialType;\n+  pipeMaterialGrade: PipeMaterialGrade;",
        "created_at": "2021-09-16T14:10:03Z",
        "body": "### Common types of pipelines\r\n- Gathering Pipelines\r\n- Transmission Pipelines\r\n- Distribution Pipelines\r\n- Flowlines\r\n- Feeder Pipelines\r\n\r\n### Common pipeline materials (not just for oil and gas)\r\n- Steel (Common - stainless, carbon)\r\n- Plastic (Common - polyethylene composite)\r\n- Copper (Uncommon)\r\n- Iron (Uncommon)\r\n- Other materials (Uncommon)\r\n\r\n### References\r\nCommon types of pipelines (oil and gas) [here](https://blog.enerpac.com/types-of-pipeline-every-oil-and-gas-engineer-should-know-about/)\r\nPipeline materials reference [here](https://primis.phmsa.dot.gov/comm/FactSheets/FSPipelineMaterials.htm)\r\nPipeline material grades (steel only) reference [here](http://www.wermac.org/pipes/pipe_part4.html)"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 757514470,
        "path": "src/projects/dto/project-create.dto.ts",
        "id": 711093276,
        "diff_hunk": "@@ -1,9 +1,9 @@\n-import { PickType } from '@nestjs/swagger';\n+import { OptionalType } from '@/src/shared/helpers';\n+import { IntersectionType, PickType } from '@nestjs/swagger';\n \n import { ProjectDTO } from './project.dto';\n \n-export class ProjectCreateDTO extends PickType(ProjectDTO, [\n-  'name',\n-  'type',\n-  'productType',\n-] as const) {}\n+export class ProjectCreateDTO extends IntersectionType(\n+  PickType(ProjectDTO, ['name', 'type', 'productType'] as const),\n+  OptionalType(PickType(ProjectDTO, ['routeSpecification'] as const)),",
        "created_at": "2021-09-17T14:14:06Z",
        "body": "üëç "
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 757515786,
        "path": "src/projects/dto/project.dto.ts",
        "id": 711094216,
        "diff_hunk": "@@ -46,6 +47,11 @@ export class ProjectDTO implements Project {\n   @Expose()\n   routes: RouteDTO[];\n \n+  @Expose()\n+  @ApiProperty()\n+  @ValidateNested()",
        "created_at": "2021-09-17T14:15:17Z",
        "body": "With ValidateNested, I'm fairly certain you'll need to add a `@Type` declaration so `class-transformer` performs the proper conversion when converting from raw json to the structured DTO."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 757515786,
        "path": "src/route-planner/dto/route.dto.ts",
        "id": 711095300,
        "diff_hunk": "@@ -55,6 +56,11 @@ export class RouteDTO implements Route {\n   @ValidateNested({ each: true })\n   spreads: Spread[];\n \n+  @Expose()\n+  @ApiProperty()\n+  @ValidateNested()",
        "created_at": "2021-09-17T14:16:35Z",
        "body": "Same as above about `@Type`"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 757515786,
        "path": "test/projects/services/projects.service.spec.ts",
        "id": 711098019,
        "diff_hunk": "@@ -156,7 +167,55 @@ describe('ProjectsService', () => {\n   describe('create', () => {\n     const company: Company = { id: 1 } as Company;\n     const user: User = {} as User;\n-    const project: Project = { id: 1, name: 'Test Project' } as Project;\n+    const project: Project = {\n+      id: 1,\n+      name: 'Test Project',\n+    } as Project;\n+    let result: Project;\n+\n+    beforeEach(async () => {\n+      jest.spyOn(mockEntityManager, 'save').mockResolvedValue(project);\n+      jest.spyOn(mockEntityManager, 'findOne').mockResolvedValue(project);\n+      result = await service.create(company, user, project);\n+    });\n+\n+    it('should save the project in the repository', async () => {",
        "created_at": "2021-09-17T14:19:45Z",
        "body": "No need for `async` here (nit-pick)"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 757515786,
        "path": "test/projects/services/projects.service.spec.ts",
        "in_reply_to_id": 711098019,
        "id": 711098471,
        "diff_hunk": "@@ -156,7 +167,55 @@ describe('ProjectsService', () => {\n   describe('create', () => {\n     const company: Company = { id: 1 } as Company;\n     const user: User = {} as User;\n-    const project: Project = { id: 1, name: 'Test Project' } as Project;\n+    const project: Project = {\n+      id: 1,\n+      name: 'Test Project',\n+    } as Project;\n+    let result: Project;\n+\n+    beforeEach(async () => {\n+      jest.spyOn(mockEntityManager, 'save').mockResolvedValue(project);\n+      jest.spyOn(mockEntityManager, 'findOne').mockResolvedValue(project);\n+      result = await service.create(company, user, project);\n+    });\n+\n+    it('should save the project in the repository', async () => {",
        "created_at": "2021-09-17T14:20:18Z",
        "body": "Several more below.  A quick find/replace should take care of them."
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 757546529,
        "path": "src/projects/dto/project.dto.ts",
        "in_reply_to_id": 711094216,
        "id": 711117630,
        "diff_hunk": "@@ -46,6 +47,11 @@ export class ProjectDTO implements Project {\n   @Expose()\n   routes: RouteDTO[];\n \n+  @Expose()\n+  @ApiProperty()\n+  @ValidateNested()",
        "created_at": "2021-09-17T14:41:54Z",
        "body": "Fixed, and thanks, I thought the type was inferred from type on the property."
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 757546668,
        "path": "src/route-planner/dto/route.dto.ts",
        "in_reply_to_id": 711095300,
        "id": 711117712,
        "diff_hunk": "@@ -55,6 +56,11 @@ export class RouteDTO implements Route {\n   @ValidateNested({ each: true })\n   spreads: Spread[];\n \n+  @Expose()\n+  @ApiProperty()\n+  @ValidateNested()",
        "created_at": "2021-09-17T14:42:03Z",
        "body": "Same as above"
      },
      {
        "user": {
          "login": "rledford",
          "html_url": "https://github.com/rledford"
        },
        "pull_request_review_id": 757546796,
        "path": "test/projects/services/projects.service.spec.ts",
        "in_reply_to_id": 711098019,
        "id": 711117785,
        "diff_hunk": "@@ -156,7 +167,55 @@ describe('ProjectsService', () => {\n   describe('create', () => {\n     const company: Company = { id: 1 } as Company;\n     const user: User = {} as User;\n-    const project: Project = { id: 1, name: 'Test Project' } as Project;\n+    const project: Project = {\n+      id: 1,\n+      name: 'Test Project',\n+    } as Project;\n+    let result: Project;\n+\n+    beforeEach(async () => {\n+      jest.spyOn(mockEntityManager, 'save').mockResolvedValue(project);\n+      jest.spyOn(mockEntityManager, 'findOne').mockResolvedValue(project);\n+      result = await service.create(company, user, project);\n+    });\n+\n+    it('should save the project in the repository', async () => {",
        "created_at": "2021-09-17T14:42:10Z",
        "body": "Fixed"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 757558768,
        "path": "src/projects/dto/project.dto.ts",
        "in_reply_to_id": 711094216,
        "id": 711126606,
        "diff_hunk": "@@ -46,6 +47,11 @@ export class ProjectDTO implements Project {\n   @Expose()\n   routes: RouteDTO[];\n \n+  @Expose()\n+  @ApiProperty()\n+  @ValidateNested()",
        "created_at": "2021-09-17T14:52:57Z",
        "body": "Its buried somewhere in the NestJS/TypeORM/class-validator/class-transformer documentation (most of which is garbage), but IIRC its for class-transformer so it knows what type to use when converting from JSON to DTO at runtime, after all the type information has been lost due to JS transpiling."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "cakekindel",
        "html_url": "https://github.com/cakekindel"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/139",
      "updated_at": "2021-09-09T17:11:48Z",
      "title": "deploy staging",
      "state": "closed",
      "number": 139,
      "merged_at": "2021-09-09T17:11:48Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "b46a192b1c56fd4f11a9122d6dd4acb792a6142f",
        "ref": "qa"
      },
      "created_at": "2021-09-08T20:01:26Z",
      "closed_at": "2021-09-09T17:11:48Z",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "eef74f80b7e5d4ce77c52cf3a3148b9bfcbdf1a4",
        "ref": "staging"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/138",
      "updated_at": "2021-09-23T13:54:42Z",
      "title": "[Snyk] Upgrade nanoid from 3.1.23 to 3.1.25",
      "state": "closed",
      "number": 138,
      "merged_at": "2021-09-23T13:54:41Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ecf3bd6a3f9569dfcd030422768d98a3a67d2816",
        "ref": "snyk-upgrade-a09c70daa233399314364be24dcee703"
      },
      "created_at": "2021-09-03T07:27:24Z",
      "closed_at": "2021-09-23T13:54:41Z",
      "body": "<h3>Snyk has created this PR to upgrade nanoid from 3.1.23 to 3.1.25.</h3>\n\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **2 versions** ahead of your current version.\n- The recommended version was released **22 days ago**, on 2021-08-12.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>nanoid</b></summary>\n    <ul>\n      <li>\n        <b>3.1.25</b> - <a href=\"https://snyk.io/redirect/github/ai/nanoid/releases/tag/3.1.25\">2021-08-12</a></br><p>3.1.25</p>\n      </li>\n      <li>\n        <b>3.1.24</b> - <a href=\"https://snyk.io/redirect/github/ai/nanoid/releases/tag/3.1.24\">2021-08-11</a></br><p>3.1.24</p>\n      </li>\n      <li>\n        <b>3.1.23</b> - <a href=\"https://snyk.io/redirect/github/ai/nanoid/releases/tag/3.1.23\">2021-05-10</a></br><p>3.1.23</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/ai/nanoid/releases\">nanoid GitHub release notes</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJjMzdiYjgzMy00MmZhLTQ5Y2UtODgxNy0zY2EyYTY2MjRmMzgiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImMzN2JiODMzLTQyZmEtNDljZS04ODE3LTNjYTJhNjYyNGYzOCJ9fQ==\" width=\"0\" height=\"0\"/><img src=\"https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=nanoid&from_version=3.1.23&to_version=3.1.25&pr_id=c37bb833-42fa-49ce-8817-3ca2a6624f38&visibility=false&has_feature_flag=false\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;nanoid&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"c37bb833-42fa-49ce-8817-3ca2a6624f38\",\"prPublicId\":\"c37bb833-42fa-49ce-8817-3ca2a6624f38\",\"dependencies\":[{\"name\":\"nanoid\",\"from\":\"3.1.23\",\"to\":\"3.1.25\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":2,\"publishedDate\":\"2021-08-12T12:37:59.889Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "62c02c0c267a93e5944da7e0d0beacd1fa45fec7",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/137",
      "updated_at": "2021-09-03T19:32:30Z",
      "title": "[IMERC-498] Increase maximum body size to 50MB.",
      "state": "closed",
      "number": 137,
      "merged_at": "2021-09-03T19:32:30Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "940c4b024a1b7f17fc81692691278deec0ba3d10",
        "ref": "bugfix/IMERC-498-request-entity-too-large"
      },
      "created_at": "2021-08-30T17:53:36Z",
      "closed_at": "2021-09-03T19:32:30Z",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "62c02c0c267a93e5944da7e0d0beacd1fa45fec7",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/136",
      "updated_at": "2021-08-30T17:43:09Z",
      "title": "[IMERC-461] Add Spreads",
      "state": "closed",
      "number": 136,
      "merged_at": "2021-08-30T17:42:30Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "15bb66be12f3f5d7b7f712d6844839b8c4618dd8",
        "ref": "feature/IMERC-461-spreads"
      },
      "created_at": "2021-08-30T16:48:44Z",
      "closed_at": "2021-08-30T17:42:30Z",
      "body": "[IMERC-461](https://imercatus.backlog.com/view/IMERC-461)\r\n\r\n- [x] Add spread migration\r\n- [x] Restructure Route interface/dto/entity\r\n- [x] Update tests\r\n\r\nAlso covers [IMERC-460](https://imercatus.backlog.com/view/IMERC-460) & [IMERC-471](https://imercatus.backlog.com/view/IMERC-471)",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "df1087d2415c731277be187c98bc656698cfc24e",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 741867523,
        "path": "src/route-planner/dto/route.dto.ts",
        "id": 698653231,
        "diff_hunk": "@@ -42,6 +46,15 @@ export class RouteDTO implements Route {\n   @ApiHideProperty()\n   children: RouteDTO[];\n \n+  @Expose()\n+  @ApiProperty()\n+  @IsArray()\n+  @ArrayMinSize(2, { each: true })\n+  @ArrayMaxSize(2, { each: true })",
        "created_at": "2021-08-30T16:59:27Z",
        "body": "won't validation at this level limit the number of spreads to 2? (not the size of the spread tuple, since this is `Array<Array<UDP>>`)"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 741867523,
        "path": "src/route-planner/types/spread.ts",
        "id": 698665884,
        "diff_hunk": "@@ -0,0 +1,3 @@\n+import { UserDefinedPoint } from '../interfaces';\n+\n+export type Spread = [UserDefinedPoint, UserDefinedPoint];",
        "created_at": "2021-08-30T17:18:54Z",
        "body": "will there be any issues with not relating spreads to optimized points? is the expectation that the FE will lookup the optimized points from the segments that these user points are a part of? "
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 741867523,
        "path": "test/e2e/routes.e2e-spec.ts",
        "id": 698668867,
        "diff_hunk": "@@ -465,7 +476,10 @@ describe('RoutesController (e2e)', () => {\n \n     describe('when the arguments are invalid', () => {\n       beforeEach(() => {\n-        props = { segments: null };\n+        props = {\n+          segments: null,\n+          spreads: [([{} as UserDefinedPointDTO] as unknown) as Spread],",
        "created_at": "2021-08-30T17:23:32Z",
        "body": "if we're using `_ as unknown as _` this could be simpler:\r\n```suggestion\r\n          spreads: [[{}]] as unknown as Spread[],\r\n```"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 741901100,
        "path": "src/route-planner/dto/route.dto.ts",
        "in_reply_to_id": 698653231,
        "id": 698678800,
        "diff_hunk": "@@ -42,6 +46,15 @@ export class RouteDTO implements Route {\n   @ApiHideProperty()\n   children: RouteDTO[];\n \n+  @Expose()\n+  @ApiProperty()\n+  @IsArray()\n+  @ArrayMinSize(2, { each: true })\n+  @ArrayMaxSize(2, { each: true })",
        "created_at": "2021-08-30T17:38:29Z",
        "body": "Normally, yes. But `{ each: true }` causes it to act on each member of the topmost array, which SHOULD be a 2-element array."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 741902786,
        "path": "src/route-planner/types/spread.ts",
        "in_reply_to_id": 698665884,
        "id": 698680113,
        "diff_hunk": "@@ -0,0 +1,3 @@\n+import { UserDefinedPoint } from '../interfaces';\n+\n+export type Spread = [UserDefinedPoint, UserDefinedPoint];",
        "created_at": "2021-08-30T17:40:21Z",
        "body": "The data modeling was actually proposed by @msallent [here](https://theoremco.slack.com/archives/C01RMUFMFC6/p1629983913001000).  I don't think they're expecting any relationship at all."
      },
      {
        "user": {
          "login": "msallent",
          "html_url": "https://github.com/msallent"
        },
        "pull_request_review_id": 741905245,
        "path": "src/route-planner/types/spread.ts",
        "in_reply_to_id": 698665884,
        "id": 698682172,
        "diff_hunk": "@@ -0,0 +1,3 @@\n+import { UserDefinedPoint } from '../interfaces';\n+\n+export type Spread = [UserDefinedPoint, UserDefinedPoint];",
        "created_at": "2021-08-30T17:43:09Z",
        "body": "can confirm, FE will handle this"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/135",
      "updated_at": "2021-09-23T13:58:54Z",
      "title": "[Snyk] Upgrade typeorm from 0.2.35 to 0.2.36",
      "state": "closed",
      "number": 135,
      "merged_at": "2021-09-23T13:58:53Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "01fbad0b7ac4f23fbe4d03e5aa9adbe06510fce2",
        "ref": "snyk-upgrade-9bd513904d51aa006cecdca8363355e9"
      },
      "created_at": "2021-08-24T07:18:35Z",
      "closed_at": "2021-09-23T13:58:53Z",
      "body": "<h3>Snyk has created this PR to upgrade typeorm from 0.2.35 to 0.2.36.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=typeorm&from_version=0.2.35&to_version=0.2.36&pr_id=869a9551-6ff1-4fe5-a9c2-990ce339f9d1&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **6 versions** ahead of your current version.\n- The recommended version was released **24 days ago**, on 2021-07-31.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>typeorm</b></summary>\n    <ul>\n      <li>\n        <b>0.2.36</b> - <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases/tag/0.2.36\">2021-07-31</a></br><h3>Bug Fixes</h3>\n<ul>\n<li>add deprecated <code>WhereExpression</code> alias for <code>WhereExpressionBuilder</code> (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7980\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7980/hovercard\">#7980</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/76e7ed943779b940212c4e453d97028b5ffed7d0\">76e7ed9</a>)</li>\n<li>always generate migrations with template string literals (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7971\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7971/hovercard\">#7971</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/e9c2af610a1c9a632605b71d67b97e048be2e29e\">e9c2af6</a>)</li>\n<li>use js rather than ts in all <code>browser</code> package manifests (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7982\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7982/hovercard\">#7982</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/0d90bcdc8c77f2080aa200fe9f4f962b7b01c9ee\">0d90bcd</a>)</li>\n<li>use nvarchar/ntext during transit for SQLServer queries (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7933\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7933/hovercard\">#7933</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/62d79762dbfe58219a5673ba4d404fe9f2e40436\">62d7976</a>)</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>add postgres connection option <code>applicationName</code> (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7989\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7989/hovercard\">#7989</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/d365acca68069d0bd9acea5b45a73d7f4c1f4d8f\">d365acc</a>)</li>\n</ul>\n      </li>\n      <li>\n        <b>0.2.36-dev.d365acc</b> - 2021-07-30\n      </li>\n      <li>\n        <b>0.2.36-dev.b797781</b> - 2021-07-30\n      </li>\n      <li>\n        <b>0.2.36-dev.76e7ed94</b> - 2021-07-30\n      </li>\n      <li>\n        <b>0.2.36-dev.62d7976</b> - 2021-07-31\n      </li>\n      <li>\n        <b>0.2.36-dev.0d90bcd</b> - 2021-07-30\n      </li>\n      <li>\n        <b>0.2.35</b> - <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases/tag/0.2.35\">2021-07-29</a></br><h3>Bug Fixes</h3>\n<ul>\n<li><code>entity</code> to be <code>Partial&lt;Entity&gt;</code> | <code>undefined</code> in <code>UpdateEvent</code> (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7783\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7783/hovercard\">#7783</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/f033045dd6d1dac4f6f7e528997a2c5f8892d763\">f033045</a>)</li>\n<li>actually return a working ReadStream from SQL Server query runner (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7893\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7893/hovercard\">#7893</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/e80985fabbafcb4f5409d72840c3902e1619b8a6\">e80985f</a>)</li>\n<li>added version check before dropping materialized views to keep backward compatibility (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7716\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7716/hovercard\">#7716</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/29f1f86ae2a2dafd70fd958b1980b9f059f42f7a\">29f1f86</a>)</li>\n<li>allow for string id in mongo.findByIds call (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7838\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7838/hovercard\">#7838</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/4b45ae1e8174cf438f9fca92c635957513bff8f8\">4b45ae1</a>)</li>\n<li>better support of relation-based properties in where clauses (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7805\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7805/hovercard\">#7805</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/3221c50d878505b1b8435b07451ec94cd8d04fce\">3221c50</a>)</li>\n<li>Buffer in primary columns causes bugs with relations (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7952\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7952/hovercard\">#7952</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/37e08a7848a92cd4f98fec8f33f120cee739352f\">37e08a7</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/4060\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/4060/hovercard\">#4060</a></li>\n<li>capacitor does not correctly set journal mode (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7873\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7873/hovercard\">#7873</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/5f20eb791a3c51410d6759548ec11c9a919659ff\">5f20eb7</a>)</li>\n<li>Capacitor driver PRAGMA requests failing on Android (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7728\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7728/hovercard\">#7728</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/9620a26c4eeb34baddce3a841ffd686d82cd87af\">9620a26</a>)</li>\n<li>condition is optional in SelectQueryBuilder joins (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7888\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7888/hovercard\">#7888</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/2deaa0e948d7b797c0e4d3ccbc3c9c2f0f253caf\">2deaa0e</a>)</li>\n<li>correctly handle mongo replica set driver option (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7908\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7908/hovercard\">#7908</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/9212df45e3899370efdf9ec67f1a6418ce4ac838\">9212df4</a>)</li>\n<li>correctly load yml in ConnectionOptionsYmlReader (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7743\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7743/hovercard\">#7743</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/57f9254499ef07500f5e59df20e778ee0f27b9aa\">57f9254</a>)</li>\n<li>craft oracle connectString as a descriptor with SID (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7878\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7878/hovercard\">#7878</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/b05d0936ddabae179a42c9c0f67779a6bec3d5b1\">b05d093</a>)</li>\n<li>delete operation in MongoDB impact all matched documents (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7811\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7811/hovercard\">#7811</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/0fbae53bdd83f5da94ac8a468e1506c2852eed02\">0fbae53</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7809\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7809/hovercard\">#7809</a></li>\n<li>Do not add NULL/NOT NULL for stored columns (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7708\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7708/hovercard\">#7708</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/3c33e9f54541a12b0d0fd37177c6afebf7a5349f\">3c33e9f</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7698\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7698/hovercard\">#7698</a></li>\n<li>do OBJECT_ID lookup for column constraint instead of name in mssql (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7916\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7916/hovercard\">#7916</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/fa8c1b088a9a6a2a1ffaec1b1a681be99cf2db3c\">fa8c1b0</a>)</li>\n<li>drop pool.autostart from mssql options because it's unused (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7877\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7877/hovercard\">#7877</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/0d21a4d07ec275a295df6f78b85c4814c027258a\">0d21a4d</a>)</li>\n<li>drop SAP statement after <code>prepare</code> per Hana client docs (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7748\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7748/hovercard\">#7748</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/8ca05b11db3ba083c7395cca09a4aa98c70e3d8f\">8ca05b1</a>)</li>\n<li>eager relation respects children relations (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/5685\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/5685/hovercard\">#5685</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/e7e887a582cce66bd21044472f4a5288894650c9\">e7e887a</a>)</li>\n<li>enable returning additional columns with MSSQL (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7864\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7864/hovercard\">#7864</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/e1db48d8391728455744c91ea7976a334300f77d\">e1db48d</a>)</li>\n<li>entity object undefined in <code>afterUpdate</code> subscriber (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7724\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7724/hovercard\">#7724</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/d25304d9e319157c6b8999932fb9144a67bd84cf\">d25304d</a>)</li>\n<li>find operation in MongoDB do not include nullable values from documents (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7820\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7820/hovercard\">#7820</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/98c13cf710de83783bc5b5576a64327b26d26262\">98c13cf</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7760\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7760/hovercard\">#7760</a></li>\n<li>fix table loading when schemas are used (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/3a106a3cca223dadca58af1244c6dda79c60b43c\">3a106a3</a>)</li>\n<li>foreign keys in SAP were loading from the wrong table (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7914\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7914/hovercard\">#7914</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/4777a795210c3a93a4171a17dbdce248e25b21da\">4777a79</a>)</li>\n<li>handle postgres default when tableColumn.default is not string (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7816\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7816/hovercard\">#7816</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/0463855223100028e62f7cb2e84319770f54449e\">0463855</a>)</li>\n<li>handle snake case of ABcD which should become a_bc_d (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7883\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7883/hovercard\">#7883</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/eb680f99b74c335556d23016264fcf1ea6ce1d6f\">eb680f9</a>)</li>\n<li>improve query for MSSQL to fetch foreign keys and tables (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7935\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7935/hovercard\">#7935</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/f6af01ad1b20ce67dc03448f050de3127227758c\">f6af01a</a>)</li>\n<li>make <code>OracleQueryRunner</code> createDatabase if-not-exists not fail (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/f5a80ef3df82120fee8f68e02f320dacbc856607\">f5a80ef</a>)</li>\n<li>only pass <code>data</code> from SaveOptions during that query (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7886\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7886/hovercard\">#7886</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/1de2e13cfe442af99c2cf017f48127e1de3a08d9\">1de2e13</a>)</li>\n<li>oracle cannot support DB in table identifiers (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7954\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7954/hovercard\">#7954</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/8c60d917ef5fbfdc11b7c3ad8e2901eba3f9fa4b\">8c60d91</a>)</li>\n<li>pass table to namingstrategy when we can instead of table name (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7925\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7925/hovercard\">#7925</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/140002d1ebc4837071dab83a7bb164a02a7a2732\">140002d</a>)</li>\n<li>prevent modification of the FindOptions.relations (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7887\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7887/hovercard\">#7887</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/a2fcad6ef963c3e444765d6a7b4fa1e0e89a72e6\">a2fcad6</a>)</li>\n<li>prevent reuse of broken connections in postgres pool (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7792\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7792/hovercard\">#7792</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/5cf368a23fa78b9e97dd12b54616f17b8431ffee\">5cf368a</a>)</li>\n<li>prevent transactions in the Cordova driver (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7771\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7771/hovercard\">#7771</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/fc4133cf621874c616bf7643c79112b9f68a1e09\">fc4133c</a>)</li>\n<li>properly escape oracle table paths (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7917\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7917/hovercard\">#7917</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/7e8687c45283cdb2caffa53ed5ebab527797c3e8\">7e8687c</a>)</li>\n<li>regression when making <code>join</code> conditions <code>undefined</code>-able (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7892\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7892/hovercard\">#7892</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/b0c1cc6d6820e93bc7b986d4f18db4020195e170\">b0c1cc6</a>)</li>\n<li>restored <code>buildColumnAlias</code> for backward compatibility (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7706\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7706/hovercard\">#7706</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/36ceefa710c0994e054c8e267a1fb1bdf4b25c39\">36ceefa</a>)</li>\n<li>return correct DeleteResult and UpdateResult for mongo (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7884\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7884/hovercard\">#7884</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/7a646a212815e6b9c2dda752442075624f9f552d\">7a646a2</a>)</li>\n<li>support fully qualified schema in createSchema (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7934\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7934/hovercard\">#7934</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/94edd12ca450d4dbcd2e4902e1009fcd27136490\">94edd12</a>)</li>\n<li>support table names between schemas in oracle (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7951\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7951/hovercard\">#7951</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/aa45b935ff33915a86199307c86aabf904d67e28\">aa45b93</a>)</li>\n<li>typing so SelectQueryBuilder.getRawOne may return undefined (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7863\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7863/hovercard\">#7863</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/36e5a0cf09a25dfe98ffa130f35005a8eacc4155\">36e5a0c</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7449\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7449/hovercard\">#7449</a></li>\n<li>typo prevented us from pulling the schema correctly in some cases (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/c7f2db8d6999b990308787681a2767e41ad2bdd6\">c7f2db8</a>)</li>\n<li>update operation in MongoDB impact all matched documents (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7803\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7803/hovercard\">#7803</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/052014cdba844b1a7867f46606045a494cffc907\">052014c</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7788\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7788/hovercard\">#7788</a></li>\n<li>use correct query for cross-database mssql identity check (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7911\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7911/hovercard\">#7911</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/7869fb143c2b3ec019507a79e80eb2e29c270338\">7869fb1</a>)</li>\n<li>use fully qualified and escaped table names for oracle (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7857\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7857/hovercard\">#7857</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/2b90725a080c7ea9140464a68c8c8c9475fd73f9\">2b90725</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7779\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7779/hovercard\">#7779</a></li>\n<li>use ObjectLiteral in UpdateEvent rather than <code>Entity</code> (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7910\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7910/hovercard\">#7910</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/78fbc14b3ee915ce035cb1546c92142eab6a899e\">78fbc14</a>)</li>\n<li>use only table name in constraint naming strategy (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/5dc777f17ec238c3f3303aa9379fe855727220b1\">5dc777f</a>)</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>add <code>retryWrites</code> to allowed mongo <code>extra</code> options (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7869\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7869/hovercard\">#7869</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/dcdaacacaf122c7579d31a700e93c5357a9e0a16\">dcdaaca</a>)</li>\n<li>add capacitor driver options for encryption &amp; version (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7868\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7868/hovercard\">#7868</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/a2bd94b146738a2aa637f52011c1fd5e92ed38e1\">a2bd94b</a>)</li>\n<li>add connection option <code>entitySkipConstructor</code> (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/f43d56110fd41c23d80e32021adf4ade7648ce97\">f43d561</a>)</li>\n<li>add ObjectLiteral typing to andWhere / orWhere (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7786\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7786/hovercard\">#7786</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/525381d91e15d1d9b9dd7bd36beaac35646ee3b0\">525381d</a>)</li>\n<li>add parseTableName to Driver interface (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7956\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7956/hovercard\">#7956</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/cffbf43b291e59a45c5b8e3685a1d1153dfeaeb1\">cffbf43</a>)</li>\n<li>add path, database, and schema to Table (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7913\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7913/hovercard\">#7913</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/444e38bffd7f3ff962282d01bf980a554a94b3fa\">444e38b</a>)</li>\n<li>add property for database and schema in views (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7953\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7953/hovercard\">#7953</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/4c5bbd9e1c92219712efaff061d6501c473193dd\">4c5bbd9</a>)</li>\n<li>add referenced database &amp; schema to TableForeignKey (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/fff6b11cd3c369f9f95c99decba84213847e76e3\">fff6b11</a>)</li>\n<li>add writeConcern option as a possible <code>extras</code> for mongodb (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7801\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7801/hovercard\">#7801</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/90894c7fd39c5237ddb26690082ca4c2443b2fd4\">90894c7</a>)</li>\n<li>consistent parsing and escaping of table names in QueryRunners (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/bd9e767ffaafe9381630787fa860d0904b8d3e49\">bd9e767</a>)</li>\n<li>implement OracleQueryRunner.hasDatabase (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/128b9825f2b9fd81c4ee5ba36e554ef86eb64865\">128b982</a>)</li>\n<li>make parameter to getTables optional (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7901\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7901/hovercard\">#7901</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/ba866026ec7d0ce44f68f9b585bc094c82e32dcd\">ba86602</a>)</li>\n<li>make postgres extensions install optional (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7725\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7725/hovercard\">#7725</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/92b96a550512bb218e1c6691e2f5908007d0b6e6\">92b96a5</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7662\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7662/hovercard\">#7662</a></li>\n<li>publicly export <code>Transaction*Event</code> types (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7949\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7949/hovercard\">#7949</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/2436a66b499c81e1d2394b19f3b158258f31d899\">2436a66</a>), closes <a href=\"https://snyk.io/redirect/github//github.com/typeorm/typeorm/blob/master/src/subscriber/EntitySubscriberInterface.ts/issues/L12\">/github.com/typeorm/typeorm/blob/master/src/subscriber/EntitySubscriberInterface.ts#L12</a></li>\n<li>set <code>enableArithAbort</code> for SQLServerDriver (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7894\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7894/hovercard\">#7894</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/1f64da2c49b21b678a0f2faf0805dbeb763b0f4a\">1f64da2</a>)</li>\n<li>support absolute path in migration:generate (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7720\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7720/hovercard\">#7720</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/b690c270cd2e9886329e520cab5ee31eaeae77a4\">b690c27</a>)</li>\n<li>use char(36) for uuid representation in mysql (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7853\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7853/hovercard\">#7853</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/063aafa34408dd9b1ed3802bb43be6f772523277\">063aafa</a>)</li>\n<li>use column length from driver when creating columns (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7858\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7858/hovercard\">#7858</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/b107ad95164627b6e959b4e476eb82f3dded972c\">b107ad9</a>)</li>\n</ul>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases\">typeorm GitHub release notes</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI4NjlhOTU1MS02ZmYxLTRmZTUtYTljMi05OTBjZTMzOWY5ZDEiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6Ijg2OWE5NTUxLTZmZjEtNGZlNS1hOWMyLTk5MGNlMzM5ZjlkMSJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;typeorm&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"869a9551-6ff1-4fe5-a9c2-990ce339f9d1\",\"prPublicId\":\"869a9551-6ff1-4fe5-a9c2-990ce339f9d1\",\"dependencies\":[{\"name\":\"typeorm\",\"from\":\"0.2.35\",\"to\":\"0.2.36\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":6,\"publishedDate\":\"2021-07-31T01:27:30.054Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "0d474e6fb3642e676c95169dce7a82e08654428d",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/134",
      "updated_at": "2021-08-23T15:49:52Z",
      "title": "[Snyk] Upgrade joi from 17.4.1 to 17.4.2",
      "state": "closed",
      "number": 134,
      "merged_at": "2021-08-23T15:49:51Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9cdef87dc391410be8bc822eb109b4e4dc7926e3",
        "ref": "snyk-upgrade-d416f424b87d8312ff0c91d4869d82e0"
      },
      "created_at": "2021-08-23T06:31:21Z",
      "closed_at": "2021-08-23T15:49:51Z",
      "body": "<h3>Snyk has created this PR to upgrade joi from 17.4.1 to 17.4.2.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=joi&from_version=17.4.1&to_version=17.4.2&pr_id=3ac53038-4f7b-4641-97e3-a3a2c5a7247e&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **21 days ago**, on 2021-08-01.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>joi</b></summary>\n    <ul>\n      <li>\n        <b>17.4.2</b> - <a href=\"https://snyk.io/redirect/github/sideway/joi/releases/tag/v17.4.2\">2021-08-01</a></br><p>17.4.2</p>\n      </li>\n      <li>\n        <b>17.4.1</b> - <a href=\"https://snyk.io/redirect/github/sideway/joi/releases/tag/v17.4.1\">2021-07-11</a></br><p>17.4.1</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/sideway/joi/releases\">joi GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>joi</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/66065372198ddd3ac20df3ba960caba8f6e70522\">6606537</a> 17.4.2</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/ee490ad8c287bf80421795c490267f17c646eb31\">ee490ad</a> Merge pull request #2642 from sideway/fix/array-items-bug</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/4f64d658127c2d55752d9491b59dd8eba39db7e1\">4f64d65</a> Fix issue with only required items. Fixes #2620.</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/371cc32e03fde905d092c7ded7a4314ba8c472f9\">371cc32</a> Remove process and null-loader</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/39d314d7db11f9e71bbac7ee28fd04103a5474ff\">39d314d</a> Merge pull request #2624 from legendecas/webpack</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/fbfd5d53bdeee92168f59815b10904d6245fdbcf\">fbfd5d5</a> fixup! Fix Web Workers compatibility</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/4575a4f93f6f3d808b45e35cff4462f833a7e1f7\">4575a4f</a> Fix Web Workers compatibility</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/sideway/joi/compare/5f33cb61d3b29419e0724088cc87c0158fde9e51...66065372198ddd3ac20df3ba960caba8f6e70522\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIzYWM1MzAzOC00ZjdiLTQ2NDEtOTdlMy1hM2EyYzVhNzI0N2UiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjNhYzUzMDM4LTRmN2ItNDY0MS05N2UzLWEzYTJjNWE3MjQ3ZSJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;joi&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"3ac53038-4f7b-4641-97e3-a3a2c5a7247e\",\"prPublicId\":\"3ac53038-4f7b-4641-97e3-a3a2c5a7247e\",\"dependencies\":[{\"name\":\"joi\",\"from\":\"17.4.1\",\"to\":\"17.4.2\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-08-01T21:17:34.882Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "eef74f80b7e5d4ce77c52cf3a3148b9bfcbdf1a4",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/133",
      "updated_at": "2021-08-26T14:10:30Z",
      "title": "[IMERC-379] Accept segments for routes.",
      "state": "closed",
      "number": 133,
      "merged_at": "2021-08-26T14:10:29Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "d65d587408045d30766c41e7db54ceec6553d9c7",
        "ref": "feature/IMERC-379-refactor-segments"
      },
      "created_at": "2021-08-19T16:59:31Z",
      "closed_at": "2021-08-26T14:10:29Z",
      "body": "[IMERC-379](https://imercatus.backlog.com/view/IMERC-379)\r\n\r\n- Reworked database to represent routes as segments instead of points\r\n- Refactored optimization to function as a standalone service (no local updates of data...FE will handle that)",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "eef74f80b7e5d4ce77c52cf3a3148b9bfcbdf1a4",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 737477166,
        "path": "src/migrations/1629391456884-UpdateOptimizationRequests.ts",
        "id": 695039645,
        "diff_hunk": "@@ -0,0 +1,46 @@\n+import { MigrationInterface, QueryRunner, TableColumn } from 'typeorm';\n+\n+export class UpdateOptimizationRequests1629391456884\n+  implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.addColumns('optimization_requests', [\n+      new TableColumn({\n+        name: 'segment_id',\n+        type: 'varchar',",
        "created_at": "2021-08-24T17:03:14Z",
        "body": "would love to see `uuid` here instead of strings for stronger identity enforcement, better indexes, etc.\r\n\r\nI can create a task to capture this as tech debt unless there's a strong motivation for using varchar for ids?"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 737477166,
        "path": "src/route-planner/controllers/routes.controller.ts",
        "id": 695041570,
        "diff_hunk": "@@ -115,19 +114,14 @@ export class RoutesController {\n     @ScopedProject() project: Project,\n     @Param('id') id: number,\n   ): Promise<ResponseDTO<RouteDTO>> {\n-    const route = await this.routesService.findOne(project, user.profile, id);\n-    let pendingOptimization: OptimizationRequest = null;\n-\n-    if (route) {\n-      pendingOptimization = await this.optimizationsService.pendingForRoute(\n-        route,\n-        user.profile,\n-      );\n-    }\n+    const route = await this.routesService.findOne(\n+      project,\n+      user.profile,\n+      id,\n+      true, // Get the pending optimizations",
        "created_at": "2021-08-24T17:06:02Z",
        "body": "is this a refactor or are we replaying the changes to not mutating optimizations?"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 737477166,
        "path": "src/route-planner/dto/optimization-request-create.dto.ts",
        "id": 695043352,
        "diff_hunk": "@@ -3,5 +3,5 @@ import { OptimizationRequestDTO } from './optimization-request.dto';\n \n export class OptimizationRequestCreateDTO extends PickType(\n   OptimizationRequestDTO,\n-  [] as const,\n+  ['segmentId'] as const,\n ) {}",
        "created_at": "2021-08-24T17:08:33Z",
        "body": "TIL you can invoke type functions (generics) with function invocation syntax :exploding_head: \r\n```ts\r\ntype Foo<T> = 'foo' & T;\r\ntype Foobar = Foo('bar'); // this is legal!\r\n```"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 737477166,
        "path": "src/route-planner/dto/segment.dto.ts",
        "id": 695046304,
        "diff_hunk": "@@ -0,0 +1,40 @@\n+import { ApiProperty } from '@nestjs/swagger';\n+import {\n+  IsArray,\n+  IsNotEmpty,\n+  IsOptional,\n+  IsString,\n+  ValidateNested,\n+} from 'class-validator';\n+import { Expose, Type } from 'class-transformer';\n+import { Position } from 'geojson';\n+\n+import { UserDefinedPointDTO } from './user-defined-point.dto';\n+import { OptimizationRequest, Segment } from '../interfaces';\n+\n+export class SegmentDTO implements Segment {\n+  @Expose()\n+  @ApiProperty()\n+  @IsOptional()\n+  @IsString()\n+  id?: string;\n+\n+  @Expose()\n+  @ApiProperty()\n+  @IsArray()\n+  @IsNotEmpty()\n+  @ValidateNested()",
        "created_at": "2021-08-24T17:12:35Z",
        "body": "```suggestion\r\n  @ValidateNested({each: true})\r\n```"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 737477166,
        "path": "src/route-planner/route-planner.module.ts",
        "id": 695049766,
        "diff_hunk": "@@ -26,7 +26,7 @@ import {\n @Module({\n   imports: [\n     ConfigModule,\n-    HttpModule,\n+    HttpModule.register({ timeout: 30000 }),",
        "created_at": "2021-08-24T17:17:26Z",
        "body": "Axios' default is `timeout: 0`; no timeout, so we're adding a timeout where there wasn't before - is this intentional? I can imagine our UI may have been timing out before we get a response in which case this makes sense"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 737477166,
        "path": "src/route-planner/services/carto.service.ts",
        "id": 695050870,
        "diff_hunk": "@@ -33,80 +40,104 @@ export class CartoService {\n     const cartoConfig = this.config.get<CartoConfig>('carto');\n \n     const url = `${cartoConfig.host}/api/v1/auth/login`;\n-    const res = await this.http\n+    token = await this.http\n       .post(url, {\n         username: cartoConfig.username,\n         password: cartoConfig.password,\n       })\n-      .toPromise();\n+      .pipe(\n+        map((res) => res.data.token),\n+        catchError((e) => {\n+          throw new HttpException(e.response?.data, e.response?.status);\n+        }),\n+      )\n+      .toPromise()\n+      .catch((e) => {\n+        this.logger.warn(`Non-success on login to CARTO: ${e}`);\n+        return null;",
        "created_at": "2021-08-24T17:19:01Z",
        "body": "Should we 500 if we fail to authenticate?"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 737477166,
        "path": "src/route-planner/services/carto.service.ts",
        "id": 695052675,
        "diff_hunk": "@@ -33,80 +40,104 @@ export class CartoService {\n     const cartoConfig = this.config.get<CartoConfig>('carto');\n \n     const url = `${cartoConfig.host}/api/v1/auth/login`;\n-    const res = await this.http\n+    token = await this.http\n       .post(url, {\n         username: cartoConfig.username,\n         password: cartoConfig.password,\n       })\n-      .toPromise();\n+      .pipe(\n+        map((res) => res.data.token),\n+        catchError((e) => {\n+          throw new HttpException(e.response?.data, e.response?.status);\n+        }),\n+      )\n+      .toPromise()\n+      .catch((e) => {\n+        this.logger.warn(`Non-success on login to CARTO: ${e}`);\n+        return null;\n+      });\n \n-    if (res.status === 200) {\n-      token = res.data.token;\n+    if (token) {\n       await this.cacheManager.set(CARTO_TOKEN_CACHE_KEY, token);\n-    } else {\n-      token = null;\n     }\n \n     return token;\n   }\n \n-  public async optimize(route: Route): Promise<SegmentOptimization[]> {\n+  public async optimize(route: Route, segmentId: string): Promise<string> {\n     const cartoConfig = this.config.get<CartoConfig>('carto');\n     const token = await this.authenticate();\n \n     if (!token) {\n       return null;\n     }\n     const url = `${cartoConfig.host}/api/v1/routes`;\n+    const segment = route.segments.find((s) => s.id === segmentId);\n \n-    return Promise.all(\n-      route.segments\n-        .filter((s) => !s.optimizedPoints || s.optimizedPoints?.length === 0)\n-        .map(async (s) => {\n-          const res = await this.http\n-            .post(\n-              url,\n-              {\n-                origin: {\n-                  long: s.origin[0],\n-                  lat: s.origin[1],\n-                },\n-                destination: {\n-                  long: s.destination[0],\n-                  lat: s.destination[1],\n-                },\n-                properties: {},\n-              },\n-              {\n-                headers: {\n-                  'Content-Type': 'application/json',\n-                  Accept: 'application/json',\n-                  Authorization: `Bearer ${token}`,\n-                },\n-              },\n-            )\n-            .toPromise();\n-\n-          if (res.status === 201) {\n-            const jobId = res.data.job_id;\n-            return {\n-              segmentId: s.id,\n-              jobId,\n-              status: OptimizationStatus.PENDING,\n-              data: res.data,\n-            };\n-          }\n+    if (!segment) {\n+      return null;\n+    }\n \n-          return null;\n+    const origin = segment.userDefinedPoints[0];\n+    const destination =\n+      segment.userDefinedPoints[segment.userDefinedPoints.length - 1];\n+\n+    const data = await this.http\n+      .post(\n+        url,\n+        {\n+          origin: {\n+            long: origin.coordinates[0],\n+            lat: origin.coordinates[1],\n+          },\n+          destination: {\n+            long: destination.coordinates[0],\n+            lat: destination.coordinates[1],\n+          },\n+          properties: {},\n+        },\n+        {\n+          headers: {\n+            'Content-Type': 'application/json',\n+            Accept: 'application/json',\n+            Authorization: `Bearer ${token}`,\n+          },\n+        },\n+      )",
        "created_at": "2021-08-24T17:21:41Z",
        "body": "minor code reuse\r\n\r\n```suggestion\r\n    const cartoCoords = ({coordinates}) => ({long: coordinates[0], lat: coordinates[1]});\r\n    const data = await this.http\r\n      .post(\r\n        url,\r\n        {\r\n          origin: cartoCoords(origin),\r\n          destination: cartoCoords(destination),\r\n          properties: {},\r\n        },\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        },\r\n      )\r\n```"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 737477166,
        "path": "src/route-planner/services/carto.service.ts",
        "id": 695055068,
        "diff_hunk": "@@ -33,80 +40,104 @@ export class CartoService {\n     const cartoConfig = this.config.get<CartoConfig>('carto');\n \n     const url = `${cartoConfig.host}/api/v1/auth/login`;\n-    const res = await this.http\n+    token = await this.http\n       .post(url, {\n         username: cartoConfig.username,\n         password: cartoConfig.password,\n       })\n-      .toPromise();\n+      .pipe(\n+        map((res) => res.data.token),\n+        catchError((e) => {\n+          throw new HttpException(e.response?.data, e.response?.status);\n+        }),\n+      )\n+      .toPromise()\n+      .catch((e) => {\n+        this.logger.warn(`Non-success on login to CARTO: ${e}`);\n+        return null;\n+      });\n \n-    if (res.status === 200) {\n-      token = res.data.token;\n+    if (token) {\n       await this.cacheManager.set(CARTO_TOKEN_CACHE_KEY, token);\n-    } else {\n-      token = null;\n     }\n \n     return token;\n   }\n ",
        "created_at": "2021-08-24T17:24:53Z",
        "body": "minor code reuse\r\n\r\ncould replace some `this.authenticate()` and header record boilerplate\r\n\r\n```suggestion\r\n  private async headers(): Record<string, string> {\r\n    const token = await this.authenticate();\r\n    if (!token) {\r\n      return null;\r\n    }\r\n    \r\n    return {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n      'Authorization': `Bearer ${token}`,\r\n    };\r\n  }\r\n```"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 737561524,
        "path": "src/route-planner/route-planner.module.ts",
        "in_reply_to_id": 695049766,
        "id": 695104380,
        "diff_hunk": "@@ -26,7 +26,7 @@ import {\n @Module({\n   imports: [\n     ConfigModule,\n-    HttpModule,\n+    HttpModule.register({ timeout: 30000 }),",
        "created_at": "2021-08-24T18:34:54Z",
        "body": "This must have snuck in yesterday during the massive WTFCARTO episode.  I'll remove it."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 737564967,
        "path": "src/migrations/1629391456884-UpdateOptimizationRequests.ts",
        "in_reply_to_id": 695039645,
        "id": 695107237,
        "diff_hunk": "@@ -0,0 +1,46 @@\n+import { MigrationInterface, QueryRunner, TableColumn } from 'typeorm';\n+\n+export class UpdateOptimizationRequests1629391456884\n+  implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.addColumns('optimization_requests', [\n+      new TableColumn({\n+        name: 'segment_id',\n+        type: 'varchar',",
        "created_at": "2021-08-24T18:38:36Z",
        "body": "Please do, because there are several other spots in the app where `nanoid()` is used to generate an id, and stored in a varchar field."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 737565235,
        "path": "src/route-planner/dto/optimization-request-create.dto.ts",
        "in_reply_to_id": 695043352,
        "id": 695107415,
        "diff_hunk": "@@ -3,5 +3,5 @@ import { OptimizationRequestDTO } from './optimization-request.dto';\n \n export class OptimizationRequestCreateDTO extends PickType(\n   OptimizationRequestDTO,\n-  [] as const,\n+  ['segmentId'] as const,\n ) {}",
        "created_at": "2021-08-24T18:38:55Z",
        "body": "Either I'm dense, or I'm missing how that would apply here."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 737575317,
        "path": "src/route-planner/services/carto.service.ts",
        "in_reply_to_id": 695050870,
        "id": 695115633,
        "diff_hunk": "@@ -33,80 +40,104 @@ export class CartoService {\n     const cartoConfig = this.config.get<CartoConfig>('carto');\n \n     const url = `${cartoConfig.host}/api/v1/auth/login`;\n-    const res = await this.http\n+    token = await this.http\n       .post(url, {\n         username: cartoConfig.username,\n         password: cartoConfig.password,\n       })\n-      .toPromise();\n+      .pipe(\n+        map((res) => res.data.token),\n+        catchError((e) => {\n+          throw new HttpException(e.response?.data, e.response?.status);\n+        }),\n+      )\n+      .toPromise()\n+      .catch((e) => {\n+        this.logger.warn(`Non-success on login to CARTO: ${e}`);\n+        return null;",
        "created_at": "2021-08-24T18:50:34Z",
        "body": "Possibly.  I'd propose we revisit this as a more holistic task, because there is a lot of room for improvement in our error handling overall (not just in the route planner), and I'd prefer to tackle it all at once so there's cohesion."
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 737592991,
        "path": "src/route-planner/dto/optimization-request-create.dto.ts",
        "in_reply_to_id": 695043352,
        "id": 695129404,
        "diff_hunk": "@@ -3,5 +3,5 @@ import { OptimizationRequestDTO } from './optimization-request.dto';\n \n export class OptimizationRequestCreateDTO extends PickType(\n   OptimizationRequestDTO,\n-  [] as const,\n+  ['segmentId'] as const,\n ) {}",
        "created_at": "2021-08-24T19:10:54Z",
        "body": "You're calling PickType here with parens, not alligators"
      },
      {
        "user": {
          "login": "cakekindel",
          "html_url": "https://github.com/cakekindel"
        },
        "pull_request_review_id": 737593264,
        "path": "src/route-planner/dto/optimization-request-create.dto.ts",
        "in_reply_to_id": 695043352,
        "id": 695129608,
        "diff_hunk": "@@ -3,5 +3,5 @@ import { OptimizationRequestDTO } from './optimization-request.dto';\n \n export class OptimizationRequestCreateDTO extends PickType(\n   OptimizationRequestDTO,\n-  [] as const,\n+  ['segmentId'] as const,\n ) {}",
        "created_at": "2021-08-24T19:11:12Z",
        "body": "Unless that's an expression and not a type which would be weird"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 738162086,
        "path": "src/route-planner/dto/optimization-request-create.dto.ts",
        "in_reply_to_id": 695043352,
        "id": 695606143,
        "diff_hunk": "@@ -3,5 +3,5 @@ import { OptimizationRequestDTO } from './optimization-request.dto';\n \n export class OptimizationRequestCreateDTO extends PickType(\n   OptimizationRequestDTO,\n-  [] as const,\n+  ['segmentId'] as const,\n ) {}",
        "created_at": "2021-08-25T10:13:03Z",
        "body": "It's a NestJS expression: https://docs.nestjs.com/openapi/mapped-types#pick"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/132",
      "updated_at": "2021-08-23T15:51:27Z",
      "title": "[Snyk] Upgrade typeorm from 0.2.34 to 0.2.35",
      "state": "closed",
      "number": 132,
      "merged_at": "2021-08-23T15:51:26Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "3a939798ee9b6ebfb163f13d8bdee9fad8b82b79",
        "ref": "snyk-upgrade-908fa9abd13eb90ac1f60149074a2907"
      },
      "created_at": "2021-08-19T07:13:40Z",
      "closed_at": "2021-08-23T15:51:26Z",
      "body": "<h3>Snyk has created this PR to upgrade typeorm from 0.2.34 to 0.2.35.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=typeorm&from_version=0.2.34&to_version=0.2.35&pr_id=b4d162ef-f94d-4b91-b018-e21a90b00ced&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **2 versions** ahead of your current version.\n- The recommended version was released **21 days ago**, on 2021-07-29.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>typeorm</b></summary>\n    <ul>\n      <li>\n        <b>0.2.35</b> - <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases/tag/0.2.35\">2021-07-29</a></br><h3>Bug Fixes</h3>\n<ul>\n<li><code>entity</code> to be <code>Partial&lt;Entity&gt;</code> | <code>undefined</code> in <code>UpdateEvent</code> (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7783\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7783/hovercard\">#7783</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/f033045dd6d1dac4f6f7e528997a2c5f8892d763\">f033045</a>)</li>\n<li>actually return a working ReadStream from SQL Server query runner (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7893\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7893/hovercard\">#7893</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/e80985fabbafcb4f5409d72840c3902e1619b8a6\">e80985f</a>)</li>\n<li>added version check before dropping materialized views to keep backward compatibility (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7716\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7716/hovercard\">#7716</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/29f1f86ae2a2dafd70fd958b1980b9f059f42f7a\">29f1f86</a>)</li>\n<li>allow for string id in mongo.findByIds call (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7838\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7838/hovercard\">#7838</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/4b45ae1e8174cf438f9fca92c635957513bff8f8\">4b45ae1</a>)</li>\n<li>better support of relation-based properties in where clauses (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7805\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7805/hovercard\">#7805</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/3221c50d878505b1b8435b07451ec94cd8d04fce\">3221c50</a>)</li>\n<li>Buffer in primary columns causes bugs with relations (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7952\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7952/hovercard\">#7952</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/37e08a7848a92cd4f98fec8f33f120cee739352f\">37e08a7</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/4060\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/4060/hovercard\">#4060</a></li>\n<li>capacitor does not correctly set journal mode (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7873\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7873/hovercard\">#7873</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/5f20eb791a3c51410d6759548ec11c9a919659ff\">5f20eb7</a>)</li>\n<li>Capacitor driver PRAGMA requests failing on Android (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7728\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7728/hovercard\">#7728</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/9620a26c4eeb34baddce3a841ffd686d82cd87af\">9620a26</a>)</li>\n<li>condition is optional in SelectQueryBuilder joins (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7888\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7888/hovercard\">#7888</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/2deaa0e948d7b797c0e4d3ccbc3c9c2f0f253caf\">2deaa0e</a>)</li>\n<li>correctly handle mongo replica set driver option (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7908\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7908/hovercard\">#7908</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/9212df45e3899370efdf9ec67f1a6418ce4ac838\">9212df4</a>)</li>\n<li>correctly load yml in ConnectionOptionsYmlReader (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7743\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7743/hovercard\">#7743</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/57f9254499ef07500f5e59df20e778ee0f27b9aa\">57f9254</a>)</li>\n<li>craft oracle connectString as a descriptor with SID (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7878\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7878/hovercard\">#7878</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/b05d0936ddabae179a42c9c0f67779a6bec3d5b1\">b05d093</a>)</li>\n<li>delete operation in MongoDB impact all matched documents (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7811\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7811/hovercard\">#7811</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/0fbae53bdd83f5da94ac8a468e1506c2852eed02\">0fbae53</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7809\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7809/hovercard\">#7809</a></li>\n<li>Do not add NULL/NOT NULL for stored columns (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7708\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7708/hovercard\">#7708</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/3c33e9f54541a12b0d0fd37177c6afebf7a5349f\">3c33e9f</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7698\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7698/hovercard\">#7698</a></li>\n<li>do OBJECT_ID lookup for column constraint instead of name in mssql (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7916\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7916/hovercard\">#7916</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/fa8c1b088a9a6a2a1ffaec1b1a681be99cf2db3c\">fa8c1b0</a>)</li>\n<li>drop pool.autostart from mssql options because it's unused (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7877\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7877/hovercard\">#7877</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/0d21a4d07ec275a295df6f78b85c4814c027258a\">0d21a4d</a>)</li>\n<li>drop SAP statement after <code>prepare</code> per Hana client docs (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7748\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7748/hovercard\">#7748</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/8ca05b11db3ba083c7395cca09a4aa98c70e3d8f\">8ca05b1</a>)</li>\n<li>eager relation respects children relations (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/5685\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/5685/hovercard\">#5685</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/e7e887a582cce66bd21044472f4a5288894650c9\">e7e887a</a>)</li>\n<li>enable returning additional columns with MSSQL (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7864\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7864/hovercard\">#7864</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/e1db48d8391728455744c91ea7976a334300f77d\">e1db48d</a>)</li>\n<li>entity object undefined in <code>afterUpdate</code> subscriber (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7724\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7724/hovercard\">#7724</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/d25304d9e319157c6b8999932fb9144a67bd84cf\">d25304d</a>)</li>\n<li>find operation in MongoDB do not include nullable values from documents (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7820\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7820/hovercard\">#7820</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/98c13cf710de83783bc5b5576a64327b26d26262\">98c13cf</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7760\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7760/hovercard\">#7760</a></li>\n<li>fix table loading when schemas are used (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/3a106a3cca223dadca58af1244c6dda79c60b43c\">3a106a3</a>)</li>\n<li>foreign keys in SAP were loading from the wrong table (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7914\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7914/hovercard\">#7914</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/4777a795210c3a93a4171a17dbdce248e25b21da\">4777a79</a>)</li>\n<li>handle postgres default when tableColumn.default is not string (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7816\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7816/hovercard\">#7816</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/0463855223100028e62f7cb2e84319770f54449e\">0463855</a>)</li>\n<li>handle snake case of ABcD which should become a_bc_d (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7883\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7883/hovercard\">#7883</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/eb680f99b74c335556d23016264fcf1ea6ce1d6f\">eb680f9</a>)</li>\n<li>improve query for MSSQL to fetch foreign keys and tables (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7935\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7935/hovercard\">#7935</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/f6af01ad1b20ce67dc03448f050de3127227758c\">f6af01a</a>)</li>\n<li>make <code>OracleQueryRunner</code> createDatabase if-not-exists not fail (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/f5a80ef3df82120fee8f68e02f320dacbc856607\">f5a80ef</a>)</li>\n<li>only pass <code>data</code> from SaveOptions during that query (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7886\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7886/hovercard\">#7886</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/1de2e13cfe442af99c2cf017f48127e1de3a08d9\">1de2e13</a>)</li>\n<li>oracle cannot support DB in table identifiers (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7954\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7954/hovercard\">#7954</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/8c60d917ef5fbfdc11b7c3ad8e2901eba3f9fa4b\">8c60d91</a>)</li>\n<li>pass table to namingstrategy when we can instead of table name (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7925\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7925/hovercard\">#7925</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/140002d1ebc4837071dab83a7bb164a02a7a2732\">140002d</a>)</li>\n<li>prevent modification of the FindOptions.relations (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7887\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7887/hovercard\">#7887</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/a2fcad6ef963c3e444765d6a7b4fa1e0e89a72e6\">a2fcad6</a>)</li>\n<li>prevent reuse of broken connections in postgres pool (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7792\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7792/hovercard\">#7792</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/5cf368a23fa78b9e97dd12b54616f17b8431ffee\">5cf368a</a>)</li>\n<li>prevent transactions in the Cordova driver (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7771\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7771/hovercard\">#7771</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/fc4133cf621874c616bf7643c79112b9f68a1e09\">fc4133c</a>)</li>\n<li>properly escape oracle table paths (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7917\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7917/hovercard\">#7917</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/7e8687c45283cdb2caffa53ed5ebab527797c3e8\">7e8687c</a>)</li>\n<li>regression when making <code>join</code> conditions <code>undefined</code>-able (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7892\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7892/hovercard\">#7892</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/b0c1cc6d6820e93bc7b986d4f18db4020195e170\">b0c1cc6</a>)</li>\n<li>restored <code>buildColumnAlias</code> for backward compatibility (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7706\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7706/hovercard\">#7706</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/36ceefa710c0994e054c8e267a1fb1bdf4b25c39\">36ceefa</a>)</li>\n<li>return correct DeleteResult and UpdateResult for mongo (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7884\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7884/hovercard\">#7884</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/7a646a212815e6b9c2dda752442075624f9f552d\">7a646a2</a>)</li>\n<li>support fully qualified schema in createSchema (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7934\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7934/hovercard\">#7934</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/94edd12ca450d4dbcd2e4902e1009fcd27136490\">94edd12</a>)</li>\n<li>support table names between schemas in oracle (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7951\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7951/hovercard\">#7951</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/aa45b935ff33915a86199307c86aabf904d67e28\">aa45b93</a>)</li>\n<li>typing so SelectQueryBuilder.getRawOne may return undefined (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7863\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7863/hovercard\">#7863</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/36e5a0cf09a25dfe98ffa130f35005a8eacc4155\">36e5a0c</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7449\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7449/hovercard\">#7449</a></li>\n<li>typo prevented us from pulling the schema correctly in some cases (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/c7f2db8d6999b990308787681a2767e41ad2bdd6\">c7f2db8</a>)</li>\n<li>update operation in MongoDB impact all matched documents (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7803\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7803/hovercard\">#7803</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/052014cdba844b1a7867f46606045a494cffc907\">052014c</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7788\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7788/hovercard\">#7788</a></li>\n<li>use correct query for cross-database mssql identity check (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7911\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7911/hovercard\">#7911</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/7869fb143c2b3ec019507a79e80eb2e29c270338\">7869fb1</a>)</li>\n<li>use fully qualified and escaped table names for oracle (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7857\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7857/hovercard\">#7857</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/2b90725a080c7ea9140464a68c8c8c9475fd73f9\">2b90725</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7779\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7779/hovercard\">#7779</a></li>\n<li>use ObjectLiteral in UpdateEvent rather than <code>Entity</code> (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7910\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7910/hovercard\">#7910</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/78fbc14b3ee915ce035cb1546c92142eab6a899e\">78fbc14</a>)</li>\n<li>use only table name in constraint naming strategy (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/5dc777f17ec238c3f3303aa9379fe855727220b1\">5dc777f</a>)</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>add <code>retryWrites</code> to allowed mongo <code>extra</code> options (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7869\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7869/hovercard\">#7869</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/dcdaacacaf122c7579d31a700e93c5357a9e0a16\">dcdaaca</a>)</li>\n<li>add capacitor driver options for encryption &amp; version (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7868\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7868/hovercard\">#7868</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/a2bd94b146738a2aa637f52011c1fd5e92ed38e1\">a2bd94b</a>)</li>\n<li>add connection option <code>entitySkipConstructor</code> (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/f43d56110fd41c23d80e32021adf4ade7648ce97\">f43d561</a>)</li>\n<li>add ObjectLiteral typing to andWhere / orWhere (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7786\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7786/hovercard\">#7786</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/525381d91e15d1d9b9dd7bd36beaac35646ee3b0\">525381d</a>)</li>\n<li>add parseTableName to Driver interface (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7956\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7956/hovercard\">#7956</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/cffbf43b291e59a45c5b8e3685a1d1153dfeaeb1\">cffbf43</a>)</li>\n<li>add path, database, and schema to Table (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7913\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7913/hovercard\">#7913</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/444e38bffd7f3ff962282d01bf980a554a94b3fa\">444e38b</a>)</li>\n<li>add property for database and schema in views (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7953\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7953/hovercard\">#7953</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/4c5bbd9e1c92219712efaff061d6501c473193dd\">4c5bbd9</a>)</li>\n<li>add referenced database &amp; schema to TableForeignKey (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/fff6b11cd3c369f9f95c99decba84213847e76e3\">fff6b11</a>)</li>\n<li>add writeConcern option as a possible <code>extras</code> for mongodb (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7801\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7801/hovercard\">#7801</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/90894c7fd39c5237ddb26690082ca4c2443b2fd4\">90894c7</a>)</li>\n<li>consistent parsing and escaping of table names in QueryRunners (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/bd9e767ffaafe9381630787fa860d0904b8d3e49\">bd9e767</a>)</li>\n<li>implement OracleQueryRunner.hasDatabase (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/128b9825f2b9fd81c4ee5ba36e554ef86eb64865\">128b982</a>)</li>\n<li>make parameter to getTables optional (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7901\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7901/hovercard\">#7901</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/ba866026ec7d0ce44f68f9b585bc094c82e32dcd\">ba86602</a>)</li>\n<li>make postgres extensions install optional (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7725\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7725/hovercard\">#7725</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/92b96a550512bb218e1c6691e2f5908007d0b6e6\">92b96a5</a>), closes <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7662\" data-hovercard-type=\"issue\" data-hovercard-url=\"/typeorm/typeorm/issues/7662/hovercard\">#7662</a></li>\n<li>publicly export <code>Transaction*Event</code> types (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7949\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7949/hovercard\">#7949</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/2436a66b499c81e1d2394b19f3b158258f31d899\">2436a66</a>), closes <a href=\"https://snyk.io/redirect/github//github.com/typeorm/typeorm/blob/master/src/subscriber/EntitySubscriberInterface.ts/issues/L12\">/github.com/typeorm/typeorm/blob/master/src/subscriber/EntitySubscriberInterface.ts#L12</a></li>\n<li>set <code>enableArithAbort</code> for SQLServerDriver (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7894\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7894/hovercard\">#7894</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/1f64da2c49b21b678a0f2faf0805dbeb763b0f4a\">1f64da2</a>)</li>\n<li>support absolute path in migration:generate (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7720\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7720/hovercard\">#7720</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/b690c270cd2e9886329e520cab5ee31eaeae77a4\">b690c27</a>)</li>\n<li>use char(36) for uuid representation in mysql (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7853\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7853/hovercard\">#7853</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/063aafa34408dd9b1ed3802bb43be6f772523277\">063aafa</a>)</li>\n<li>use column length from driver when creating columns (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/issues/7858\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/typeorm/typeorm/pull/7858/hovercard\">#7858</a>) (<a href=\"https://snyk.io/redirect/github/typeorm/typeorm/commit/b107ad95164627b6e959b4e476eb82f3dded972c\">b107ad9</a>)</li>\n</ul>\n      </li>\n      <li>\n        <b>0.2.35-rc.0</b> - 2021-07-28\n      </li>\n      <li>\n        <b>0.2.34</b> - <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases/tag/0.2.34\">2021-06-03</a></br><p>version bump</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases\">typeorm GitHub release notes</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJiNGQxNjJlZi1mOTRkLTRiOTEtYjAxOC1lMjFhOTBiMDBjZWQiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImI0ZDE2MmVmLWY5NGQtNGI5MS1iMDE4LWUyMWE5MGIwMGNlZCJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;typeorm&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"b4d162ef-f94d-4b91-b018-e21a90b00ced\",\"prPublicId\":\"b4d162ef-f94d-4b91-b018-e21a90b00ced\",\"dependencies\":[{\"name\":\"typeorm\",\"from\":\"0.2.34\",\"to\":\"0.2.35\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":2,\"publishedDate\":\"2021-07-29T03:03:10.245Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "eef74f80b7e5d4ce77c52cf3a3148b9bfcbdf1a4",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/131",
      "updated_at": "2021-08-23T15:52:42Z",
      "title": "[Snyk] Upgrade pg from 8.6.0 to 8.7.1",
      "state": "closed",
      "number": 131,
      "merged_at": "2021-08-23T15:52:41Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "692dfb524a9ed3163ff59f0c81af5882ce8ca479",
        "ref": "snyk-upgrade-205b909e0de7fdd25acf2163e8e8508a"
      },
      "created_at": "2021-08-19T07:13:35Z",
      "closed_at": "2021-08-23T15:52:41Z",
      "body": "<h3>Snyk has created this PR to upgrade pg from 8.6.0 to 8.7.1.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=pg&from_version=8.6.0&to_version=8.7.1&pr_id=bd9e0af4-7ded-400b-aefd-8193d3becd44&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **2 versions** ahead of your current version.\n- The recommended version was released **22 days ago**, on 2021-07-27.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>pg</b></summary>\n    <ul>\n      <li>\n        <b>8.7.1</b> - <a href=\"https://snyk.io/redirect/github/brianc/node-postgres/releases/tag/pg%408.7.1\">2021-07-27</a></br><p>pg@8.7.1</p>\n      </li>\n      <li>\n        <b>8.7.0</b> - <a href=\"https://snyk.io/redirect/github/brianc/node-postgres/releases/tag/pg%408.7.0\">2021-07-27</a></br><p>pg@8.7.0</p>\n      </li>\n      <li>\n        <b>8.6.0</b> - <a href=\"https://snyk.io/redirect/github/brianc/node-postgres/releases/tag/pg%408.6.0\">2021-04-13</a></br><p>pg@8.6.0</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/brianc/node-postgres/releases\">pg GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>pg</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/92b4d37926c276d343bfe56447ff6f526af757cf\">92b4d37</a> Publish</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/86d31a6fad6ee05facd85bc5f83ca081ebe725b7\">86d31a6</a> Only call client.ref if it exists</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/f3b0ee4c09cd01e37baf580d72dffc43edcc29f3\">f3b0ee4</a> Publish</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/779803fbce195ae5610761606dcdcd78ca4cd439\">779803f</a> Add ref/unref noop to native client (#2581)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/0da7882f45d0c63d4bb310c7d137434ef4b22d18\">0da7882</a> Bump y18n from 4.0.0 to 4.0.1 (#2506)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/83aae778e8dcb3fb35a84de6667e21e0c8276a99\">83aae77</a> Bump ssri from 6.0.1 to 6.0.2 (#2531)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/d8ce457e83146a960fee9328789142327b0c8f70\">d8ce457</a> Bump handlebars from 4.7.6 to 4.7.7 (#2538)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/f824d74afe99b21de2681cd665e4cee74e769960\">f824d74</a> Update changelog</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/684cd09bcecbf5ad5f451fdf608a3e9a9444524e\">684cd09</a> Allow Node to exit if the pool is idle (#2568)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/aedaa59afe6028fb1a13187695325e8dbacb2c30\">aedaa59</a> Add support for using promises in Cursor methods (#2554)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/9d2c977ce9b13f8f3b024759b1deaec165564a6a\">9d2c977</a> Use _isFull instead of duplicating clients check (#2539)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/a04003164b788c66d884661b445b6ad5a41ef92b\">a040031</a> Turn Cursor into an ES6 class (#2553)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/d6ed9e756ef689dbffce1de56cc95c7828fc2b2d\">d6ed9e7</a> Bump lodash from 4.17.20 to 4.17.21 (#2540)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/7667e7c9e730f6bf9e23682cfbd653674f040a67\">7667e7c</a> Fix and enable pool &#x60;verify&#x60; option test (#2528)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/8f0db306d9676dd89aeb4b044f5e6402a85da2f0\">8f0db30</a> Remove broken test (#2529)</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/brianc/node-postgres/compare/d45947938263bec30a1e3252452f04177b785f66...92b4d37926c276d343bfe56447ff6f526af757cf\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJiZDllMGFmNC03ZGVkLTQwMGItYWVmZC04MTkzZDNiZWNkNDQiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImJkOWUwYWY0LTdkZWQtNDAwYi1hZWZkLTgxOTNkM2JlY2Q0NCJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;pg&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"bd9e0af4-7ded-400b-aefd-8193d3becd44\",\"prPublicId\":\"bd9e0af4-7ded-400b-aefd-8193d3becd44\",\"dependencies\":[{\"name\":\"pg\",\"from\":\"8.6.0\",\"to\":\"8.7.1\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":2,\"publishedDate\":\"2021-07-27T22:34:02.206Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "eef74f80b7e5d4ce77c52cf3a3148b9bfcbdf1a4",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/130",
      "updated_at": "2021-08-23T15:58:37Z",
      "title": "[IMERC-364] Re-use optimized points when subdividing a route.",
      "state": "closed",
      "number": 130,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "cc44a25cb41c19a2c6dcc901c12f7371ac1e5006",
        "ref": "IMERC-364-manual-routes"
      },
      "created_at": "2021-08-10T16:55:09Z",
      "closed_at": "2021-08-23T15:53:06Z",
      "body": "[IMERC-364](https://imercatus.backlog.com/view/IMERC-364)\r\n\r\nHijacked `generateSegments()`, which is called on every update.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "eef74f80b7e5d4ce77c52cf3a3148b9bfcbdf1a4",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/129",
      "updated_at": "2021-08-06T10:27:08Z",
      "title": "[Snyk] Upgrade nodemailer from 6.6.2 to 6.6.3",
      "state": "closed",
      "number": 129,
      "merged_at": "2021-08-06T10:27:07Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "23939ad2d89dff77585fb3019adc07e9e9e4e271",
        "ref": "snyk-upgrade-9fe0c1206195c88ab71a835972129c06"
      },
      "created_at": "2021-08-05T08:16:44Z",
      "closed_at": "2021-08-06T10:27:07Z",
      "body": "<h3>Snyk has created this PR to upgrade nodemailer from 6.6.2 to 6.6.3.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=nodemailer&from_version=6.6.2&to_version=6.6.3&pr_id=eb3c2f0a-01e4-4997-8535-e01f6ca67b1c&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **22 days ago**, on 2021-07-14.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>nodemailer</b></summary>\n    <ul>\n      <li>\n        <b>6.6.3</b> - <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases/tag/v6.6.3\">2021-07-14</a></br><p>v6.6.3</p>\n      </li>\n      <li>\n        <b>6.6.2</b> - 2021-06-18\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases\">nodemailer GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>nodemailer</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/fed2ebd5dc68094ea843d7a51c1c27527ac25626\">fed2ebd</a> v6.6.3</li>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/b71e63ed2f8071a7800e982a3f1e1f2e07eea94f\">b71e63e</a> v6.6.3</li>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/cc4601c4d95c5bbe74a02afd60c53ad55483c97e\">cc4601c</a> Updated SES example</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/compare/b75e539d71daa0b40248273e0e1d328c1e262bdd...fed2ebd5dc68094ea843d7a51c1c27527ac25626\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJlYjNjMmYwYS0wMWU0LTQ5OTctODUzNS1lMDFmNmNhNjdiMWMiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImViM2MyZjBhLTAxZTQtNDk5Ny04NTM1LWUwMWY2Y2E2N2IxYyJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;nodemailer&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"eb3c2f0a-01e4-4997-8535-e01f6ca67b1c\",\"prPublicId\":\"eb3c2f0a-01e4-4997-8535-e01f6ca67b1c\",\"dependencies\":[{\"name\":\"nodemailer\",\"from\":\"6.6.2\",\"to\":\"6.6.3\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-07-14T10:24:17.419Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "a9e468eb32370530bb9869f1b3dfa7dd792e2a1e",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/128",
      "updated_at": "2021-08-09T11:24:18Z",
      "title": "[IMERC-391] Add the ability to associate files with a project.",
      "state": "closed",
      "number": 128,
      "merged_at": "2021-08-09T11:24:18Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "01f3082df92319e6786e6c4c866f1627026825e9",
        "ref": "feature/IMERC-391-files"
      },
      "created_at": "2021-08-04T14:40:21Z",
      "closed_at": "2021-08-09T11:24:18Z",
      "body": "[IMERC-391](https://imercatus.backlog.com/view/IMERC-391).\r\n\r\n`POST /projects/1/files`\r\n\r\n```typescript\r\n{\r\n   url: 'https://s3.amazon.com/file.doc'\r\n}\r\n```\r\n\r\nDue to naming collisions with NestJS/Node, internally the resource has to be known as `s3file` (and camel-case friends).  I kept the `/files` path fragment because its easier to remember for the FE.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "a9e468eb32370530bb9869f1b3dfa7dd792e2a1e",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 722483968,
        "path": "test/e2e/s3-files.e2e-spec.ts",
        "id": 682765959,
        "diff_hunk": "@@ -0,0 +1,259 @@\n+import { INestApplication } from '@nestjs/common';\n+import * as request from 'supertest';\n+\n+import { Company, User, UserProfile } from '@/identity/interfaces';\n+\n+import { Project, S3File } from '@/projects/interfaces';\n+\n+import factories from '@/test/factories';\n+import { initTestingModule, TestDBManager, TestingContext } from '@/test/utils';\n+\n+type Callback = (res: request.Response) => void;\n+\n+describe('S3FilesController (e2e)', () => {\n+  let context: TestingContext;\n+  let app: INestApplication;\n+  let http: any;\n+  let accessToken: string;\n+  let userProfile: UserProfile;\n+  let dbManager: TestDBManager;\n+  // let response: request.Response;",
        "created_at": "2021-08-04T16:16:40Z",
        "body": "‚úÇÔ∏è "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 723719471,
        "path": "src/projects/dto/s3-file.dto.ts",
        "id": 683728825,
        "diff_hunk": "@@ -11,12 +15,18 @@ export class S3FileDTO implements S3File {\n \n   @Expose()\n   @ApiProperty()\n+  @IsNotEmpty()\n+  @MaxLength(200)",
        "created_at": "2021-08-05T19:25:44Z",
        "body": "Thoughts on using @IsURL?\r\nhttps://github.com/typestack/class-validator/blob/615931e2903cbd680bd8fe2256e8d37dd20aeb37/src/decorator/string/IsUrl.ts"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 724211939,
        "path": "src/projects/dto/s3-file.dto.ts",
        "in_reply_to_id": 683728825,
        "id": 684124669,
        "diff_hunk": "@@ -11,12 +15,18 @@ export class S3FileDTO implements S3File {\n \n   @Expose()\n   @ApiProperty()\n+  @IsNotEmpty()\n+  @MaxLength(200)",
        "created_at": "2021-08-06T10:18:48Z",
        "body": "Not sure what's up with Github here.  Might have been my force-pushes after rebasing `qa`.  You can check the changes...I've switched `IsNotEmpty` for `IsUrl`.  I kept the length check for safety."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 724618900,
        "path": "src/projects/dto/s3-file.dto.ts",
        "in_reply_to_id": 683728825,
        "id": 684432615,
        "diff_hunk": "@@ -11,12 +15,18 @@ export class S3FileDTO implements S3File {\n \n   @Expose()\n   @ApiProperty()\n+  @IsNotEmpty()\n+  @MaxLength(200)",
        "created_at": "2021-08-06T18:36:37Z",
        "body": "It seems to cache much harder lately. I see it now though."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/127",
      "updated_at": "2021-08-04T19:50:24Z",
      "title": "[IMERC-386] Include pending optimization in route/lateral response.",
      "state": "closed",
      "number": 127,
      "merged_at": "2021-08-04T19:50:24Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "d200dded5bc56cae2ae20d10553e93138f418d3d",
        "ref": "feature/IMERC-386-optimization-id"
      },
      "created_at": "2021-08-03T17:06:22Z",
      "closed_at": "2021-08-04T19:50:24Z",
      "body": "[IMERC-386](https://imercatus.backlog.com/view/IMERC-386)\r\n\r\nIncludes a pending optimization (if one exists) in the response to the `#show` action for routes.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ed4b575b52896b0f6f6b8f53b0f139ed81666002",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 721666084,
        "path": "test/route-planner/services/optimization-requests.service.spec.ts",
        "id": 682118037,
        "diff_hunk": "@@ -487,4 +487,87 @@ describe('OptimizationRequestsService', () => {\n       });\n     });\n   });\n+\n+  describe('pendingForRoute', () => {\n+    const route: Route = { id: 1 } as Route;\n+    const user: User = { id: 1 } as User;\n+    const optimization: OptimizationRequest = { id: 1 } as OptimizationRequest;\n+\n+    it('should create a query builder', async () => {\n+      await service.pendingForRoute(route, user);\n+      expect(repository.createQueryBuilder).toHaveBeenCalledWith(\n+        'optimizationRequest',\n+      );\n+    });\n+\n+    it('should join the routes table', async () => {\n+      await service.pendingForRoute(route, user);\n+      expect(queryBuilder.innerJoin).toHaveBeenNthCalledWith(\n+        1,\n+        'optimizationRequest.route',\n+        'route',\n+      );\n+    });\n+\n+    it('should join the projects table', async () => {\n+      await service.pendingForRoute(route, user);\n+      expect(queryBuilder.innerJoin).toHaveBeenNthCalledWith(\n+        2,\n+        'route.project',\n+        'project',\n+      );\n+    });\n+\n+    it('should join the users table', async () => {\n+      await service.pendingForRoute(route, user);\n+      expect(queryBuilder.innerJoin).toHaveBeenNthCalledWith(\n+        3,\n+        'project.users',\n+        'user',\n+      );\n+    });\n+\n+    it('should scope to the route', async () => {\n+      await service.pendingForRoute(route, user);\n+      expect(queryBuilder.where).toHaveBeenCalledWith('route.id = :routeId', {\n+        routeId: route.id,\n+      });\n+    });\n+\n+    it('should scope to the user', async () => {\n+      await service.pendingForRoute(route, user);\n+      expect(queryBuilder.andWhere).toHaveBeenCalledWith('user.id = :userId', {\n+        userId: user.id,\n+      });\n+    });\n+\n+    it('should limit the query to \"pending\" requests', async () => {\n+      await service.pendingForRoute(route, user);\n+      expect(queryBuilder.andWhere).toHaveBeenCalledWith(\n+        'optimizationRequest.status = :status',\n+        {\n+          status: OptimizationStatus.PENDING,\n+        },\n+      );\n+    });\n+\n+    it('should sort the results by date created descending', async () => {\n+      await service.pendingForRoute(route, user);\n+      expect(queryBuilder.orderBy).toHaveBeenCalledWith(\n+        'optimizationRequest.createdAt',\n+        'DESC',\n+      );\n+    });\n+\n+    it('should fetch the optimization from the repository', async () => {\n+      await service.pendingForRoute(route, user);\n+      expect(queryBuilder.getOne).toHaveBeenCalled();\n+    });\n+\n+    it('should return the optimization request', async () => {\n+      jest.spyOn(queryBuilder, 'getOne').mockResolvedValue(optimization);\n+      const result = await service.pendingForRoute(route, user);\n+      expect(result).toBe(optimization);\n+    });\n+  });",
        "created_at": "2021-08-03T21:34:30Z",
        "body": "üëç "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 721766904,
        "path": "test/route-planner/services/optimization-requests.service.spec.ts",
        "id": 682195518,
        "diff_hunk": "@@ -487,4 +487,87 @@ describe('OptimizationRequestsService', () => {\n       });\n     });\n   });\n+\n+  describe('pendingForRoute', () => {\n+    const route: Route = { id: 1 } as Route;",
        "created_at": "2021-08-04T00:36:55Z",
        "body": "Is this just simpler/lighter weight than using a build on a factory?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 722358675,
        "path": "test/route-planner/services/optimization-requests.service.spec.ts",
        "in_reply_to_id": 682195518,
        "id": 682671890,
        "diff_hunk": "@@ -487,4 +487,87 @@ describe('OptimizationRequestsService', () => {\n       });\n     });\n   });\n+\n+  describe('pendingForRoute', () => {\n+    const route: Route = { id: 1 } as Route;",
        "created_at": "2021-08-04T14:29:48Z",
        "body": "It is.  Very much so.  Fishery isn't super heavy, but it still has plumbing.  This approach allows for only specifying the things you actually care about, which can also make side-effects more obvious (ie. I know that nothing in the path of this test actually needs the route (possibly just the id).  By specifying ONLY the data that I think is needed, I can fairly quickly ascertain if that is true, because things should start complaining about undefined attributes)."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 722666822,
        "path": "test/e2e/routes.e2e-spec.ts",
        "id": 682904163,
        "diff_hunk": "@@ -56,185 +61,252 @@ describe('RoutesController (e2e)', () => {\n   });\n \n   describe(\"Listing a project's routes\", () => {\n-    it('should require authentication', async () => {\n-      response = await request(http)\n-        .get(`/projects/${project.id}/routes`)\n-        .set('Accept', 'application/json');\n-      expect(response).toHaveProperty('status', 403);\n-    });\n-\n-    it('should accept filtering/pagination/sorting', async () => {\n-      response = await request(http)\n-        .get(`/projects/${project.id}/routes`)\n+    const listRoutes = (): Promise<request.Response> =>\n+      request(http)\n+        .get(`/projects/${projectId}/routes`)\n         .set('Accept', 'application/json')\n-        .set('Authorization', `Bearer ${accessToken}`)\n-        .query({\n-          page: 2,\n-          limit: 10,\n-          filter: {\n-            name: { eq: 'Test' },\n-          },\n-        });\n-      expect(response).toHaveProperty('status', 200);\n+        .set('Authorization', authorization);\n+\n+    describe('without authorization', () => {\n+      beforeEach(() => {\n+        authorization = '';\n+      });\n+\n+      it('should return 403 (Unauthorized)', async () => {\n+        response = await listRoutes();\n+        expect(response).toHaveProperty('status', 403);\n+      });\n     });\n \n     describe('when the project does not exist', () => {\n-      beforeEach(async () => {\n-        response = await request(http)\n-          .get(`/projects/9999/routes`)\n-          .set('Accept', 'application/json')\n-          .set('Authorization', `Bearer ${accessToken}`);\n+      beforeEach(() => {\n+        projectId = 9999;\n       });\n \n-      it('should return 404', () =>\n-        expect(response).toHaveProperty('status', 404));\n+      it('should return 404', async () => {\n+        response = await listRoutes();\n+        expect(response).toHaveProperty('status', 404);\n+      });\n \n-      it('should include the appropriate error', () =>\n+      it('should include the appropriate error', async () => {\n+        response = await listRoutes();\n         expect(response).toHaveProperty(\n           'body',\n           expect.objectContaining({\n             message: 'Not Found',\n             errors: 'Project not found: 9999',\n           }),\n-        ));\n+        );\n+      });\n     });\n \n-    describe('response', () => {\n+    describe('when the project exists', () => {\n       beforeEach(async () => {\n-        await factories.route.forProject(project).create();\n-        response = await request(http)\n-          .get(`/projects/${project.id}/routes`)\n-          .set('Accept', 'application/json')\n-          .set('Authorization', `Bearer ${accessToken}`);\n+        await factories.route.forProject(project).createList(2);\n+        projectId = project.id;\n       });\n \n-      it('should return 200', () =>\n-        expect(response).toHaveProperty('status', 200));\n+      it('should return 200', async () => {\n+        response = await listRoutes();\n+        expect(response).toHaveProperty('status', 200);\n+      });\n \n-      it('should respond with a valid structure', () =>\n-        expect(response).toHaveProperty(\n-          'body',\n-          expect.objectContaining({\n-            total: expect.any(Number),\n-            limit: expect.any(Number),\n-            offset: expect.any(Number),\n-            data: expect.arrayContaining([\n-              expect.objectContaining({\n-                id: expect.any(Number),\n-                name: expect.any(String),\n-                userDefinedPoints: expect.arrayContaining([\n-                  expect.objectContaining({\n-                    name: expect.any(String),\n-                    coordinates: [expect.any(Number), expect.any(Number)],\n-                  }),\n-                ]),\n-                optimizedPoints: expect.any(Array),\n-              }),\n-            ]),\n-          }),\n-        ));\n+      it('should respond with a valid structure', async () => {\n+        response = await listRoutes();\n+        expect(response).toHaveProperty('body', {\n+          total: expect.any(Number),\n+          limit: expect.any(Number),\n+          offset: expect.any(Number),\n+          data: expect.arrayContaining([\n+            {\n+              id: expect.any(Number),\n+              name: expect.any(String),\n+              userDefinedPoints: expect.arrayContaining([\n+                {\n+                  name: expect.any(String),\n+                  coordinates: [expect.any(Number), expect.any(Number)],\n+                },\n+              ]),\n+              optimizedPoints: expect.any(Array),\n+              createdAt: expect.any(String),\n+              updatedAt: expect.any(String),\n+            },\n+          ]),\n+        });\n+      });\n     });\n   });\n \n   describe('Retrieving a single route', () => {\n-    it('should require authentication', async () => {\n-      response = await request(http)\n-        .get(`/projects/${project.id}/routes/1`)\n-        .set('Accept', 'application/json');\n-      expect(response).toHaveProperty('status', 403);\n+    let routeId: number;\n+    const fetchRoute = (): Promise<request.Response> =>\n+      request(http)\n+        .get(`/projects/${projectId}/routes/${routeId}`)\n+        .set('Accept', 'application/json')\n+        .set('Authorization', authorization);\n+    describe('without authorization', () => {\n+      beforeEach(() => {\n+        authorization = '';\n+      });\n+\n+      it('should return 403 (Unauthorized)', async () => {\n+        response = await fetchRoute();\n+        expect(response).toHaveProperty('status', 403);\n+      });\n     });\n \n     describe('when the project does not exist', () => {\n-      beforeEach(async () => {\n-        response = await request(http)\n-          .get(`/projects/9999/routes/1`)\n-          .set('Accept', 'application/json')\n-          .set('Authorization', `Bearer ${accessToken}`);\n+      beforeEach(() => {\n+        projectId = 9999;\n       });\n \n-      it('should return 404', () =>\n-        expect(response).toHaveProperty('status', 404));\n+      it('should return 404', async () => {\n+        response = await fetchRoute();\n+        expect(response).toHaveProperty('status', 404);\n+      });\n \n-      it('should include the appropriate error', () =>\n+      it('should include the appropriate error', async () => {\n+        response = await fetchRoute();\n         expect(response).toHaveProperty(\n           'body',\n           expect.objectContaining({\n             message: 'Not Found',\n             errors: 'Project not found: 9999',\n           }),\n-        ));\n+        );\n+      });\n     });\n \n-    describe('when the route exists', () => {\n-      let route: Route;\n+    describe('when the project exists', () => {\n+      beforeEach(() => {\n+        projectId = project.id;\n+      });\n \n-      beforeEach(async () => {\n-        route = await factories.route.forProject(project).create();\n-        response = await request(http)\n-          .get(`/projects/${project.id}/routes/${route.id}`)\n-          .set('Accept', 'application/json')\n-          .set('Authorization', `Bearer ${accessToken}`);\n+      describe('and the route does not exist', () => {\n+        beforeEach(() => {\n+          routeId = 9999;\n+        });\n+\n+        it('should return 404', async () => {\n+          response = await fetchRoute();\n+          expect(response).toHaveProperty('status', 404);\n+        });\n       });\n \n-      it('should return 200', () =>\n-        expect(response).toHaveProperty('status', 200));\n+      describe('and the route exists', () => {\n+        let route: Route;\n \n-      it('should respond with the route', () =>\n-        expect(response.body).toMatchObject({\n-          data: {\n-            id: route.id,\n-            name: route.name,\n-            userDefinedPoints: expect.arrayContaining([\n+        beforeEach(async () => {\n+          route = await factories.route.forProject(project).create();\n+          routeId = route.id;\n+        });\n+\n+        it('should return 200', async () => {\n+          response = await fetchRoute();\n+          expect(response).toHaveProperty('status', 200);\n+        });\n+\n+        it('should respond with the route', async () => {\n+          response = await fetchRoute();\n+          expect(response.body).toMatchObject({\n+            data: {\n+              id: route.id,\n+              name: route.name,\n+              userDefinedPoints: expect.arrayContaining([\n+                expect.objectContaining({\n+                  name: expect.any(String),\n+                  coordinates: [expect.any(Number), expect.any(Number)],\n+                }),\n+              ]),\n+              optimizedPoints: expect.any(Array),\n+              createdAt: route.createdAt.toISOString(),\n+              updatedAt: route.updatedAt.toISOString(),\n+            },\n+          });\n+        });\n+\n+        describe('and an optimization is pending for the route', () => {\n+          let optimization: OptimizationRequest;\n+\n+          beforeEach(async () => {\n+            optimization = await factories.optimizationRequests\n+              .forRoute(route)\n+              .create({ status: OptimizationStatus.PENDING });\n+          });\n+\n+          it('should include the optimization in the response', async () => {\n+            response = await fetchRoute();\n+            expect(response.body).toHaveProperty(\n+              'data',\n               expect.objectContaining({\n-                name: expect.any(String),\n-                coordinates: [expect.any(Number), expect.any(Number)],\n+                pendingOptimization: expect.objectContaining({\n+                  id: optimization.id,\n+                }),",
        "created_at": "2021-08-04T19:36:34Z",
        "body": "üôá‚Äç‚ôÇÔ∏è "
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/126",
      "updated_at": "2021-08-03T15:14:00Z",
      "title": "[Snyk] Upgrade joi from 17.4.0 to 17.4.1",
      "state": "closed",
      "number": 126,
      "merged_at": "2021-08-03T15:13:59Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "96ffa5b1e9dc9e4ca3f0d9cd2f0371c6ac0b4c03",
        "ref": "snyk-upgrade-8f0e532b4cdabff8814af410b321b593"
      },
      "created_at": "2021-08-01T06:06:10Z",
      "closed_at": "2021-08-03T15:13:59Z",
      "body": "<h3>Snyk has created this PR to upgrade joi from 17.4.0 to 17.4.1.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=joi&from_version=17.4.0&to_version=17.4.1&pr_id=80166c61-6205-4d70-b4c8-5dc40225aedb&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **21 days ago**, on 2021-07-11.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>joi</b></summary>\n    <ul>\n      <li>\n        <b>17.4.1</b> - <a href=\"https://snyk.io/redirect/github/sideway/joi/releases/tag/v17.4.1\">2021-07-11</a></br><p>17.4.1</p>\n      </li>\n      <li>\n        <b>17.4.0</b> - <a href=\"https://snyk.io/redirect/github/sideway/joi/releases/tag/v17.4.0\">2021-02-08</a></br><p>17.4.0</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/sideway/joi/releases\">joi GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>joi</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/5f33cb61d3b29419e0724088cc87c0158fde9e51\">5f33cb6</a> 17.4.1</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/d1e1df37a046ceb3380c0cb3ce94c52675dae238\">d1e1df3</a> misc</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/13006eccf5fe4c4efeccd361797bdb2d4587c3e0\">13006ec</a> Merge pull request #2627 from petrenkoVitaliy/feature/add-object-typeguards-schema</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/883f1c0b06db3fd96fc2d5e43b8947a0aa8a9edb\">883f1c0</a> add object typeguards schema</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/6ff4a71d7c0600322ea857e148b354ce0f55609c\">6ff4a71</a> Merge pull request #2603 from bromy/patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/97d77ee2b7fb072f9fcec9be0356af3bda436a1d\">97d77ee</a> Fix typos in object.missing</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/95e53746d0e7cf31af53c05d53b897aafc2d2f42\">95e5374</a> Fix typo under any.only()</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/83092836583a7f4ce16cbf116b8776737e80d16f\">8309283</a> Merge pull request #2586 from ehsan2003/fix-isSchema-type</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/afe33ade817dc27ce001fccc668441b7d8c76d8f\">afe33ad</a> fix isSchema type definition</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/4d328216001d8c9c18cc280e133c95d24e876e45\">4d32821</a> Merge pull request #2573 from RyWilliams/patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/sideway/joi/commit/9dbb27b10dadeebea3e2a052b7b198c496a66270\">9dbb27b</a> .conditional option array type</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/sideway/joi/compare/24600f27ce4061327817c8910415649a004f94ab...5f33cb61d3b29419e0724088cc87c0158fde9e51\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI4MDE2NmM2MS02MjA1LTRkNzAtYjRjOC01ZGM0MDIyNWFlZGIiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjgwMTY2YzYxLTYyMDUtNGQ3MC1iNGM4LTVkYzQwMjI1YWVkYiJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;joi&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"80166c61-6205-4d70-b4c8-5dc40225aedb\",\"prPublicId\":\"80166c61-6205-4d70-b4c8-5dc40225aedb\",\"dependencies\":[{\"name\":\"joi\",\"from\":\"17.4.0\",\"to\":\"17.4.1\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-07-11T05:04:12.623Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "6701cee2280f04a03d7c6ce06b5b1e1e704fc8a4",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/125",
      "updated_at": "2021-07-30T21:44:46Z",
      "title": "[IMERC-404] Resolve collision issue with request.route (route is NestJS reserved).",
      "state": "closed",
      "number": 125,
      "merged_at": "2021-07-30T21:44:45Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "31d0c668a3f5d4c1a617df7d1f31a38b90ae477f",
        "ref": "bugfix/IMERC-404-scoped-lateral"
      },
      "created_at": "2021-07-30T20:13:33Z",
      "closed_at": "2021-07-30T21:44:46Z",
      "body": "[IMERC-404](https://imercatus.backlog.com/view/IMERC-404)\r\n\r\nI think this all came down to a collision with a reserved NestJS word (route).",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ff781c06269f7a7b51b0800408b0afd4f8edb321",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 719433347,
        "path": "src/route-planner/decorators/scoped-lateral.decorator.ts",
        "id": 680197217,
        "diff_hunk": "@@ -48,7 +48,7 @@ export class ParseLateralIdPipe implements PipeTransform {\n     }\n \n     const route =\n-      request.route ||\n+      request.imercata_route ||",
        "created_at": "2021-07-30T20:18:32Z",
        "body": "Is this the casing found within the other objects in `request`?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 719434142,
        "path": "src/route-planner/decorators/scoped-lateral.decorator.ts",
        "in_reply_to_id": 680197217,
        "id": 680197837,
        "diff_hunk": "@@ -48,7 +48,7 @@ export class ParseLateralIdPipe implements PipeTransform {\n     }\n \n     const route =\n-      request.route ||\n+      request.imercata_route ||",
        "created_at": "2021-07-30T20:19:55Z",
        "body": "My bad.  Consequence of writing ruby for a decade."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 719434831,
        "path": "src/route-planner/decorators/scoped-lateral.decorator.ts",
        "in_reply_to_id": 680197217,
        "id": 680198345,
        "diff_hunk": "@@ -48,7 +48,7 @@ export class ParseLateralIdPipe implements PipeTransform {\n     }\n \n     const route =\n-      request.route ||\n+      request.imercata_route ||",
        "created_at": "2021-07-30T20:21:01Z",
        "body": "I do it all the time, too. lol."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/124",
      "updated_at": "2021-07-30T16:46:23Z",
      "title": "[IMERC-402] Enable the lateral optimization controller.",
      "state": "closed",
      "number": 124,
      "merged_at": "2021-07-30T16:46:22Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "4bda33e5daaaec3c21968d0d7f079a36292d1138",
        "ref": "bugfix/IMERC-402-lateral-optimization"
      },
      "created_at": "2021-07-30T16:18:45Z",
      "closed_at": "2021-07-30T16:46:22Z",
      "body": "[IMERC-402](https://imercatus.backlog.com/view/IMERC-402)\r\n\r\nSomehow, the controller for lateral optimizations wasn't enabled in the `route-planner` module.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "fcc80fdf8609180260f99a77bd0d1ed73a75c9b9",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/123",
      "updated_at": "2021-07-29T20:27:25Z",
      "title": "[IMERC-393] Pass the proper arguments to optimizeSegments()",
      "state": "closed",
      "number": 123,
      "merged_at": "2021-07-29T20:27:24Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "fe49c49a3c6019ec0d61b809efabe8a3cd2f8d05",
        "ref": "bugfix/IMERC-393-generate-segments"
      },
      "created_at": "2021-07-29T20:19:36Z",
      "closed_at": "2021-07-29T20:27:24Z",
      "body": "Not sure how this made it past e2e testing.  We're not passing enough arguments to `optimizeSegments()` in the laterals service.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ddf81eb1b35a15d41478cf9fa272c675aa1f75e3",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/122",
      "updated_at": "2021-07-29T19:26:35Z",
      "title": "[IMERC-318] Add endpoint for laterals.",
      "state": "closed",
      "number": 122,
      "merged_at": "2021-07-29T19:26:35Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9065c137d927f145e32b68b6a80f5db3d7947ea4",
        "ref": "IMERC-318-laterals"
      },
      "created_at": "2021-07-29T17:11:07Z",
      "closed_at": "2021-07-29T19:26:35Z",
      "body": "[IMERC-318](https://imercatus.backlog.com/view/IMERC-318)\r\n\r\nAdds endpoints for dealing with laterals, and more endpoints for dealing with their optimizations.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5f8cfacd3480ecfba474ac1cbda6ceb50e082930",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 718389726,
        "path": "src/route-planner/controllers/lateral-optimization-requests.controller.ts",
        "id": 679375541,
        "diff_hunk": "@@ -0,0 +1,207 @@\n+import {\n+  Body,\n+  Controller,\n+  Get,\n+  HttpCode,\n+  Inject,\n+  NotFoundException,\n+  Param,\n+  Post,\n+  UseGuards,\n+  UseInterceptors,\n+} from '@nestjs/common';\n+import {\n+  ApiBearerAuth,\n+  ApiCreatedResponse,\n+  ApiExtraModels,\n+  ApiForbiddenResponse,\n+  ApiNoContentResponse,\n+  ApiNotFoundResponse,\n+  ApiOkResponse,\n+  ApiUnauthorizedResponse,\n+} from '@nestjs/swagger';\n+import { plainToClass } from 'class-transformer';\n+\n+import { ApiWrappedResponse } from '@/shared/decorators';\n+import { ResponseDTO } from '@/shared/dto';\n+import { NotFoundInterceptor } from '@/shared/interceptors';\n+import { APP_LOGGER, AppLogger } from '@/shared/interfaces';\n+\n+import { LoggedInUser } from '@/identity/decorators';\n+import { AuthenticationGuard } from '@/identity/guards';\n+import { UserProfile } from '@/identity/interfaces';\n+\n+import { ProjectIdParam } from '@/projects/decorators';\n+\n+import {\n+  LateralIdParam,\n+  OptimizationRequestIdParam,\n+  RouteIdParam,\n+  ScopedRoute,\n+  ScopedLateral,\n+} from '../decorators';\n+import { OptimizationRequestDTO } from '../dto';\n+import { Route } from '../interfaces';\n+import { OptimizationRequestsService } from '../services';\n+\n+@Controller(\n+  'projects/:projectId/routes/:routeId/laterals/:lateralId/optimizations',\n+)\n+@UseGuards(AuthenticationGuard)\n+@ApiBearerAuth()\n+@ApiExtraModels(OptimizationRequestDTO)\n+export class LateralOptimizationRequestsController {\n+  constructor(\n+    @Inject(APP_LOGGER)\n+    private readonly logger: AppLogger,\n+    private optimizationRequestsService: OptimizationRequestsService,\n+  ) {\n+    this.logger.setContext(LateralOptimizationRequestsController.name);\n+  }\n+\n+  @Get(':id')\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @LateralIdParam('lateralId')\n+  @OptimizationRequestIdParam()\n+  @ApiWrappedResponse(ApiOkResponse, OptimizationRequestDTO, {\n+    description: 'Information about the optimization request.',\n+  })\n+  @ApiNotFoundResponse({\n+    description:\n+      'No optimization matching the supplied arguments could be found.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  @UseInterceptors(NotFoundInterceptor)\n+  public async findOne(\n+    @LoggedInUser() userProfile: UserProfile,\n+    @ScopedRoute() route: Route,\n+    @ScopedLateral() lateral: Route,\n+    @Param('id') id: number,\n+  ): Promise<ResponseDTO<OptimizationRequestDTO>> {\n+    const optimization = await this.optimizationRequestsService.findOne(\n+      lateral,\n+      userProfile.profile,\n+      id,\n+    );\n+    return optimization\n+      ? { data: plainToClass(OptimizationRequestDTO, optimization) }\n+      : null;\n+  }\n+\n+  @Post()\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @ApiWrappedResponse(ApiCreatedResponse, OptimizationRequestDTO, {\n+    description: 'Information about the optimization request.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',",
        "created_at": "2021-07-29T18:05:45Z",
        "body": "Is the default description not good or could these be DRYer? I ask bc these decorators are getting really verbose. Doesn't need to be dried up in this PR, just a little nitpick."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 718390484,
        "path": "src/route-planner/controllers/laterals.controller.ts",
        "id": 679376094,
        "diff_hunk": "@@ -0,0 +1,240 @@\n+import {\n+  Body,\n+  Controller,\n+  Delete,\n+  Get,\n+  HttpCode,\n+  Inject,\n+  NotFoundException,\n+  Param,\n+  Patch,\n+  Post,\n+  Query,\n+  UseGuards,\n+  UseInterceptors,\n+} from '@nestjs/common';\n+import {\n+  ApiBadRequestResponse,\n+  ApiBearerAuth,\n+  ApiCreatedResponse,\n+  ApiForbiddenResponse,\n+  ApiNoContentResponse,\n+  ApiNotFoundResponse,\n+  ApiOkResponse,\n+  ApiUnauthorizedResponse,\n+} from '@nestjs/swagger';\n+import { plainToClass } from 'class-transformer';\n+\n+import { ApiPaginatedResponse, ApiWrappedResponse } from '@/shared/decorators';\n+import { PaginatedResponseDTO, ResponseDTO } from '@/shared/dto';\n+import { NotFoundInterceptor } from '@/shared/interceptors';\n+import { APP_LOGGER, AppLogger } from '@/shared/interfaces';\n+\n+import { LoggedInUser } from '@/identity/decorators';\n+import { AuthenticationGuard } from '@/identity/guards';\n+import { UserProfile } from '@/identity/interfaces';\n+\n+import { ProjectIdParam, ScopedProject } from '@/projects/decorators';\n+import { Project } from '@/projects/interfaces';\n+\n+import { LateralIdParam, RouteIdParam, ScopedRoute } from '../decorators';\n+import {\n+  RouteCreateDTO,\n+  RouteDTO,\n+  RouteQueryDTO,\n+  RouteUpdateDTO,\n+} from '../dto';\n+import { Route } from '../interfaces';\n+import { LateralsService } from '../services';\n+\n+@Controller('projects/:projectId/routes/:routeId/laterals')\n+@UseGuards(AuthenticationGuard)\n+@ApiBearerAuth()\n+export class LateralsController {\n+  constructor(\n+    @Inject(APP_LOGGER)\n+    private readonly logger: AppLogger,\n+    private readonly lateralsService: LateralsService,\n+  ) {\n+    this.logger.setContext(LateralsController.name);\n+  }\n+\n+  @Get()\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @ApiPaginatedResponse(RouteDTO, {\n+    description: 'List of laterals matching filter criteria.',\n+  })\n+  @ApiNotFoundResponse({ description: 'The supplied `projectId` is invalid.' })\n+  @ApiNotFoundResponse({ description: 'The supplied `routeId` is invalid.' })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  public async getAll(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @ScopedRoute() route: Route,\n+    @Query() query: RouteQueryDTO,\n+  ): Promise<PaginatedResponseDTO<RouteDTO>> {\n+    const { total, records } = await this.lateralsService.findAll(\n+      project,\n+      route,\n+      user.profile,\n+      query,\n+    );\n+    return {\n+      total,\n+      limit: query.limit,\n+      offset: query.page,\n+      data: plainToClass(RouteDTO, records),\n+    };\n+  }\n+\n+  @Get(':id')\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @LateralIdParam()\n+  @ApiWrappedResponse(ApiOkResponse, RouteDTO, {\n+    description: 'Route information',\n+  })\n+  @ApiNotFoundResponse({\n+    description: 'No lateral matching the supplied arguments could be found.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  @UseInterceptors(NotFoundInterceptor)\n+  public async findOne(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @ScopedRoute() route: Route,\n+    @Param('id') id: number,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const lateral = await this.lateralsService.findOne(\n+      project,\n+      route,\n+      user.profile,\n+      id,\n+    );\n+\n+    return lateral ? { data: plainToClass(RouteDTO, lateral) } : null;\n+  }\n+\n+  @Post()\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @ApiWrappedResponse(ApiCreatedResponse, RouteDTO, {\n+    description: 'Lateral created successfully.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  @ApiBadRequestResponse({\n+    description: 'The supplied properties are invalid.',\n+  })\n+  public async create(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @ScopedRoute() route: Route,\n+    @Body() lateralCreateDTO: RouteCreateDTO,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const lateral = await this.lateralsService.create(\n+      project,\n+      route,\n+      user.profile,\n+      lateralCreateDTO,\n+    );\n+\n+    return lateral ? { data: plainToClass(RouteDTO, lateral) } : null;\n+  }\n+\n+  @Patch(':id')\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @LateralIdParam()\n+  @ApiWrappedResponse(ApiOkResponse, RouteDTO, {\n+    description: 'The lateral was updated successfully.',\n+  })\n+  @ApiNotFoundResponse({\n+    description: 'No lateral matching the supplied arguments could be found.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",",
        "created_at": "2021-07-29T18:06:36Z",
        "body": "`s/\"/'/`"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 718390955,
        "path": "src/route-planner/controllers/laterals.controller.ts",
        "in_reply_to_id": 679376094,
        "id": 679376418,
        "diff_hunk": "@@ -0,0 +1,240 @@\n+import {\n+  Body,\n+  Controller,\n+  Delete,\n+  Get,\n+  HttpCode,\n+  Inject,\n+  NotFoundException,\n+  Param,\n+  Patch,\n+  Post,\n+  Query,\n+  UseGuards,\n+  UseInterceptors,\n+} from '@nestjs/common';\n+import {\n+  ApiBadRequestResponse,\n+  ApiBearerAuth,\n+  ApiCreatedResponse,\n+  ApiForbiddenResponse,\n+  ApiNoContentResponse,\n+  ApiNotFoundResponse,\n+  ApiOkResponse,\n+  ApiUnauthorizedResponse,\n+} from '@nestjs/swagger';\n+import { plainToClass } from 'class-transformer';\n+\n+import { ApiPaginatedResponse, ApiWrappedResponse } from '@/shared/decorators';\n+import { PaginatedResponseDTO, ResponseDTO } from '@/shared/dto';\n+import { NotFoundInterceptor } from '@/shared/interceptors';\n+import { APP_LOGGER, AppLogger } from '@/shared/interfaces';\n+\n+import { LoggedInUser } from '@/identity/decorators';\n+import { AuthenticationGuard } from '@/identity/guards';\n+import { UserProfile } from '@/identity/interfaces';\n+\n+import { ProjectIdParam, ScopedProject } from '@/projects/decorators';\n+import { Project } from '@/projects/interfaces';\n+\n+import { LateralIdParam, RouteIdParam, ScopedRoute } from '../decorators';\n+import {\n+  RouteCreateDTO,\n+  RouteDTO,\n+  RouteQueryDTO,\n+  RouteUpdateDTO,\n+} from '../dto';\n+import { Route } from '../interfaces';\n+import { LateralsService } from '../services';\n+\n+@Controller('projects/:projectId/routes/:routeId/laterals')\n+@UseGuards(AuthenticationGuard)\n+@ApiBearerAuth()\n+export class LateralsController {\n+  constructor(\n+    @Inject(APP_LOGGER)\n+    private readonly logger: AppLogger,\n+    private readonly lateralsService: LateralsService,\n+  ) {\n+    this.logger.setContext(LateralsController.name);\n+  }\n+\n+  @Get()\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @ApiPaginatedResponse(RouteDTO, {\n+    description: 'List of laterals matching filter criteria.',\n+  })\n+  @ApiNotFoundResponse({ description: 'The supplied `projectId` is invalid.' })\n+  @ApiNotFoundResponse({ description: 'The supplied `routeId` is invalid.' })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  public async getAll(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @ScopedRoute() route: Route,\n+    @Query() query: RouteQueryDTO,\n+  ): Promise<PaginatedResponseDTO<RouteDTO>> {\n+    const { total, records } = await this.lateralsService.findAll(\n+      project,\n+      route,\n+      user.profile,\n+      query,\n+    );\n+    return {\n+      total,\n+      limit: query.limit,\n+      offset: query.page,\n+      data: plainToClass(RouteDTO, records),\n+    };\n+  }\n+\n+  @Get(':id')\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @LateralIdParam()\n+  @ApiWrappedResponse(ApiOkResponse, RouteDTO, {\n+    description: 'Route information',\n+  })\n+  @ApiNotFoundResponse({\n+    description: 'No lateral matching the supplied arguments could be found.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  @UseInterceptors(NotFoundInterceptor)\n+  public async findOne(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @ScopedRoute() route: Route,\n+    @Param('id') id: number,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const lateral = await this.lateralsService.findOne(\n+      project,\n+      route,\n+      user.profile,\n+      id,\n+    );\n+\n+    return lateral ? { data: plainToClass(RouteDTO, lateral) } : null;\n+  }\n+\n+  @Post()\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @ApiWrappedResponse(ApiCreatedResponse, RouteDTO, {\n+    description: 'Lateral created successfully.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  @ApiBadRequestResponse({\n+    description: 'The supplied properties are invalid.',\n+  })\n+  public async create(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @ScopedRoute() route: Route,\n+    @Body() lateralCreateDTO: RouteCreateDTO,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const lateral = await this.lateralsService.create(\n+      project,\n+      route,\n+      user.profile,\n+      lateralCreateDTO,\n+    );\n+\n+    return lateral ? { data: plainToClass(RouteDTO, lateral) } : null;\n+  }\n+\n+  @Patch(':id')\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @LateralIdParam()\n+  @ApiWrappedResponse(ApiOkResponse, RouteDTO, {\n+    description: 'The lateral was updated successfully.',\n+  })\n+  @ApiNotFoundResponse({\n+    description: 'No lateral matching the supplied arguments could be found.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",",
        "created_at": "2021-07-29T18:07:10Z",
        "body": "Won't that leav the single quote in `doesn't` dangling?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 718395054,
        "path": "src/route-planner/controllers/lateral-optimization-requests.controller.ts",
        "in_reply_to_id": 679375541,
        "id": 679379617,
        "diff_hunk": "@@ -0,0 +1,207 @@\n+import {\n+  Body,\n+  Controller,\n+  Get,\n+  HttpCode,\n+  Inject,\n+  NotFoundException,\n+  Param,\n+  Post,\n+  UseGuards,\n+  UseInterceptors,\n+} from '@nestjs/common';\n+import {\n+  ApiBearerAuth,\n+  ApiCreatedResponse,\n+  ApiExtraModels,\n+  ApiForbiddenResponse,\n+  ApiNoContentResponse,\n+  ApiNotFoundResponse,\n+  ApiOkResponse,\n+  ApiUnauthorizedResponse,\n+} from '@nestjs/swagger';\n+import { plainToClass } from 'class-transformer';\n+\n+import { ApiWrappedResponse } from '@/shared/decorators';\n+import { ResponseDTO } from '@/shared/dto';\n+import { NotFoundInterceptor } from '@/shared/interceptors';\n+import { APP_LOGGER, AppLogger } from '@/shared/interfaces';\n+\n+import { LoggedInUser } from '@/identity/decorators';\n+import { AuthenticationGuard } from '@/identity/guards';\n+import { UserProfile } from '@/identity/interfaces';\n+\n+import { ProjectIdParam } from '@/projects/decorators';\n+\n+import {\n+  LateralIdParam,\n+  OptimizationRequestIdParam,\n+  RouteIdParam,\n+  ScopedRoute,\n+  ScopedLateral,\n+} from '../decorators';\n+import { OptimizationRequestDTO } from '../dto';\n+import { Route } from '../interfaces';\n+import { OptimizationRequestsService } from '../services';\n+\n+@Controller(\n+  'projects/:projectId/routes/:routeId/laterals/:lateralId/optimizations',\n+)\n+@UseGuards(AuthenticationGuard)\n+@ApiBearerAuth()\n+@ApiExtraModels(OptimizationRequestDTO)\n+export class LateralOptimizationRequestsController {\n+  constructor(\n+    @Inject(APP_LOGGER)\n+    private readonly logger: AppLogger,\n+    private optimizationRequestsService: OptimizationRequestsService,\n+  ) {\n+    this.logger.setContext(LateralOptimizationRequestsController.name);\n+  }\n+\n+  @Get(':id')\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @LateralIdParam('lateralId')\n+  @OptimizationRequestIdParam()\n+  @ApiWrappedResponse(ApiOkResponse, OptimizationRequestDTO, {\n+    description: 'Information about the optimization request.',\n+  })\n+  @ApiNotFoundResponse({\n+    description:\n+      'No optimization matching the supplied arguments could be found.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  @UseInterceptors(NotFoundInterceptor)\n+  public async findOne(\n+    @LoggedInUser() userProfile: UserProfile,\n+    @ScopedRoute() route: Route,\n+    @ScopedLateral() lateral: Route,\n+    @Param('id') id: number,\n+  ): Promise<ResponseDTO<OptimizationRequestDTO>> {\n+    const optimization = await this.optimizationRequestsService.findOne(\n+      lateral,\n+      userProfile.profile,\n+      id,\n+    );\n+    return optimization\n+      ? { data: plainToClass(OptimizationRequestDTO, optimization) }\n+      : null;\n+  }\n+\n+  @Post()\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @ApiWrappedResponse(ApiCreatedResponse, OptimizationRequestDTO, {\n+    description: 'Information about the optimization request.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',",
        "created_at": "2021-07-29T18:11:55Z",
        "body": "The default has no description.  The whole point of the decorator is \"when I return 401 (unauthorized), include this text as the description\".  Without that decorator, the controller will just return 401 as a status code (and I think a body object with `status: 401`.  It is definitely possible to combine some of this behavior to make things more DRY."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 718400283,
        "path": "src/route-planner/controllers/laterals.controller.ts",
        "in_reply_to_id": 679376094,
        "id": 679383805,
        "diff_hunk": "@@ -0,0 +1,240 @@\n+import {\n+  Body,\n+  Controller,\n+  Delete,\n+  Get,\n+  HttpCode,\n+  Inject,\n+  NotFoundException,\n+  Param,\n+  Patch,\n+  Post,\n+  Query,\n+  UseGuards,\n+  UseInterceptors,\n+} from '@nestjs/common';\n+import {\n+  ApiBadRequestResponse,\n+  ApiBearerAuth,\n+  ApiCreatedResponse,\n+  ApiForbiddenResponse,\n+  ApiNoContentResponse,\n+  ApiNotFoundResponse,\n+  ApiOkResponse,\n+  ApiUnauthorizedResponse,\n+} from '@nestjs/swagger';\n+import { plainToClass } from 'class-transformer';\n+\n+import { ApiPaginatedResponse, ApiWrappedResponse } from '@/shared/decorators';\n+import { PaginatedResponseDTO, ResponseDTO } from '@/shared/dto';\n+import { NotFoundInterceptor } from '@/shared/interceptors';\n+import { APP_LOGGER, AppLogger } from '@/shared/interfaces';\n+\n+import { LoggedInUser } from '@/identity/decorators';\n+import { AuthenticationGuard } from '@/identity/guards';\n+import { UserProfile } from '@/identity/interfaces';\n+\n+import { ProjectIdParam, ScopedProject } from '@/projects/decorators';\n+import { Project } from '@/projects/interfaces';\n+\n+import { LateralIdParam, RouteIdParam, ScopedRoute } from '../decorators';\n+import {\n+  RouteCreateDTO,\n+  RouteDTO,\n+  RouteQueryDTO,\n+  RouteUpdateDTO,\n+} from '../dto';\n+import { Route } from '../interfaces';\n+import { LateralsService } from '../services';\n+\n+@Controller('projects/:projectId/routes/:routeId/laterals')\n+@UseGuards(AuthenticationGuard)\n+@ApiBearerAuth()\n+export class LateralsController {\n+  constructor(\n+    @Inject(APP_LOGGER)\n+    private readonly logger: AppLogger,\n+    private readonly lateralsService: LateralsService,\n+  ) {\n+    this.logger.setContext(LateralsController.name);\n+  }\n+\n+  @Get()\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @ApiPaginatedResponse(RouteDTO, {\n+    description: 'List of laterals matching filter criteria.',\n+  })\n+  @ApiNotFoundResponse({ description: 'The supplied `projectId` is invalid.' })\n+  @ApiNotFoundResponse({ description: 'The supplied `routeId` is invalid.' })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  public async getAll(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @ScopedRoute() route: Route,\n+    @Query() query: RouteQueryDTO,\n+  ): Promise<PaginatedResponseDTO<RouteDTO>> {\n+    const { total, records } = await this.lateralsService.findAll(\n+      project,\n+      route,\n+      user.profile,\n+      query,\n+    );\n+    return {\n+      total,\n+      limit: query.limit,\n+      offset: query.page,\n+      data: plainToClass(RouteDTO, records),\n+    };\n+  }\n+\n+  @Get(':id')\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @LateralIdParam()\n+  @ApiWrappedResponse(ApiOkResponse, RouteDTO, {\n+    description: 'Route information',\n+  })\n+  @ApiNotFoundResponse({\n+    description: 'No lateral matching the supplied arguments could be found.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  @UseInterceptors(NotFoundInterceptor)\n+  public async findOne(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @ScopedRoute() route: Route,\n+    @Param('id') id: number,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const lateral = await this.lateralsService.findOne(\n+      project,\n+      route,\n+      user.profile,\n+      id,\n+    );\n+\n+    return lateral ? { data: plainToClass(RouteDTO, lateral) } : null;\n+  }\n+\n+  @Post()\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @ApiWrappedResponse(ApiCreatedResponse, RouteDTO, {\n+    description: 'Lateral created successfully.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  @ApiBadRequestResponse({\n+    description: 'The supplied properties are invalid.',\n+  })\n+  public async create(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @ScopedRoute() route: Route,\n+    @Body() lateralCreateDTO: RouteCreateDTO,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const lateral = await this.lateralsService.create(\n+      project,\n+      route,\n+      user.profile,\n+      lateralCreateDTO,\n+    );\n+\n+    return lateral ? { data: plainToClass(RouteDTO, lateral) } : null;\n+  }\n+\n+  @Patch(':id')\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @LateralIdParam()\n+  @ApiWrappedResponse(ApiOkResponse, RouteDTO, {\n+    description: 'The lateral was updated successfully.',\n+  })\n+  @ApiNotFoundResponse({\n+    description: 'No lateral matching the supplied arguments could be found.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",",
        "created_at": "2021-07-29T18:18:07Z",
        "body": "derp, I missed it."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/121",
      "updated_at": "2021-07-29T20:24:58Z",
      "title": "[Snyk] Upgrade fishery from 1.3.1 to 1.4.0",
      "state": "closed",
      "number": 121,
      "merged_at": "2021-07-29T20:24:58Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "1a7882c80ddf364242c61f9b1287339e88e2f8af",
        "ref": "snyk-upgrade-07405b3db1a52abea19f2c8b95175cc8"
      },
      "created_at": "2021-07-24T00:59:59Z",
      "closed_at": "2021-07-29T20:24:58Z",
      "body": "<h3>Snyk has created this PR to upgrade fishery from 1.3.1 to 1.4.0.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=fishery&from_version=1.3.1&to_version=1.4.0&pr_id=343e0a71-43b4-4891-9d27-10dc95233848&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **21 days ago**, on 2021-07-02.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>fishery</b></summary>\n    <ul>\n      <li>\n        <b>1.4.0</b> - <a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/releases/tag/v1.4.0\">2021-07-02</a></br><p>Fixed an issue where passing <code>undefined</code> when building an object did not override the value defined by the factory. This also affected other areas where deep merging was being done (eg. <code>params()</code>).</p>\n<p>See <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"781980441\" data-permission-text=\"Title is private\" data-url=\"https://github.com/thoughtbot/fishery/issues/44\" data-hovercard-type=\"issue\" data-hovercard-url=\"/thoughtbot/fishery/issues/44/hovercard\" href=\"https://snyk.io/redirect/github/thoughtbot/fishery/issues/44\">#44</a> for more information.</p>\n      </li>\n      <li>\n        <b>1.3.1</b> - <a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/releases/tag/v1.3.1\">2021-05-14</a></br><p>Previously, deep merge was only being done when merging the params supplied to <code>build()</code> on top of the object defined in the factory definition.</p>\n<p>This makes it so a deep merge is also performed when merging the params supplied to <code>params()</code> into the params supplied to <code>build()</code> and also when merging params from multiple <code>params()</code> calls into each other.</p>\n<p>See <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"892241109\" data-permission-text=\"Title is private\" data-url=\"https://github.com/thoughtbot/fishery/issues/59\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/thoughtbot/fishery/pull/59/hovercard\" href=\"https://snyk.io/redirect/github/thoughtbot/fishery/pull/59\">#59</a>.</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/releases\">fishery GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>fishery</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/commit/6bbde3712e6d1aaf36c513fbb73e70c221e6cce9\">6bbde37</a> 1.4.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/commit/d7bbdf4b21a7b9c817d2145a14f04f61086085d2\">d7bbdf4</a> Upgrade jest, TypeScript, Prettier (#65)</li>\n      <li><a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/commit/0d5215c6b7b71ef019b00d51fb85f83d2b1d0a58\">0d5215c</a> Rename scripts</li>\n      <li><a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/commit/eb0f76baec32b333538b25d9f407773f57005ece\">eb0f76b</a> Preserve the object passed to build function (#62)</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/compare/3eb0ec1bbca1ec87e89213a0061483f476b8db49...6bbde3712e6d1aaf36c513fbb73e70c221e6cce9\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIzNDNlMGE3MS00M2I0LTQ4OTEtOWQyNy0xMGRjOTUyMzM4NDgiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjM0M2UwYTcxLTQzYjQtNDg5MS05ZDI3LTEwZGM5NTIzMzg0OCJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;fishery&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"343e0a71-43b4-4891-9d27-10dc95233848\",\"prPublicId\":\"343e0a71-43b4-4891-9d27-10dc95233848\",\"dependencies\":[{\"name\":\"fishery\",\"from\":\"1.3.1\",\"to\":\"1.4.0\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-07-02T18:19:40.260Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5f8cfacd3480ecfba474ac1cbda6ceb50e082930",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/120",
      "updated_at": "2021-07-29T20:31:53Z",
      "title": "[Snyk] Upgrade @nestjs/swagger from 4.8.0 to 4.8.2",
      "state": "closed",
      "number": 120,
      "merged_at": "2021-07-29T20:31:52Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "06931184679c4f00bc2ec35dd9cd966a370c319d",
        "ref": "snyk-upgrade-4e85955e9efb4cbba74eb446f6080987"
      },
      "created_at": "2021-07-22T05:02:47Z",
      "closed_at": "2021-07-29T20:31:53Z",
      "body": "<h3>Snyk has created this PR to upgrade @nestjs/swagger from 4.8.0 to 4.8.2.</h3>\n\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **2 versions** ahead of your current version.\n- The recommended version was released **22 days ago**, on 2021-06-30.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>@nestjs/swagger</b></summary>\n    <ul>\n      <li>\n        <b>4.8.2</b> - <a href=\"https://snyk.io/redirect/github/nestjs/swagger/releases/tag/4.8.2\">2021-06-30</a></br><ul>\n<li>fix(plugin): transform absolute paths <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"933005227\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nestjs/swagger/issues/1411\" data-hovercard-type=\"issue\" data-hovercard-url=\"/nestjs/swagger/issues/1411/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/issues/1411\">#1411</a> (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/ae70da9cbbfad4c4c80d604fb5f4b436f9ef7595/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/ae70da9cbbfad4c4c80d604fb5f4b436f9ef7595\"><tt>ae70da9</tt></a>)</li>\n<li>chore(deps): update dependency fastify-swagger to v4.8.1 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/fe98e6aa23c3b9df673017f1b6b0098932e394b5/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/fe98e6aa23c3b9df673017f1b6b0098932e394b5\"><tt>fe98e6a</tt></a>)</li>\n<li>chore(deps): update typescript-eslint monorepo to v4.28.1 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/c722f48c2d374d34c38296bf3ba6a5b5f01ceee9/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/c722f48c2d374d34c38296bf3ba6a5b5f01ceee9\"><tt>c722f48</tt></a>)</li>\n<li>Merge pull request <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"930599976\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nestjs/swagger/issues/1405\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/nestjs/swagger/pull/1405/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/pull/1405\">#1405</a> from mo4islona/fix/lint (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/2b27e14a3108bdb7e5749559b3379315b775b481/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/2b27e14a3108bdb7e5749559b3379315b775b481\"><tt>2b27e14</tt></a>)</li>\n<li>chore(deps): update dependency prettier to v2.3.2 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/255ca31783b14dbc6daada6b3c0cfe159ee8e1f6/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/255ca31783b14dbc6daada6b3c0cfe159ee8e1f6\"><tt>255ca31</tt></a>)</li>\n<li>fix: remove prettier/<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/typescript-eslint/hovercard\" href=\"https://snyk.io/redirect/github/typescript-eslint\">@ typescript-eslint</a> from eslint config (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/7913d1ccdfc8d3715c6bfb98947dde76cac2796e/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/7913d1ccdfc8d3715c6bfb98947dde76cac2796e\"><tt>7913d1c</tt></a>)</li>\n<li>chore(deps): update dependency @ types/node to v14.17.4 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/55199183ce3576e6d70b94b48c49fc57ea510ece/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/55199183ce3576e6d70b94b48c49fc57ea510ece\"><tt>5519918</tt></a>)</li>\n<li>chore(deps): update typescript-eslint monorepo to v4.28.0 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/9e33248b2b54d2431c69dfde8aa71307df8fb71c/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9e33248b2b54d2431c69dfde8aa71307df8fb71c\"><tt>9e33248</tt></a>)</li>\n<li>chore(deps): update dependency fastify-swagger to v4.8.0 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/b000a18f062d4603ca27a7755d49320b3a92841a/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/b000a18f062d4603ca27a7755d49320b3a92841a\"><tt>b000a18</tt></a>)</li>\n<li>chore(deps): update dependency release-it to v14.10.0 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/4a9153bc3b0b43e51c4245e433398e40bba33ad6/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/4a9153bc3b0b43e51c4245e433398e40bba33ad6\"><tt>4a9153b</tt></a>)</li>\n<li>chore(deps): update dependency eslint to v7.29.0 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/888f4ed30d82f4e6a8780585711f6f3d24caba7f/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/888f4ed30d82f4e6a8780585711f6f3d24caba7f\"><tt>888f4ed</tt></a>)</li>\n</ul>\n      </li>\n      <li>\n        <b>4.8.1</b> - <a href=\"https://snyk.io/redirect/github/nestjs/swagger/releases/tag/4.8.1\">2021-06-18</a></br><a href=\"https://snyk.io/redirect/github/nestjs/swagger/releases/tag/4.8.1\"> Read more </a>\n      </li>\n      <li>\n        <b>4.8.0</b> - <a href=\"https://snyk.io/redirect/github/nestjs/swagger/releases/tag/4.8.0\">2021-03-19</a></br><ul>\n<li>fix(plugin): exclude native nodejs libs (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/e05fd6abfb4f2496153f68c57bdeb8aa2b7b1559/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/e05fd6abfb4f2496153f68c57bdeb8aa2b7b1559\"><tt>e05fd6a</tt></a>)</li>\n<li>Merge branch 'jessemyers-array-format-placement' (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/86ee0a01570f3f42e5fc8d1b37ab201d346b837e/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/86ee0a01570f3f42e5fc8d1b37ab201d346b837e\"><tt>86ee0a0</tt></a>)</li>\n<li>fix(): minor tweaks (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/263a7b338972e895ffb5ce1adc72ffe855c5a188/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/263a7b338972e895ffb5ce1adc72ffe855c5a188\"><tt>263a7b3</tt></a>)</li>\n<li>Merge branch 'array-format-placement' of <a href=\"https://snyk.io/redirect/github/jessemyers/swagger\">https://github.com/jessemyers/swagger</a> into jessemyers-array-format-placement (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/a6c3a0e5f76baf45db1145cb6266a81c6c45a42e/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/a6c3a0e5f76baf45db1145cb6266a81c6c45a42e\"><tt>a6c3a0e</tt></a>)</li>\n<li>Merge pull request <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"800713715\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nestjs/swagger/issues/1174\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/nestjs/swagger/pull/1174/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/pull/1174\">#1174</a> from jiqiang90/fix-api-extension (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/770375530fec402272ebcdccc786385f2d951b19/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/770375530fec402272ebcdccc786385f2d951b19\"><tt>7703755</tt></a>)</li>\n<li>Merge pull request <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"815674217\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nestjs/swagger/issues/1230\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/nestjs/swagger/pull/1230/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/pull/1230\">#1230</a> from nean/feat/multiple-authentication-types (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/1129aae736f066dd81f09defd8ca55e0db61e66f/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/1129aae736f066dd81f09defd8ca55e0db61e66f\"><tt>1129aae</tt></a>)</li>\n<li>chore(deps): update dependency @ types/jest to v26.0.21 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/0302396afb2306cf9a04a45f7a281b4a7e1a2b1b/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/0302396afb2306cf9a04a45f7a281b4a7e1a2b1b\"><tt>0302396</tt></a>)</li>\n<li>chore(deps): update dependency ts-jest to v26.5.4 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/3e1e7ad3d3fc9060df86dfe6b7841f118821fb89/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/3e1e7ad3d3fc9060df86dfe6b7841f118821fb89\"><tt>3e1e7ad</tt></a>)</li>\n<li>Merge pull request <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"804491503\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nestjs/swagger/issues/1187\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/nestjs/swagger/pull/1187/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/pull/1187\">#1187</a> from Tony133/feat/add-pattern-properties (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/7d48efb3c20683c85ec1bc0d9bed6ed8702ac7bc/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/7d48efb3c20683c85ec1bc0d9bed6ed8702ac7bc\"><tt>7d48efb</tt></a>)</li>\n<li>Merge pull request <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"808844809\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nestjs/swagger/issues/1209\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/nestjs/swagger/pull/1209/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/pull/1209\">#1209</a> from Tony133/chore/update-openapi-spec-interface (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/8eb3c28be86f1b4c193a7674e510eab6d5d1c9a1/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/8eb3c28be86f1b4c193a7674e510eab6d5d1c9a1\"><tt>8eb3c28</tt></a>)</li>\n<li>Update lib/interfaces/open-api-spec.interface.ts (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/1302e9f23f68c8d864a3479e8572511a57ea12c2/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/1302e9f23f68c8d864a3479e8572511a57ea12c2\"><tt>1302e9f</tt></a>)</li>\n<li>chore(deps): update dependency fastify-swagger to v4.4.2 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/25e34fe4a4e415016380304446923c1809697951/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/25e34fe4a4e415016380304446923c1809697951\"><tt>25e34fe</tt></a>)</li>\n<li>chore(deps): update dependency @ types/node to v11.15.49 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/3b496d3e032671c047e35d0f12dcc94eb62be57e/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/3b496d3e032671c047e35d0f12dcc94eb62be57e\"><tt>3b496d3</tt></a>)</li>\n<li>chore(deps): update typescript-eslint monorepo to v4.18.0 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/132d595edf39e5c99aeb29a21851341d78f040be/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/132d595edf39e5c99aeb29a21851341d78f040be\"><tt>132d595</tt></a>)</li>\n<li>chore(deps): update dependency eslint to v7.22.0 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/2463cd0a5ffc1e68c57e37e10dbce9de57345098/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/2463cd0a5ffc1e68c57e37e10dbce9de57345098\"><tt>2463cd0</tt></a>)</li>\n<li>chore(deps): update nest monorepo to v7.6.14 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/438436f45c4639c23a142c03a520c5ceae157d85/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/438436f45c4639c23a142c03a520c5ceae157d85\"><tt>438436f</tt></a>)</li>\n<li>chore(deps): update dependency fastify-swagger to v4.4.1 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/8ec253f55946d9b8ed38b42309060f9895140984/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/8ec253f55946d9b8ed38b42309060f9895140984\"><tt>8ec253f</tt></a>)</li>\n<li>feat: add support for multiple authentication types (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/538231ca5fc7434f096cef19cf7b8dbd03a8192d/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/538231ca5fc7434f096cef19cf7b8dbd03a8192d\"><tt>538231c</tt></a>)</li>\n<li>chore(): improvement in schema object interface (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/9fb8caabd069a2cc3a2db76d8bfcc4a1c2ce3612/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9fb8caabd069a2cc3a2db76d8bfcc4a1c2ce3612\"><tt>9fb8caa</tt></a>)</li>\n<li>feat(): added options pattern properties (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/1f846240a84c22cd3165ffa9f5c01898cdaf7af5/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/1f846240a84c22cd3165ffa9f5c01898cdaf7af5\"><tt>1f84624</tt></a>)</li>\n<li>fix: Move format and other item-level keys inward for arrays (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/cffdd769d2e808ebc692eabb530ebaa3207e6d15/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/cffdd769d2e808ebc692eabb530ebaa3207e6d15\"><tt>cffdd76</tt></a>)</li>\n<li>chore(deps): update dependency lint-staged to v10.5.4 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/855ab146d83e536a76cb2aece6c61b42ad855fc7/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/855ab146d83e536a76cb2aece6c61b42ad855fc7\"><tt>855ab14</tt></a>)</li>\n<li>fix(api-extension): Add test case for array in e2e (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/eb4916a3ea76901d12d8e65259c3c1d5d45c953c/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/eb4916a3ea76901d12d8e65259c3c1d5d45c953c\"><tt>eb4916a</tt></a>)</li>\n<li>fix(api-extension): Handle correct array value (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/016dadc2f274d896ee809818c4c5e82da602f8d6/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/016dadc2f274d896ee809818c4c5e82da602f8d6\"><tt>016dadc</tt></a>)</li>\n</ul>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nestjs/swagger/releases\">@nestjs/swagger GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>@nestjs/swagger</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/ae70da9cbbfad4c4c80d604fb5f4b436f9ef7595\">ae70da9</a> fix(plugin): transform absolute paths #1411</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/fe98e6aa23c3b9df673017f1b6b0098932e394b5\">fe98e6a</a> chore(deps): update dependency fastify-swagger to v4.8.1</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/c722f48c2d374d34c38296bf3ba6a5b5f01ceee9\">c722f48</a> chore(deps): update typescript-eslint monorepo to v4.28.1</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/2b27e14a3108bdb7e5749559b3379315b775b481\">2b27e14</a> Merge pull request #1405 from mo4islona/fix/lint</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/255ca31783b14dbc6daada6b3c0cfe159ee8e1f6\">255ca31</a> chore(deps): update dependency prettier to v2.3.2</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/7913d1ccdfc8d3715c6bfb98947dde76cac2796e\">7913d1c</a> fix: remove prettier/@ typescript-eslint from eslint config</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/55199183ce3576e6d70b94b48c49fc57ea510ece\">5519918</a> chore(deps): update dependency @ types/node to v14.17.4</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9e33248b2b54d2431c69dfde8aa71307df8fb71c\">9e33248</a> chore(deps): update typescript-eslint monorepo to v4.28.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/b000a18f062d4603ca27a7755d49320b3a92841a\">b000a18</a> chore(deps): update dependency fastify-swagger to v4.8.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/4a9153bc3b0b43e51c4245e433398e40bba33ad6\">4a9153b</a> chore(deps): update dependency release-it to v14.10.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/888f4ed30d82f4e6a8780585711f6f3d24caba7f\">888f4ed</a> chore(deps): update dependency eslint to v7.29.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/1e511e5cf1c288d036f9ef0f7d85731d28f79e57\">1e511e5</a> chore(): release v4.8.1</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9b2049a786e4d74fec8d521e06fe48de20d3f53b\">9b2049a</a> Merge pull request #1308 from bilalshaikh42/patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9c69f5a7e0510ec449cb49ee59f887935c775e7a\">9c69f5a</a> Merge pull request #1309 from gperdomor/patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/7258fca5e0de08813194aaf5f4daae197617f956\">7258fca</a> Merge pull request #1318 from deviantfero/master</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/710dbb80a47444b77b33a5931902aecb1a4d614a\">710dbb8</a> Merge pull request #1343 from ppkgtmm/reduce-double-loop</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/67254ecfd42978206e3f1c5998039da5137470dd\">67254ec</a> test9): fix swagger explorer unit tests</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/8e8935131d146bc4ac3beaa22a2a7f4cec00fc0e\">8e89351</a> Merge pull request #1268 from konne/fix-ApiBodyExamples</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/1458c0bcc8e204a4c072f95cea5763cc738312c3\">1458c0b</a> Merge pull request #1279 from tombarton/fix/enum-name-leak</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9822b06480429d4a3afbf3f0c44d4610103808a5\">9822b06</a> Merge pull request #1277 from nestjs/renovate/nestjs-mapped-types-0.x</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/8a72b6c54ebbd1be062f8c0a64046da75d3d13fd\">8a72b6c</a> Merge pull request #1223 from tourlbr/fix/adjust-api-query-decorator-for-enums</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/b9713a395e9b46b2a0ec4f6018f925ed23813c2b\">b9713a3</a> Merge pull request #1372 from nestjs/renovate/circleci-node-16.x</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9505503b2b3d12e7cd71f080f76e872e62e7e0fb\">9505503</a> chore(deps): update nest monorepo to v7.6.18</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9cfe03e1a4996af4dcd5a17064bb2c79c6b510db\">9cfe03e</a> chore(deps): update typescript-eslint monorepo to v4.27.0</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/nestjs/swagger/compare/e05fd6abfb4f2496153f68c57bdeb8aa2b7b1559...ae70da9cbbfad4c4c80d604fb5f4b436f9ef7595\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJhYzMzZWEyOS02OTQ1LTQwZDktOGNhMy04ZGZiNzRiNmJmMjciLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImFjMzNlYTI5LTY5NDUtNDBkOS04Y2EzLThkZmI3NGI2YmYyNyJ9fQ==\" width=\"0\" height=\"0\"/><img src=\"https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=@nestjs/swagger&from_version=4.8.0&to_version=4.8.2&pr_id=ac33ea29-6945-40d9-8ca3-8dfb74b6bf27&visibility=false&has_feature_flag=false\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;@nestjs/swagger&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"ac33ea29-6945-40d9-8ca3-8dfb74b6bf27\",\"prPublicId\":\"ac33ea29-6945-40d9-8ca3-8dfb74b6bf27\",\"dependencies\":[{\"name\":\"@nestjs/swagger\",\"from\":\"4.8.0\",\"to\":\"4.8.2\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":2,\"publishedDate\":\"2021-06-30T09:21:06.246Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5f8cfacd3480ecfba474ac1cbda6ceb50e082930",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/119",
      "updated_at": "2021-07-29T17:19:23Z",
      "title": "[IMERC-304] Only send to CARTO those segments that need to be re-optimized.",
      "state": "closed",
      "number": 119,
      "merged_at": "2021-07-29T17:19:22Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "8fb67dfc9c9f31f6d6b7e133aa38203ebb25bf36",
        "ref": "feature/IMERC-304-route-optimization"
      },
      "created_at": "2021-07-21T17:01:32Z",
      "closed_at": "2021-07-29T17:19:22Z",
      "body": "[IMERC-304](https://imercatus.backlog.com/view/IMERC-304)\r\n\r\nShould avoid re-optimizing any segments that have already been optimized through CARTO.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5f8cfacd3480ecfba474ac1cbda6ceb50e082930",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "laantorchaweb",
          "html_url": "https://github.com/laantorchaweb"
        },
        "pull_request_review_id": 713048872,
        "path": "src/route-planner/services/routes.service.ts",
        "id": 675005850,
        "diff_hunk": "@@ -117,19 +121,28 @@ export class RoutesService {\n     return null;\n   }\n \n-  static generateSegments(points: UserDefinedPoint[]): Segment[] {\n-    const segments = [];\n+  static generateSegments(\n+    points: UserDefinedPoint[],\n+    segments: Segment[],\n+  ): Segment[] {\n     let prev: Position = null;\n-    points.forEach((p) => {\n+    return points.reduce((acc, point): Segment[] => {\n       if (prev) {\n-        segments.push({\n-          id: nanoid(),\n+        const optimized = segments",
        "created_at": "2021-07-22T17:23:43Z",
        "body": "I'm nitpicking so feel free to disregard this comment, but maybe instead of using a ternary you can just do a simple `or` compare when using the optional chaining operator.\r\n\r\n```javascript\r\nconst optimized = segments?.find(...) || null\r\n```"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 713055500,
        "path": "src/route-planner/services/routes.service.ts",
        "in_reply_to_id": 675005850,
        "id": 675013556,
        "diff_hunk": "@@ -117,19 +121,28 @@ export class RoutesService {\n     return null;\n   }\n \n-  static generateSegments(points: UserDefinedPoint[]): Segment[] {\n-    const segments = [];\n+  static generateSegments(\n+    points: UserDefinedPoint[],\n+    segments: Segment[],\n+  ): Segment[] {\n     let prev: Position = null;\n-    points.forEach((p) => {\n+    return points.reduce((acc, point): Segment[] => {\n       if (prev) {\n-        segments.push({\n-          id: nanoid(),\n+        const optimized = segments",
        "created_at": "2021-07-22T17:31:19Z",
        "body": "I always forget about `?` in typescript.  Making that change now."
      },
      {
        "user": {
          "login": "laantorchaweb",
          "html_url": "https://github.com/laantorchaweb"
        },
        "pull_request_review_id": 713059212,
        "path": "src/route-planner/services/carto.service.ts",
        "id": 675018316,
        "diff_hunk": "@@ -60,43 +60,50 @@ export class CartoService {\n     const url = `${cartoConfig.host}/api/v1/routes`;\n \n     return Promise.all(\n-      route.segments.map(async (s) => {\n-        const res = await this.http\n-          .post(\n-            url,\n-            {\n-              origin: {\n-                long: s.origin[0],\n-                lat: s.origin[1],\n-              },\n-              destination: {\n-                long: s.destination[0],\n-                lat: s.destination[1],\n+      route.segments\n+        .filter(\n+          (s) =>\n+            s.optimizedPoints === null ||",
        "created_at": "2021-07-22T17:35:30Z",
        "body": "me again, nitpicking, `s.optimizedPoints` is enough to disregard `null` and `undefined` because filter expects a boolean, so I think this could be simplified so it's a bit more readable:\r\n\r\n```javascript\r\nfilter((s) => s.optimizedPoints && s.optimizedPoints?.length !== 0)\r\n```"
      },
      {
        "user": {
          "login": "mfcallahan",
          "html_url": "https://github.com/mfcallahan"
        },
        "pull_request_review_id": 713296230,
        "path": "src/route-planner/services/routes.service.ts",
        "in_reply_to_id": 675005850,
        "id": 675213211,
        "diff_hunk": "@@ -117,19 +121,28 @@ export class RoutesService {\n     return null;\n   }\n \n-  static generateSegments(points: UserDefinedPoint[]): Segment[] {\n-    const segments = [];\n+  static generateSegments(\n+    points: UserDefinedPoint[],\n+    segments: Segment[],\n+  ): Segment[] {\n     let prev: Position = null;\n-    points.forEach((p) => {\n+    return points.reduce((acc, point): Segment[] => {\n       if (prev) {\n-        segments.push({\n-          id: nanoid(),\n+        const optimized = segments",
        "created_at": "2021-07-22T22:56:27Z",
        "body": "Optional chaining - one of my favorite recet-ish features of TypeScript! Something that had been in C# and other languages for a long time and I was happy when it was introduced in TS & JS."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/118",
      "updated_at": "2021-07-16T21:45:47Z",
      "title": "[IMERC-345] Properly optimize routes with more than 2 points.",
      "state": "closed",
      "number": 118,
      "merged_at": "2021-07-16T21:45:47Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c993f1688c6cc9109d9cb54ad7ed863c35316968",
        "ref": "bugfix/IMERC-345-optimize-three-points"
      },
      "created_at": "2021-07-16T21:05:53Z",
      "closed_at": "2021-07-16T21:45:47Z",
      "body": "[IMERC-345](https://imercatus.backlog.com/view/IMERC-345)\r\n\r\nFixes a bug that occurred when `/refresh` was called on a route with more than 2 points.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "24b913158cb63d34e2fc53e1082aa701f3eb5f6d",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/117",
      "updated_at": "2021-07-16T19:18:19Z",
      "title": "[IMERC-335] Auto-activate users during registration.",
      "state": "closed",
      "number": 117,
      "merged_at": "2021-07-16T16:22:15Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "57d2733f806837aec8043faf26a76199bb9792b7",
        "ref": "feature/IMERC-335-auto-activate"
      },
      "created_at": "2021-07-16T16:15:49Z",
      "closed_at": "2021-07-16T16:22:15Z",
      "body": "[IMERC-335](https://imercatus.backlog.com/view/IMERC-335)\r\n\r\nThis behavior can be changed by passing `activate=0` in the query string\r\nof the `POST` request.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "fb79759ef414fd96feee3f5f9cc42fe4d8c21014",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/116",
      "updated_at": "2021-07-29T20:35:13Z",
      "title": "[Snyk] Upgrade nodemailer from 6.6.1 to 6.6.2",
      "state": "closed",
      "number": 116,
      "merged_at": "2021-07-29T20:35:13Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "aceb3bf7958a9c23447bd3971908dc15faae6695",
        "ref": "snyk-upgrade-aeebc72666f656301111c29cebcd60e8"
      },
      "created_at": "2021-07-13T23:00:33Z",
      "closed_at": "2021-07-29T20:35:13Z",
      "body": "<h3>Snyk has created this PR to upgrade nodemailer from 6.6.1 to 6.6.2.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=nodemailer&from_version=6.6.1&to_version=6.6.2&pr_id=38028d13-ba6c-42de-a300-4d26639eb757&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **a month ago**, on 2021-06-18.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>nodemailer</b></summary>\n    <ul>\n      <li>\n        <b>6.6.2</b> - 2021-06-18\n      </li>\n      <li>\n        <b>6.6.1</b> - <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases/tag/v6.6.1\">2021-05-23</a></br><p>v6.6.1</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases\">nodemailer GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>nodemailer</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/b75e539d71daa0b40248273e0e1d328c1e262bdd\">b75e539</a> v6.6.2</li>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/b4b91d5ec7029565823cbba0c017b646d777fc56\">b4b91d5</a> Bug Fix smtp connection crashing the process</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/compare/7e02648cc8cd863f5085bad3cd09087bccf84b9f...b75e539d71daa0b40248273e0e1d328c1e262bdd\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIzODAyOGQxMy1iYTZjLTQyZGUtYTMwMC00ZDI2NjM5ZWI3NTciLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjM4MDI4ZDEzLWJhNmMtNDJkZS1hMzAwLTRkMjY2MzllYjc1NyJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;nodemailer&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"38028d13-ba6c-42de-a300-4d26639eb757\",\"prPublicId\":\"38028d13-ba6c-42de-a300-4d26639eb757\",\"dependencies\":[{\"name\":\"nodemailer\",\"from\":\"6.6.1\",\"to\":\"6.6.2\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-06-18T06:17:44.715Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "fb79759ef414fd96feee3f5f9cc42fe4d8c21014",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/115",
      "updated_at": "2021-07-29T20:49:06Z",
      "title": "[Snyk] Upgrade: @nestjs/common, @nestjs/core, @nestjs/platform-express",
      "state": "closed",
      "number": 115,
      "merged_at": "2021-07-29T20:49:06Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ab74549280e66a5f386e1ce6c2aa3911aef57035",
        "ref": "snyk-upgrade-5947116609858cac9a07f7acbd676505"
      },
      "created_at": "2021-07-13T23:00:29Z",
      "closed_at": "2021-07-29T20:49:06Z",
      "body": "<h3>Snyk has created this PR to upgrade multiple dependencies.</h3>\nüëØ The following dependencies are linked and will therefore be updated together.\n</br></br>\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n</br></br>\n\n Name         | Versions     | Released on\n:-------------|:-------------|:-------------\n**@nestjs/common**</br>from 7.6.17 to 7.6.18 | **1 version** ahead of your current version | **a month ago**</br>on 2021-06-17\n**@nestjs/core**</br>from 7.6.17 to 7.6.18 | **1 version** ahead of your current version | **a month ago**</br>on 2021-06-17\n**@nestjs/platform-express**</br>from 7.6.17 to 7.6.18 | **1 version** ahead of your current version | **a month ago**</br>on 2021-06-17\n\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>@nestjs/common</b></summary>\n    <ul>\n      <li>\n        <b>7.6.18</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.18\">2021-06-17</a></br><p>v7.6.18</p>\n      </li>\n      <li>\n        <b>7.6.17</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.17\">2021-05-18</a></br><p>v7.6.17</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases\">@nestjs/common GitHub release notes</a>\n  </details>\n  <details>\n    <summary>Package name: <b>@nestjs/core</b></summary>\n    <ul>\n      <li>\n        <b>7.6.18</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.18\">2021-06-17</a></br><p>v7.6.18</p>\n      </li>\n      <li>\n        <b>7.6.17</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.17\">2021-05-18</a></br><p>v7.6.17</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases\">@nestjs/core GitHub release notes</a>\n  </details>\n  <details>\n    <summary>Package name: <b>@nestjs/platform-express</b></summary>\n    <ul>\n      <li>\n        <b>7.6.18</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.18\">2021-06-17</a></br><p>v7.6.18</p>\n      </li>\n      <li>\n        <b>7.6.17</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.17\">2021-05-18</a></br><p>v7.6.17</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases\">@nestjs/platform-express GitHub release notes</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI4Y2NmMmVmOS03M2JjLTQyNjQtOTVmOC1jNTlmY2JkYjQ2MDUiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjhjY2YyZWY5LTczYmMtNDI2NC05NWY4LWM1OWZjYmRiNDYwNSJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;@nestjs/common&amp;pkg&#x3D;@nestjs/core&amp;pkg&#x3D;@nestjs/platform-express&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"8ccf2ef9-73bc-4264-95f8-c59fcbdb4605\",\"prPublicId\":\"8ccf2ef9-73bc-4264-95f8-c59fcbdb4605\",\"dependencies\":[{\"name\":\"@nestjs/common\",\"from\":\"7.6.17\",\"to\":\"7.6.18\"},{\"name\":\"@nestjs/core\",\"from\":\"7.6.17\",\"to\":\"7.6.18\"},{\"name\":\"@nestjs/platform-express\",\"from\":\"7.6.17\",\"to\":\"7.6.18\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-06-17T09:17:46.379Z\"},\"templateVariants\":[],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e44b75cb625ddf4926b21cf75c13bb10594a2b96",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/114",
      "updated_at": "2021-07-30T16:46:01Z",
      "title": "[Snyk] Upgrade cache-manager from 3.4.3 to 3.4.4",
      "state": "closed",
      "number": 114,
      "merged_at": "2021-07-30T16:46:00Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "2d446b5a825c956fe9905c82bd7f6d9bc17b1e18",
        "ref": "snyk-upgrade-87f28bdf8e650b3aa6c5ffe82ceef941"
      },
      "created_at": "2021-07-13T23:00:25Z",
      "closed_at": "2021-07-30T16:46:00Z",
      "body": "<h3>Snyk has created this PR to upgrade cache-manager from 3.4.3 to 3.4.4.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=cache-manager&from_version=3.4.3&to_version=3.4.4&pr_id=8dd4058e-bff8-4c64-a414-ef7b937e844b&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **a month ago**, on 2021-06-11.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>cache-manager</b></summary>\n    <ul>\n      <li>\n        <b>3.4.4</b> - <a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/releases/tag/3.4.4\">2021-06-11</a></br><p>3.4.4</p>\n      </li>\n      <li>\n        <b>3.4.3</b> - <a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/releases/tag/3.4.3\">2021-03-30</a></br><p>3.4.3</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/releases\">cache-manager GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>cache-manager</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/5d5f69c7b348c43fa61f4846990908f89684d09b\">5d5f69c</a> Merge branch &#x27;release/3.4.4&#x27;</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/1e072a2a4d365ae745944704d537bf4a4cdb3a33\">1e072a2</a> 3.4.4</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/4be28ba01766720a5a2967a10e67806f0d15e42f\">4be28ba</a> minor package-lock.json change</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/98bba45059555b115b31eed689f7e6a1275341b0\">98bba45</a> Merge pull request #160 from BryanDonovan/dependabot/npm_and_yarn/glob-parent-5.1.2</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/37591b4fa7b2fa9303f56b2eccdeaccf57bef5a0\">37591b4</a> Bump glob-parent from 5.1.1 to 5.1.2</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/b3aa1d59885d5a011fd02f8c197c78f4f6235dde\">b3aa1d5</a> Merge pull request #157 from axolo/patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/ea78b1d34745093ea8ea86ef7cb910fcf6d62d55\">ea78b1d</a> fix: memoryCache.set example of README.md</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/af422f1279aa89ec309e2bb927300945eecca2fe\">af422f1</a> removing node 6 and adding node 14 in travis config</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/ae5db2449b743927ef42cf1d7b9dd50dc44913a0\">ae5db24</a> Merge pull request #156 from NicolasMahe/patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/97d642f30c8c35f93d96f610f3cdea8a4fce0102\">97d642f</a> Remove node-cache-manager-fs from README.md</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/606bf6240fdfe17403f7f89c6031e08eba7411ad\">606bf62</a> Merge branch &#x27;release/3.4.3&#x27; into develop</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/compare/2a5ed3ae2fe72ff410b76fce13e6cf7cdf4ad209...5d5f69c7b348c43fa61f4846990908f89684d09b\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI4ZGQ0MDU4ZS1iZmY4LTRjNjQtYTQxNC1lZjdiOTM3ZTg0NGIiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjhkZDQwNThlLWJmZjgtNGM2NC1hNDE0LWVmN2I5MzdlODQ0YiJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba/settings/integration?pkg&#x3D;cache-manager&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"8dd4058e-bff8-4c64-a414-ef7b937e844b\",\"prPublicId\":\"8dd4058e-bff8-4c64-a414-ef7b937e844b\",\"dependencies\":[{\"name\":\"cache-manager\",\"from\":\"3.4.3\",\"to\":\"3.4.4\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/12aa33dd-ae7e-48e9-823d-f7886983c7ba?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"12aa33dd-ae7e-48e9-823d-f7886983c7ba\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-06-11T16:13:55.252Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "fb79759ef414fd96feee3f5f9cc42fe4d8c21014",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/113",
      "updated_at": "2021-07-13T18:28:41Z",
      "title": "[IMERC-289] Add the ability to \"poll\" the CARTO API to check optimization status.",
      "state": "closed",
      "number": 113,
      "merged_at": "2021-07-13T18:28:41Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "97217cf2955bd52f0c9ff655fea5e34968245461",
        "ref": "feature/IMERC-289-optimization-results"
      },
      "created_at": "2021-07-13T18:00:52Z",
      "closed_at": "2021-07-13T18:28:41Z",
      "body": "[IMERC-289](https://imercatus.backlog.com/view/IMERC-289)\r\n\r\nProvides an endpoint to the FE to request a status update for a previously queued route optimization.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "53c7fc91f908649cf5522f90e31557cfb17aabee",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/112",
      "updated_at": "2021-08-23T15:54:52Z",
      "title": "[Snyk] Upgrade @nestjs/swagger from 4.8.0 to 4.8.1",
      "state": "closed",
      "number": 112,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "d49e2020673e84a755fe45990123aad8665b5a3e",
        "ref": "snyk-upgrade-1d82165f9a1fc1b9e241a0bed52078fb"
      },
      "created_at": "2021-07-12T22:17:34Z",
      "closed_at": "2021-07-12T22:37:10Z",
      "body": "<h3>Snyk has created this PR to upgrade @nestjs/swagger from 4.8.0 to 4.8.1.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=@nestjs/swagger&from_version=4.8.0&to_version=4.8.1&pr_id=b0d7ce05-4b41-474f-8875-b89f57303f05&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **24 days ago**, on 2021-06-18.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>@nestjs/swagger</b></summary>\n    <ul>\n      <li>\n        <b>4.8.1</b> - <a href=\"https://snyk.io/redirect/github/nestjs/swagger/releases/tag/4.8.1\">2021-06-18</a></br><a href=\"https://snyk.io/redirect/github/nestjs/swagger/releases/tag/4.8.1\"> Read more </a>\n      </li>\n      <li>\n        <b>4.8.0</b> - <a href=\"https://snyk.io/redirect/github/nestjs/swagger/releases/tag/4.8.0\">2021-03-19</a></br><ul>\n<li>fix(plugin): exclude native nodejs libs (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/e05fd6abfb4f2496153f68c57bdeb8aa2b7b1559/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/e05fd6abfb4f2496153f68c57bdeb8aa2b7b1559\"><tt>e05fd6a</tt></a>)</li>\n<li>Merge branch 'jessemyers-array-format-placement' (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/86ee0a01570f3f42e5fc8d1b37ab201d346b837e/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/86ee0a01570f3f42e5fc8d1b37ab201d346b837e\"><tt>86ee0a0</tt></a>)</li>\n<li>fix(): minor tweaks (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/263a7b338972e895ffb5ce1adc72ffe855c5a188/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/263a7b338972e895ffb5ce1adc72ffe855c5a188\"><tt>263a7b3</tt></a>)</li>\n<li>Merge branch 'array-format-placement' of <a href=\"https://snyk.io/redirect/github/jessemyers/swagger\">https://github.com/jessemyers/swagger</a> into jessemyers-array-format-placement (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/a6c3a0e5f76baf45db1145cb6266a81c6c45a42e/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/a6c3a0e5f76baf45db1145cb6266a81c6c45a42e\"><tt>a6c3a0e</tt></a>)</li>\n<li>Merge pull request <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"800713715\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nestjs/swagger/issues/1174\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/nestjs/swagger/pull/1174/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/pull/1174\">#1174</a> from jiqiang90/fix-api-extension (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/770375530fec402272ebcdccc786385f2d951b19/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/770375530fec402272ebcdccc786385f2d951b19\"><tt>7703755</tt></a>)</li>\n<li>Merge pull request <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"815674217\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nestjs/swagger/issues/1230\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/nestjs/swagger/pull/1230/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/pull/1230\">#1230</a> from nean/feat/multiple-authentication-types (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/1129aae736f066dd81f09defd8ca55e0db61e66f/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/1129aae736f066dd81f09defd8ca55e0db61e66f\"><tt>1129aae</tt></a>)</li>\n<li>chore(deps): update dependency @ types/jest to v26.0.21 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/0302396afb2306cf9a04a45f7a281b4a7e1a2b1b/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/0302396afb2306cf9a04a45f7a281b4a7e1a2b1b\"><tt>0302396</tt></a>)</li>\n<li>chore(deps): update dependency ts-jest to v26.5.4 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/3e1e7ad3d3fc9060df86dfe6b7841f118821fb89/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/3e1e7ad3d3fc9060df86dfe6b7841f118821fb89\"><tt>3e1e7ad</tt></a>)</li>\n<li>Merge pull request <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"804491503\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nestjs/swagger/issues/1187\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/nestjs/swagger/pull/1187/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/pull/1187\">#1187</a> from Tony133/feat/add-pattern-properties (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/7d48efb3c20683c85ec1bc0d9bed6ed8702ac7bc/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/7d48efb3c20683c85ec1bc0d9bed6ed8702ac7bc\"><tt>7d48efb</tt></a>)</li>\n<li>Merge pull request <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"808844809\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nestjs/swagger/issues/1209\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/nestjs/swagger/pull/1209/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/pull/1209\">#1209</a> from Tony133/chore/update-openapi-spec-interface (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/8eb3c28be86f1b4c193a7674e510eab6d5d1c9a1/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/8eb3c28be86f1b4c193a7674e510eab6d5d1c9a1\"><tt>8eb3c28</tt></a>)</li>\n<li>Update lib/interfaces/open-api-spec.interface.ts (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/1302e9f23f68c8d864a3479e8572511a57ea12c2/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/1302e9f23f68c8d864a3479e8572511a57ea12c2\"><tt>1302e9f</tt></a>)</li>\n<li>chore(deps): update dependency fastify-swagger to v4.4.2 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/25e34fe4a4e415016380304446923c1809697951/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/25e34fe4a4e415016380304446923c1809697951\"><tt>25e34fe</tt></a>)</li>\n<li>chore(deps): update dependency @ types/node to v11.15.49 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/3b496d3e032671c047e35d0f12dcc94eb62be57e/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/3b496d3e032671c047e35d0f12dcc94eb62be57e\"><tt>3b496d3</tt></a>)</li>\n<li>chore(deps): update typescript-eslint monorepo to v4.18.0 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/132d595edf39e5c99aeb29a21851341d78f040be/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/132d595edf39e5c99aeb29a21851341d78f040be\"><tt>132d595</tt></a>)</li>\n<li>chore(deps): update dependency eslint to v7.22.0 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/2463cd0a5ffc1e68c57e37e10dbce9de57345098/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/2463cd0a5ffc1e68c57e37e10dbce9de57345098\"><tt>2463cd0</tt></a>)</li>\n<li>chore(deps): update nest monorepo to v7.6.14 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/438436f45c4639c23a142c03a520c5ceae157d85/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/438436f45c4639c23a142c03a520c5ceae157d85\"><tt>438436f</tt></a>)</li>\n<li>chore(deps): update dependency fastify-swagger to v4.4.1 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/8ec253f55946d9b8ed38b42309060f9895140984/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/8ec253f55946d9b8ed38b42309060f9895140984\"><tt>8ec253f</tt></a>)</li>\n<li>feat: add support for multiple authentication types (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/538231ca5fc7434f096cef19cf7b8dbd03a8192d/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/538231ca5fc7434f096cef19cf7b8dbd03a8192d\"><tt>538231c</tt></a>)</li>\n<li>chore(): improvement in schema object interface (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/9fb8caabd069a2cc3a2db76d8bfcc4a1c2ce3612/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9fb8caabd069a2cc3a2db76d8bfcc4a1c2ce3612\"><tt>9fb8caa</tt></a>)</li>\n<li>feat(): added options pattern properties (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/1f846240a84c22cd3165ffa9f5c01898cdaf7af5/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/1f846240a84c22cd3165ffa9f5c01898cdaf7af5\"><tt>1f84624</tt></a>)</li>\n<li>fix: Move format and other item-level keys inward for arrays (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/cffdd769d2e808ebc692eabb530ebaa3207e6d15/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/cffdd769d2e808ebc692eabb530ebaa3207e6d15\"><tt>cffdd76</tt></a>)</li>\n<li>chore(deps): update dependency lint-staged to v10.5.4 (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/855ab146d83e536a76cb2aece6c61b42ad855fc7/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/855ab146d83e536a76cb2aece6c61b42ad855fc7\"><tt>855ab14</tt></a>)</li>\n<li>fix(api-extension): Add test case for array in e2e (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/eb4916a3ea76901d12d8e65259c3c1d5d45c953c/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/eb4916a3ea76901d12d8e65259c3c1d5d45c953c\"><tt>eb4916a</tt></a>)</li>\n<li>fix(api-extension): Handle correct array value (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/nestjs/swagger/commit/016dadc2f274d896ee809818c4c5e82da602f8d6/hovercard\" href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/016dadc2f274d896ee809818c4c5e82da602f8d6\"><tt>016dadc</tt></a>)</li>\n</ul>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nestjs/swagger/releases\">@nestjs/swagger GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>@nestjs/swagger</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9b2049a786e4d74fec8d521e06fe48de20d3f53b\">9b2049a</a> Merge pull request #1308 from bilalshaikh42/patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9c69f5a7e0510ec449cb49ee59f887935c775e7a\">9c69f5a</a> Merge pull request #1309 from gperdomor/patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/7258fca5e0de08813194aaf5f4daae197617f956\">7258fca</a> Merge pull request #1318 from deviantfero/master</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/710dbb80a47444b77b33a5931902aecb1a4d614a\">710dbb8</a> Merge pull request #1343 from ppkgtmm/reduce-double-loop</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/67254ecfd42978206e3f1c5998039da5137470dd\">67254ec</a> test9): fix swagger explorer unit tests</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/8e8935131d146bc4ac3beaa22a2a7f4cec00fc0e\">8e89351</a> Merge pull request #1268 from konne/fix-ApiBodyExamples</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/1458c0bcc8e204a4c072f95cea5763cc738312c3\">1458c0b</a> Merge pull request #1279 from tombarton/fix/enum-name-leak</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9822b06480429d4a3afbf3f0c44d4610103808a5\">9822b06</a> Merge pull request #1277 from nestjs/renovate/nestjs-mapped-types-0.x</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/8a72b6c54ebbd1be062f8c0a64046da75d3d13fd\">8a72b6c</a> Merge pull request #1223 from tourlbr/fix/adjust-api-query-decorator-for-enums</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/b9713a395e9b46b2a0ec4f6018f925ed23813c2b\">b9713a3</a> Merge pull request #1372 from nestjs/renovate/circleci-node-16.x</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9505503b2b3d12e7cd71f080f76e872e62e7e0fb\">9505503</a> chore(deps): update nest monorepo to v7.6.18</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9cfe03e1a4996af4dcd5a17064bb2c79c6b510db\">9cfe03e</a> chore(deps): update typescript-eslint monorepo to v4.27.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/2685bf55f8ca9d53fd0047fc1189720ac4e9b3e1\">2685bf5</a> chore(deps): update dependency release-it to v14.9.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/18a3f26ed0f99d4aff9f05e005861ad286d4b8c5\">18a3f26</a> chore(deps): update dependency @ types/node to v14.17.3</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/7791e79345b6f4e3b23bf218c6c58317c0416491\">7791e79</a> chore(deps): update typescript-eslint monorepo to v4.26.1</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/8e7f4a22a0344221b34e836d06d9b4323e4869f3\">8e7f4a2</a> refactor(@ nestjs/swagger) reduce loop in MimetypeContentWrapper</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/87787767da0ce24b538969d79a56a7d7b41e5006\">8778776</a> chore(deps): update dependency release-it to v14.8.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/5561e23ad2b03198aa08641897f66287a7fcbf6a\">5561e23</a> chore(deps): update dependency prettier to v2.3.1</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/6af03789d7c10863b4d743f7adedea2febd97537\">6af0378</a> chore(deps): update dependency eslint to v7.28.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/88f6d1bf77608d0af0db3d243cb6063f3360d43d\">88f6d1b</a> chore(deps): update dependency @ types/node to v14.17.2</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/475463000e3f3932644cdbb5b6e71ce23f346fd0\">4754630</a> chore(deps): update typescript-eslint monorepo to v4.26.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/2c0dc166933dd8a99bf59225848412f27c6ce8b7\">2c0dc16</a> chore(deps): update dependency eslint-plugin-import to v2.23.4</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/9b5049c14ecfae9c49008d9708199cd190dd8676\">9b5049c</a> chore(deps): update node.js to v16</li>\n      <li><a href=\"https://snyk.io/redirect/github/nestjs/swagger/commit/29926c79b2ef69d940097bb1af0dbda42cd7764e\">29926c7</a> chore(deps): update dependency @ types/node to v14.17.1</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/nestjs/swagger/compare/e05fd6abfb4f2496153f68c57bdeb8aa2b7b1559...9b2049a786e4d74fec8d521e06fe48de20d3f53b\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJiMGQ3Y2UwNS00YjQxLTQ3NGYtODg3NS1iODlmNTczMDNmMDUiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImIwZDdjZTA1LTRiNDEtNDc0Zi04ODc1LWI4OWY1NzMwM2YwNSJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?pkg&#x3D;@nestjs/swagger&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"b0d7ce05-4b41-474f-8875-b89f57303f05\",\"prPublicId\":\"b0d7ce05-4b41-474f-8875-b89f57303f05\",\"dependencies\":[{\"name\":\"@nestjs/swagger\",\"from\":\"4.8.0\",\"to\":\"4.8.1\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"87e2f02e-ddbc-4bb7-b086-002440cb0cf2\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-06-18T11:04:54.460Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ce55ae50e22068417cb3306bc2afcecd0207225d",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/111",
      "updated_at": "2021-07-13T17:30:14Z",
      "title": "[IMERC-288] Add route optimization",
      "state": "closed",
      "number": 111,
      "merged_at": "2021-07-13T17:30:13Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "590758b672b7e1fe16a7243a0ba83c3e97600789",
        "ref": "feature/IMERC-288-optimize-route"
      },
      "created_at": "2021-07-12T16:16:07Z",
      "closed_at": "2021-07-13T17:30:13Z",
      "body": "[IMERC-288](https://imercatus.backlog.com/view/IMERC-288)\r\n\r\nAdds the call to CARTO to optimize a route, and all necessary controllers/services.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "8bfb6ef2ba09a705b19556479ef0f711351f3722",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 704456385,
        "path": ".env.test.example",
        "id": 668188770,
        "diff_hunk": "@@ -33,3 +33,8 @@ AUTH0_AUDIENCE=https://imercata.com\n \n # If disabled, all interaction with Auth0 in e2e tests will be mocked\n TESTING_AUTH0_ENABLED=true\n+\n+# CARTO API credentials\n+CARTO_HOST=https://imercatus-routing-api-staging.carto.solutions\n+CARTO_USERNAME=me@carto.solutions\n+CARTO_PASSWORD=p4$$w0rd",
        "created_at": "2021-07-12T19:14:03Z",
        "body": "üëç "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 704490588,
        "path": "src/route-planner/services/carto.service.ts",
        "id": 668215593,
        "diff_hunk": "@@ -44,4 +47,97 @@ export class CartoService {\n \n     return token;\n   }\n+\n+  public async optimize(route: Route): Promise<SegmentOptimization[]> {\n+    const cartoConfig = this.config.get<CartoConfig>('carto');\n+    const token = await this.authenticate();\n+\n+    if (!token) {\n+      return null;\n+    }\n+    const url = `${cartoConfig.host}/api/v1/routes`;\n+\n+    return Promise.all(\n+      route.segments.map(async (s) => {\n+        const res = await this.http\n+          .post(\n+            url,\n+            {\n+              origin: {\n+                long: s.origin[0],\n+                lat: s.origin[1],\n+              },\n+              destination: {\n+                long: s.destination[0],\n+                lat: s.destination[1],\n+              },\n+              properties: CartoService.defaultProperties(),\n+            },\n+            {\n+              headers: {\n+                'Content-Type': 'application/json',\n+                Accept: 'application/json',\n+                Authorization: `Bearer ${token}`,\n+              },\n+            },\n+          )\n+          .toPromise();\n+\n+        if (res.status === 201) {\n+          const jobId = res.data.job_id;\n+          return {\n+            segmentId: s.id,\n+            jobId,\n+            status: OptimizationStatus.PENDING,\n+            data: res.data,\n+          };\n+        }\n+\n+        return null;\n+      }),\n+    );\n+  }\n+\n+  static defaultProperties(): object {",
        "created_at": "2021-07-12T19:58:32Z",
        "body": "Were these needed? Can they be omitted?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 705021356,
        "path": "src/route-planner/services/carto.service.ts",
        "in_reply_to_id": 668215593,
        "id": 668639720,
        "diff_hunk": "@@ -44,4 +47,97 @@ export class CartoService {\n \n     return token;\n   }\n+\n+  public async optimize(route: Route): Promise<SegmentOptimization[]> {\n+    const cartoConfig = this.config.get<CartoConfig>('carto');\n+    const token = await this.authenticate();\n+\n+    if (!token) {\n+      return null;\n+    }\n+    const url = `${cartoConfig.host}/api/v1/routes`;\n+\n+    return Promise.all(\n+      route.segments.map(async (s) => {\n+        const res = await this.http\n+          .post(\n+            url,\n+            {\n+              origin: {\n+                long: s.origin[0],\n+                lat: s.origin[1],\n+              },\n+              destination: {\n+                long: s.destination[0],\n+                lat: s.destination[1],\n+              },\n+              properties: CartoService.defaultProperties(),\n+            },\n+            {\n+              headers: {\n+                'Content-Type': 'application/json',\n+                Accept: 'application/json',\n+                Authorization: `Bearer ${token}`,\n+              },\n+            },\n+          )\n+          .toPromise();\n+\n+        if (res.status === 201) {\n+          const jobId = res.data.job_id;\n+          return {\n+            segmentId: s.id,\n+            jobId,\n+            status: OptimizationStatus.PENDING,\n+            data: res.data,\n+          };\n+        }\n+\n+        return null;\n+      }),\n+    );\n+  }\n+\n+  static defaultProperties(): object {",
        "created_at": "2021-07-13T10:34:47Z",
        "body": "I can't be 100% certain, but passing an empty object for the `properties` to the optimization endpoint seems to be enough to queue the optimization in the CARTO engine.  Leaving the `properties` out entirely leads to a 422 error."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 705372537,
        "path": "src/route-planner/controllers/optimization-requests.controller.ts",
        "id": 668900072,
        "diff_hunk": "@@ -0,0 +1,146 @@\n+import {\n+  Body,\n+  Controller,\n+  Get,\n+  HttpCode,\n+  Inject,\n+  NotFoundException,\n+  Param,\n+  Post,\n+  UseGuards,\n+  UseInterceptors,\n+} from '@nestjs/common';\n+import {\n+  ApiBearerAuth,\n+  ApiCreatedResponse,\n+  ApiForbiddenResponse,\n+  ApiNotFoundResponse,\n+  ApiOkResponse,\n+  ApiUnauthorizedResponse,\n+} from '@nestjs/swagger';\n+import { plainToClass } from 'class-transformer';\n+\n+import { ApiWrappedResponse } from '@/shared/decorators';\n+import { ResponseDTO } from '@/shared/dto';\n+import { NotFoundInterceptor } from '@/shared/interceptors';\n+import { APP_LOGGER, AppLogger } from '@/shared/interfaces';\n+\n+import { LoggedInUser } from '@/identity/decorators';\n+import { AuthenticationGuard } from '@/identity/guards';\n+import { UserProfile } from '@/identity/interfaces';\n+\n+import { ProjectIdParam } from '@/projects/decorators';\n+\n+import {\n+  OptimizationRequestIdParam,\n+  RouteIdParam,\n+  ScopedRoute,\n+} from '../decorators';\n+import { OptimizationRequestDTO } from '../dto';\n+import { Route } from '../interfaces';\n+import { OptimizationRequestsService } from '../services';\n+\n+@Controller('projects/:projectId/routes/:routeId/optimizations')\n+@UseGuards(AuthenticationGuard)\n+@ApiBearerAuth()\n+export class OptimizationRequestsController {\n+  constructor(\n+    @Inject(APP_LOGGER)\n+    private readonly logger: AppLogger,\n+    private optimizationRequestsService: OptimizationRequestsService,\n+  ) {\n+    this.logger.setContext(OptimizationRequestsController.name);\n+  }\n+\n+  @Get(':id')\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @OptimizationRequestIdParam()\n+  @ApiWrappedResponse(ApiOkResponse, OptimizationRequestDTO)\n+  @ApiNotFoundResponse({\n+    description:\n+      'No optimization matching the supplied arguments could be found.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  @UseInterceptors(NotFoundInterceptor)\n+  public async findOne(\n+    @LoggedInUser() userProfile: UserProfile,\n+    @ScopedRoute() route: Route,\n+    @Param('id') id: number,\n+  ): Promise<ResponseDTO<OptimizationRequestDTO>> {\n+    const optimization = await this.optimizationRequestsService.findOne(\n+      route,\n+      userProfile.profile,\n+      id,\n+    );\n+    return optimization\n+      ? { data: plainToClass(OptimizationRequestDTO, optimization) }\n+      : null;\n+  }\n+\n+  @Post()\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @ApiWrappedResponse(ApiCreatedResponse, OptimizationRequestDTO)\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  @ApiNotFoundResponse({ description: 'The supplied `projectId` is invalid.' })\n+  public async create(\n+    @LoggedInUser() userProfile: UserProfile,\n+    @ScopedRoute() route: Route,\n+    @Body() optimization: object,\n+  ): Promise<ResponseDTO<OptimizationRequestDTO>> {\n+    const optimizationRequest = await this.optimizationRequestsService.create(\n+      route,\n+    );\n+    return optimization\n+      ? { data: plainToClass(OptimizationRequestDTO, optimizationRequest) }\n+      : null;\n+  }\n+\n+  @Post(':id/cancel')",
        "created_at": "2021-07-13T15:56:13Z",
        "body": "I am being pedantic, but I consider this to be a `PATCH` to modify the resource. Thoughts?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 705375419,
        "path": "src/route-planner/controllers/optimization-requests.controller.ts",
        "id": 668902263,
        "diff_hunk": "@@ -0,0 +1,146 @@\n+import {\n+  Body,\n+  Controller,\n+  Get,\n+  HttpCode,\n+  Inject,\n+  NotFoundException,\n+  Param,\n+  Post,\n+  UseGuards,\n+  UseInterceptors,\n+} from '@nestjs/common';\n+import {\n+  ApiBearerAuth,\n+  ApiCreatedResponse,\n+  ApiForbiddenResponse,\n+  ApiNotFoundResponse,\n+  ApiOkResponse,\n+  ApiUnauthorizedResponse,\n+} from '@nestjs/swagger';\n+import { plainToClass } from 'class-transformer';\n+\n+import { ApiWrappedResponse } from '@/shared/decorators';\n+import { ResponseDTO } from '@/shared/dto';\n+import { NotFoundInterceptor } from '@/shared/interceptors';\n+import { APP_LOGGER, AppLogger } from '@/shared/interfaces';\n+\n+import { LoggedInUser } from '@/identity/decorators';\n+import { AuthenticationGuard } from '@/identity/guards';\n+import { UserProfile } from '@/identity/interfaces';\n+\n+import { ProjectIdParam } from '@/projects/decorators';\n+\n+import {\n+  OptimizationRequestIdParam,\n+  RouteIdParam,\n+  ScopedRoute,\n+} from '../decorators';\n+import { OptimizationRequestDTO } from '../dto';\n+import { Route } from '../interfaces';\n+import { OptimizationRequestsService } from '../services';\n+\n+@Controller('projects/:projectId/routes/:routeId/optimizations')\n+@UseGuards(AuthenticationGuard)\n+@ApiBearerAuth()\n+export class OptimizationRequestsController {\n+  constructor(\n+    @Inject(APP_LOGGER)\n+    private readonly logger: AppLogger,\n+    private optimizationRequestsService: OptimizationRequestsService,\n+  ) {\n+    this.logger.setContext(OptimizationRequestsController.name);\n+  }\n+\n+  @Get(':id')\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @OptimizationRequestIdParam()\n+  @ApiWrappedResponse(ApiOkResponse, OptimizationRequestDTO)\n+  @ApiNotFoundResponse({\n+    description:\n+      'No optimization matching the supplied arguments could be found.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  @UseInterceptors(NotFoundInterceptor)\n+  public async findOne(\n+    @LoggedInUser() userProfile: UserProfile,\n+    @ScopedRoute() route: Route,\n+    @Param('id') id: number,\n+  ): Promise<ResponseDTO<OptimizationRequestDTO>> {\n+    const optimization = await this.optimizationRequestsService.findOne(\n+      route,\n+      userProfile.profile,\n+      id,\n+    );\n+    return optimization\n+      ? { data: plainToClass(OptimizationRequestDTO, optimization) }\n+      : null;\n+  }\n+\n+  @Post()\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @ApiWrappedResponse(ApiCreatedResponse, OptimizationRequestDTO)\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  @ApiNotFoundResponse({ description: 'The supplied `projectId` is invalid.' })\n+  public async create(\n+    @LoggedInUser() userProfile: UserProfile,\n+    @ScopedRoute() route: Route,\n+    @Body() optimization: object,\n+  ): Promise<ResponseDTO<OptimizationRequestDTO>> {\n+    const optimizationRequest = await this.optimizationRequestsService.create(\n+      route,\n+    );\n+    return optimization\n+      ? { data: plainToClass(OptimizationRequestDTO, optimizationRequest) }\n+      : null;\n+  }\n+\n+  @Post(':id/cancel')\n+  @HttpCode(204)\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @ApiNotFoundResponse({\n+    description:\n+      'No optimization matching the supplied arguments could be found.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  public async cancel(\n+    @LoggedInUser() userProfile: UserProfile,\n+    @ScopedRoute() route: Route,\n+    @Param('id') id: number,\n+  ): Promise<ResponseDTO<OptimizationRequestDTO>> {\n+    const optimizationRequest = await this.optimizationRequestsService.cancel(",
        "created_at": "2021-07-13T15:58:51Z",
        "body": "+1 for service objects."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 705376370,
        "path": "src/route-planner/controllers/optimization-requests.controller.ts",
        "in_reply_to_id": 668900072,
        "id": 668902935,
        "diff_hunk": "@@ -0,0 +1,146 @@\n+import {\n+  Body,\n+  Controller,\n+  Get,\n+  HttpCode,\n+  Inject,\n+  NotFoundException,\n+  Param,\n+  Post,\n+  UseGuards,\n+  UseInterceptors,\n+} from '@nestjs/common';\n+import {\n+  ApiBearerAuth,\n+  ApiCreatedResponse,\n+  ApiForbiddenResponse,\n+  ApiNotFoundResponse,\n+  ApiOkResponse,\n+  ApiUnauthorizedResponse,\n+} from '@nestjs/swagger';\n+import { plainToClass } from 'class-transformer';\n+\n+import { ApiWrappedResponse } from '@/shared/decorators';\n+import { ResponseDTO } from '@/shared/dto';\n+import { NotFoundInterceptor } from '@/shared/interceptors';\n+import { APP_LOGGER, AppLogger } from '@/shared/interfaces';\n+\n+import { LoggedInUser } from '@/identity/decorators';\n+import { AuthenticationGuard } from '@/identity/guards';\n+import { UserProfile } from '@/identity/interfaces';\n+\n+import { ProjectIdParam } from '@/projects/decorators';\n+\n+import {\n+  OptimizationRequestIdParam,\n+  RouteIdParam,\n+  ScopedRoute,\n+} from '../decorators';\n+import { OptimizationRequestDTO } from '../dto';\n+import { Route } from '../interfaces';\n+import { OptimizationRequestsService } from '../services';\n+\n+@Controller('projects/:projectId/routes/:routeId/optimizations')\n+@UseGuards(AuthenticationGuard)\n+@ApiBearerAuth()\n+export class OptimizationRequestsController {\n+  constructor(\n+    @Inject(APP_LOGGER)\n+    private readonly logger: AppLogger,\n+    private optimizationRequestsService: OptimizationRequestsService,\n+  ) {\n+    this.logger.setContext(OptimizationRequestsController.name);\n+  }\n+\n+  @Get(':id')\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @OptimizationRequestIdParam()\n+  @ApiWrappedResponse(ApiOkResponse, OptimizationRequestDTO)\n+  @ApiNotFoundResponse({\n+    description:\n+      'No optimization matching the supplied arguments could be found.',\n+  })\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  @UseInterceptors(NotFoundInterceptor)\n+  public async findOne(\n+    @LoggedInUser() userProfile: UserProfile,\n+    @ScopedRoute() route: Route,\n+    @Param('id') id: number,\n+  ): Promise<ResponseDTO<OptimizationRequestDTO>> {\n+    const optimization = await this.optimizationRequestsService.findOne(\n+      route,\n+      userProfile.profile,\n+      id,\n+    );\n+    return optimization\n+      ? { data: plainToClass(OptimizationRequestDTO, optimization) }\n+      : null;\n+  }\n+\n+  @Post()\n+  @ProjectIdParam('projectId')\n+  @RouteIdParam('routeId')\n+  @ApiWrappedResponse(ApiCreatedResponse, OptimizationRequestDTO)\n+  @ApiUnauthorizedResponse({\n+    description:\n+      'The operation requires authentication, but none was provided.',\n+  })\n+  @ApiForbiddenResponse({\n+    description:\n+      \"The user doesn't have permission to perform the requested operation.\",\n+  })\n+  @ApiNotFoundResponse({ description: 'The supplied `projectId` is invalid.' })\n+  public async create(\n+    @LoggedInUser() userProfile: UserProfile,\n+    @ScopedRoute() route: Route,\n+    @Body() optimization: object,\n+  ): Promise<ResponseDTO<OptimizationRequestDTO>> {\n+    const optimizationRequest = await this.optimizationRequestsService.create(\n+      route,\n+    );\n+    return optimization\n+      ? { data: plainToClass(OptimizationRequestDTO, optimizationRequest) }\n+      : null;\n+  }\n+\n+  @Post(':id/cancel')",
        "created_at": "2021-07-13T15:59:45Z",
        "body": "General consensus on SO seemed to be POST for non-restful actions.  I'm not married to anything."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 705447423,
        "path": "test/route-planner/services/carto.service.spec.ts",
        "id": 668958228,
        "diff_hunk": "@@ -127,4 +130,47 @@ describe('CartoService', () => {\n       });\n     });\n   });\n+\n+  describe('optimize', () => {\n+    const route = factories.route.build();\n+    const token = 'IAMATOKEN';\n+\n+    it('authenticates', async () => {\n+      jest.spyOn(service, 'authenticate');\n+      await service.optimize(route);\n+      expect(service.authenticate).toHaveBeenCalled();\n+    });\n+\n+    describe('when authentication succeeds', () => {\n+      const response = {\n+        status: 201,\n+        data: {\n+          job_id: 1,\n+        },\n+      };\n+      beforeEach(() => {\n+        jest.spyOn(service, 'authenticate').mockResolvedValue(token);\n+        jest.spyOn(http, 'post').mockReturnValue(of(response as any));\n+      });\n+\n+      it('sends the segments to CARTO for optimization', async () => {\n+        await service.optimize(route);\n+        expect(http.post).toHaveBeenCalled();\n+      });\n+\n+      it('returns the list of optimizations', async () => {\n+        const result = await service.optimize(route);\n+        expect(result).toEqual(\n+          expect.arrayContaining([\n+            {\n+              segmentId: expect.any(String),\n+              jobId: 1,\n+              status: OptimizationStatus.PENDING,\n+              data: response.data,\n+            },",
        "created_at": "2021-07-13T17:09:55Z",
        "body": "üëç "
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/110",
      "updated_at": "2021-07-12T19:04:19Z",
      "title": "[IMERC-287] CARTO authentication",
      "state": "closed",
      "number": 110,
      "merged_at": "2021-07-12T19:04:18Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "de201ce66f0fa5c01e173d21a5d9e0476beda8fa",
        "ref": "feature/IMERC-287-carto-auth"
      },
      "created_at": "2021-07-09T17:48:18Z",
      "closed_at": "2021-07-12T19:04:18Z",
      "body": "[IMERC-287](https://imercatus.backlog.com/view/IMERC-287)\r\n\r\nAdds the ability to authenticate against the CARTO engine.  Credentials are configured in `.env.test`.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "7b0b1411b1c31e10f687cd823f59411b4ba56b48",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/109",
      "updated_at": "2021-08-09T11:24:46Z",
      "title": "[no-ticket] Add jest coverage",
      "state": "closed",
      "number": 109,
      "merged_at": "2021-08-09T11:24:45Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "1cf416c82a5808903ab12fd22ca1883575c63973",
        "ref": "no-ticket/jest-coverage"
      },
      "created_at": "2021-07-08T15:26:41Z",
      "closed_at": "2021-08-09T11:24:45Z",
      "body": "Just a small tweak to simplify our jest configuration (removed an entire file!), and allow for proper test coverage to be generated.\r\n\r\nPrior to this PR:\r\n- The two test suites (unit & e2e) are configured in two different files, sharing some common configuration through includes\r\n- The coverage generated by the suites shows coverage for the **test** files, not the actual system under test, which is meaningless.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "7495f619d80b29236f812c195f0917de0ea33e07",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/108",
      "updated_at": "2021-07-12T18:18:04Z",
      "title": "[IMERC-244] Add routes ",
      "state": "closed",
      "number": 108,
      "merged_at": "2021-07-12T18:18:04Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "f22b05e438a547f6c12ccbff8262790a89eccb95",
        "ref": "feature/IMERC-244-create-routes"
      },
      "created_at": "2021-07-03T12:51:34Z",
      "closed_at": "2021-07-12T18:18:04Z",
      "body": "[IMERC-244](https://imercatus.backlog.com/view/IMERC-244)\r\n\r\n- [x] Migrations\r\n- [x] Interfaces\r\n- [x] Entities\r\n- [x] DTOs\r\n- [x] RoutePlanner module\r\n- [x] index endpoint\r\n- [x] show endpoint\r\n- [x] create endpoint\r\n- [x] update endpoint\r\n- [x] delete endpoint\r\n- [x] cleanup swagger docs",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "1370cb950bbe94289b1416585c4ef5f8335aa1b6",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 704323282,
        "path": "src/migrations/1625305557678-CreateRoutes.ts",
        "id": 668087676,
        "diff_hunk": "@@ -0,0 +1,105 @@\n+import {\n+  MigrationInterface,\n+  QueryRunner,\n+  Table,\n+  TableForeignKey,\n+  TableIndex,\n+} from 'typeorm';\n+\n+export class CreateRoutes1625305557678 implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.createTable(\n+      new Table({\n+        name: 'routes',\n+        columns: [\n+          {\n+            name: 'id',\n+            type: 'int',\n+            isPrimary: true,\n+            isGenerated: true,\n+            generationStrategy: 'increment',\n+          },\n+          {\n+            name: 'project_id',\n+            type: 'int',\n+          },\n+          {\n+            name: 'parent_id',\n+            type: 'int',\n+            isNullable: true,\n+          },\n+          {\n+            name: 'name',\n+            type: 'varchar',\n+            isNullable: false,\n+            length: '100',\n+          },\n+          {\n+            name: 'user_defined_points',\n+            type: 'jsonb',\n+            isNullable: false,\n+          },\n+          {\n+            name: 'optimized_points',\n+            type: 'jsonb',\n+            isNullable: true,\n+          },\n+          {\n+            name: 'segments',\n+            type: 'jsonb',\n+            isNullable: true,\n+          },\n+          {\n+            name: 'created_at',\n+            type: 'timestamp',\n+            default: 'CURRENT_TIMESTAMP',\n+          },\n+          {\n+            name: 'updated_at',\n+            type: 'timestamp',\n+            default: 'CURRENT_TIMESTAMP',\n+          },\n+        ],\n+      }),\n+    );",
        "created_at": "2021-07-12T16:38:16Z",
        "body": "üëç \r\n"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 704323977,
        "path": "src/migrations/1625305557678-CreateRoutes.ts",
        "id": 668088201,
        "diff_hunk": "@@ -0,0 +1,105 @@\n+import {\n+  MigrationInterface,\n+  QueryRunner,\n+  Table,\n+  TableForeignKey,\n+  TableIndex,\n+} from 'typeorm';\n+\n+export class CreateRoutes1625305557678 implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.createTable(\n+      new Table({\n+        name: 'routes',\n+        columns: [\n+          {\n+            name: 'id',\n+            type: 'int',\n+            isPrimary: true,\n+            isGenerated: true,\n+            generationStrategy: 'increment',\n+          },\n+          {\n+            name: 'project_id',\n+            type: 'int',\n+          },\n+          {\n+            name: 'parent_id',\n+            type: 'int',\n+            isNullable: true,\n+          },\n+          {\n+            name: 'name',\n+            type: 'varchar',\n+            isNullable: false,\n+            length: '100',\n+          },\n+          {\n+            name: 'user_defined_points',\n+            type: 'jsonb',\n+            isNullable: false,\n+          },\n+          {\n+            name: 'optimized_points',\n+            type: 'jsonb',\n+            isNullable: true,\n+          },\n+          {\n+            name: 'segments',\n+            type: 'jsonb',\n+            isNullable: true,\n+          },\n+          {\n+            name: 'created_at',\n+            type: 'timestamp',\n+            default: 'CURRENT_TIMESTAMP',\n+          },\n+          {\n+            name: 'updated_at',\n+            type: 'timestamp',\n+            default: 'CURRENT_TIMESTAMP',\n+          },\n+        ],\n+      }),\n+    );\n+\n+    await queryRunner.createForeignKey(\n+      'routes',\n+      new TableForeignKey({\n+        name: 'FK_ROUTES_PROJECT_ID',",
        "created_at": "2021-07-12T16:39:03Z",
        "body": "üèÖ These names help with debugging, when the missing key throws an error."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 704337232,
        "path": "src/route-planner/controllers/routes.controller.ts",
        "id": 668098159,
        "diff_hunk": "@@ -0,0 +1,164 @@\n+import {\n+  Body,\n+  Controller,\n+  Delete,\n+  Get,\n+  HttpCode,\n+  Inject,\n+  NotFoundException,\n+  Param,\n+  Patch,\n+  Post,\n+  Query,\n+  UseGuards,\n+  UseInterceptors,\n+} from '@nestjs/common';\n+import {\n+  getSchemaPath,\n+  ApiCreatedResponse,\n+  ApiNoContentResponse,\n+  ApiParam,\n+  ApiOkResponse,\n+} from '@nestjs/swagger';\n+import { plainToClass } from 'class-transformer';\n+\n+import { ApiPaginatedResponse } from '@/shared/decorators';\n+import { PaginatedResponseDTO, ResponseDTO } from '@/shared/dto';\n+import { NotFoundInterceptor } from '@/shared/interceptors';\n+import { APP_LOGGER, AppLogger } from '@/shared/interfaces';\n+\n+import { LoggedInUser } from '@/identity/decorators';\n+import { AuthenticationGuard } from '@/identity/guards';\n+import { UserProfile } from '@/identity/interfaces';\n+\n+import { Project } from '@/projects/interfaces';\n+\n+import {\n+  RouteCreateDTO,\n+  RouteDTO,\n+  RouteQueryDTO,\n+  RouteUpdateDTO,\n+} from '../dto';\n+import { ScopedProject } from '../decorators';\n+import { RoutesService } from '../services';\n+\n+@Controller('projects/:projectId/routes')\n+@UseGuards(AuthenticationGuard)\n+export class RoutesController {\n+  constructor(\n+    @Inject(APP_LOGGER)\n+    private readonly logger: AppLogger,\n+    private readonly routesService: RoutesService,\n+  ) {\n+    this.logger.setContext(RoutesController.name);\n+  }\n+\n+  @Get()\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiPaginatedResponse(RouteDTO)\n+  public async getAll(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Query() query: RouteQueryDTO,\n+  ): Promise<PaginatedResponseDTO<RouteDTO>> {\n+    const { total, records } = await this.routesService.findAll(\n+      project,\n+      user.profile,\n+      query,\n+    );\n+    return {\n+      total,\n+      limit: query.limit,\n+      offset: query.page,\n+      data: plainToClass(RouteDTO, records),\n+    };\n+  }\n+\n+  @Get(':id')\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiOkResponse({\n+    schema: {\n+      allOf: [\n+        { $ref: getSchemaPath(ResponseDTO) },\n+        { properties: { data: { $ref: getSchemaPath(RouteDTO) } } },\n+      ],\n+    },\n+  })\n+  @UseInterceptors(NotFoundInterceptor)\n+  public async findOne(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Param('id') id: number,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const route = await this.routesService.findOne(project, user.profile, id);\n+\n+    return route ? { data: plainToClass(RouteDTO, route) } : null;\n+  }\n+\n+  @Post()\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiCreatedResponse({\n+    schema: {\n+      allOf: [\n+        { $ref: getSchemaPath(ResponseDTO) },\n+        { properties: { data: { $ref: getSchemaPath(RouteDTO) } } },\n+      ],\n+    },\n+  })\n+  public async create(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Body() routeCreateDTO: RouteCreateDTO,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const route = await this.routesService.create(\n+      project,\n+      user.profile,\n+      routeCreateDTO,\n+    );\n+\n+    return route ? { data: plainToClass(RouteDTO, route) } : null;\n+  }\n+\n+  @Patch(':id')\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiOkResponse({\n+    schema: {\n+      allOf: [\n+        { $ref: getSchemaPath(ResponseDTO) },\n+        { properties: { data: { $ref: getSchemaPath(RouteDTO) } } },\n+      ],\n+    },\n+  })\n+  public async update(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Param('id') id: number,\n+    @Body() routeUpdateDTO: RouteUpdateDTO,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const route = await this.routesService.update(\n+      project,\n+      user.profile,\n+      id,\n+      routeUpdateDTO,\n+    );\n+\n+    return route ? { data: plainToClass(RouteDTO, route) } : null;\n+  }\n+\n+  @Delete(':id')\n+  @HttpCode(204)\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiNoContentResponse()\n+  public async destroy(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Param('id') id: number,\n+  ): Promise<void> {\n+    const route = await this.routesService.delete(project, user.profile, id);\n+    if (route) {\n+      return;\n+    }\n+\n+    throw new NotFoundException();",
        "created_at": "2021-07-12T16:53:21Z",
        "body": "Should/can you use `UseInterceptors(NotFoundInterceptor)` here?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 704338145,
        "path": "src/route-planner/decorators/is-coordinate.decorator.ts",
        "id": 668098834,
        "diff_hunk": "@@ -0,0 +1,50 @@\n+/* eslint-disable class-methods-use-this */\n+import {\n+  isArray,\n+  isNumber,\n+  registerDecorator,\n+  ValidationOptions,\n+  ValidatorConstraint,\n+  ValidatorConstraintInterface,\n+} from 'class-validator';\n+\n+@ValidatorConstraint()\n+class IsCoordinateConstraint implements ValidatorConstraintInterface {\n+  validate(value: any) {\n+    if (!isArray(value)) {\n+      return false;\n+    }\n+\n+    if (value.length !== 2) {\n+      return false;\n+    }\n+\n+    const [long, lat] = value;\n+\n+    if (!isNumber(long)) return false;\n+    if (!isNumber(lat)) return false;\n+\n+    if (long < -180 || long > 180) return false;\n+    if (lat < -90 || lat > 90) return false;",
        "created_at": "2021-07-12T16:54:18Z",
        "body": "üèÖ \r\n"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 704338913,
        "path": "src/route-planner/controllers/routes.controller.ts",
        "in_reply_to_id": 668098159,
        "id": 668099411,
        "diff_hunk": "@@ -0,0 +1,164 @@\n+import {\n+  Body,\n+  Controller,\n+  Delete,\n+  Get,\n+  HttpCode,\n+  Inject,\n+  NotFoundException,\n+  Param,\n+  Patch,\n+  Post,\n+  Query,\n+  UseGuards,\n+  UseInterceptors,\n+} from '@nestjs/common';\n+import {\n+  getSchemaPath,\n+  ApiCreatedResponse,\n+  ApiNoContentResponse,\n+  ApiParam,\n+  ApiOkResponse,\n+} from '@nestjs/swagger';\n+import { plainToClass } from 'class-transformer';\n+\n+import { ApiPaginatedResponse } from '@/shared/decorators';\n+import { PaginatedResponseDTO, ResponseDTO } from '@/shared/dto';\n+import { NotFoundInterceptor } from '@/shared/interceptors';\n+import { APP_LOGGER, AppLogger } from '@/shared/interfaces';\n+\n+import { LoggedInUser } from '@/identity/decorators';\n+import { AuthenticationGuard } from '@/identity/guards';\n+import { UserProfile } from '@/identity/interfaces';\n+\n+import { Project } from '@/projects/interfaces';\n+\n+import {\n+  RouteCreateDTO,\n+  RouteDTO,\n+  RouteQueryDTO,\n+  RouteUpdateDTO,\n+} from '../dto';\n+import { ScopedProject } from '../decorators';\n+import { RoutesService } from '../services';\n+\n+@Controller('projects/:projectId/routes')\n+@UseGuards(AuthenticationGuard)\n+export class RoutesController {\n+  constructor(\n+    @Inject(APP_LOGGER)\n+    private readonly logger: AppLogger,\n+    private readonly routesService: RoutesService,\n+  ) {\n+    this.logger.setContext(RoutesController.name);\n+  }\n+\n+  @Get()\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiPaginatedResponse(RouteDTO)\n+  public async getAll(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Query() query: RouteQueryDTO,\n+  ): Promise<PaginatedResponseDTO<RouteDTO>> {\n+    const { total, records } = await this.routesService.findAll(\n+      project,\n+      user.profile,\n+      query,\n+    );\n+    return {\n+      total,\n+      limit: query.limit,\n+      offset: query.page,\n+      data: plainToClass(RouteDTO, records),\n+    };\n+  }\n+\n+  @Get(':id')\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiOkResponse({\n+    schema: {\n+      allOf: [\n+        { $ref: getSchemaPath(ResponseDTO) },\n+        { properties: { data: { $ref: getSchemaPath(RouteDTO) } } },\n+      ],\n+    },\n+  })\n+  @UseInterceptors(NotFoundInterceptor)\n+  public async findOne(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Param('id') id: number,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const route = await this.routesService.findOne(project, user.profile, id);\n+\n+    return route ? { data: plainToClass(RouteDTO, route) } : null;\n+  }\n+\n+  @Post()\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiCreatedResponse({\n+    schema: {\n+      allOf: [\n+        { $ref: getSchemaPath(ResponseDTO) },\n+        { properties: { data: { $ref: getSchemaPath(RouteDTO) } } },\n+      ],\n+    },\n+  })\n+  public async create(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Body() routeCreateDTO: RouteCreateDTO,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const route = await this.routesService.create(\n+      project,\n+      user.profile,\n+      routeCreateDTO,\n+    );\n+\n+    return route ? { data: plainToClass(RouteDTO, route) } : null;\n+  }\n+\n+  @Patch(':id')\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiOkResponse({\n+    schema: {\n+      allOf: [\n+        { $ref: getSchemaPath(ResponseDTO) },\n+        { properties: { data: { $ref: getSchemaPath(RouteDTO) } } },\n+      ],\n+    },\n+  })\n+  public async update(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Param('id') id: number,\n+    @Body() routeUpdateDTO: RouteUpdateDTO,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const route = await this.routesService.update(\n+      project,\n+      user.profile,\n+      id,\n+      routeUpdateDTO,\n+    );\n+\n+    return route ? { data: plainToClass(RouteDTO, route) } : null;\n+  }\n+\n+  @Delete(':id')\n+  @HttpCode(204)\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiNoContentResponse()\n+  public async destroy(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Param('id') id: number,\n+  ): Promise<void> {\n+    const route = await this.routesService.delete(project, user.profile, id);\n+    if (route) {\n+      return;\n+    }\n+\n+    throw new NotFoundException();",
        "created_at": "2021-07-12T16:55:10Z",
        "body": "No.  The NotFoundInterceptor will automatically return a 404 if the value returned by the controller function is null, which is exactly what we WANT to return here.  So we have to manually throw the NotFound exception."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 704362505,
        "path": "src/route-planner/controllers/routes.controller.ts",
        "in_reply_to_id": 668098159,
        "id": 668116929,
        "diff_hunk": "@@ -0,0 +1,164 @@\n+import {\n+  Body,\n+  Controller,\n+  Delete,\n+  Get,\n+  HttpCode,\n+  Inject,\n+  NotFoundException,\n+  Param,\n+  Patch,\n+  Post,\n+  Query,\n+  UseGuards,\n+  UseInterceptors,\n+} from '@nestjs/common';\n+import {\n+  getSchemaPath,\n+  ApiCreatedResponse,\n+  ApiNoContentResponse,\n+  ApiParam,\n+  ApiOkResponse,\n+} from '@nestjs/swagger';\n+import { plainToClass } from 'class-transformer';\n+\n+import { ApiPaginatedResponse } from '@/shared/decorators';\n+import { PaginatedResponseDTO, ResponseDTO } from '@/shared/dto';\n+import { NotFoundInterceptor } from '@/shared/interceptors';\n+import { APP_LOGGER, AppLogger } from '@/shared/interfaces';\n+\n+import { LoggedInUser } from '@/identity/decorators';\n+import { AuthenticationGuard } from '@/identity/guards';\n+import { UserProfile } from '@/identity/interfaces';\n+\n+import { Project } from '@/projects/interfaces';\n+\n+import {\n+  RouteCreateDTO,\n+  RouteDTO,\n+  RouteQueryDTO,\n+  RouteUpdateDTO,\n+} from '../dto';\n+import { ScopedProject } from '../decorators';\n+import { RoutesService } from '../services';\n+\n+@Controller('projects/:projectId/routes')\n+@UseGuards(AuthenticationGuard)\n+export class RoutesController {\n+  constructor(\n+    @Inject(APP_LOGGER)\n+    private readonly logger: AppLogger,\n+    private readonly routesService: RoutesService,\n+  ) {\n+    this.logger.setContext(RoutesController.name);\n+  }\n+\n+  @Get()\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiPaginatedResponse(RouteDTO)\n+  public async getAll(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Query() query: RouteQueryDTO,\n+  ): Promise<PaginatedResponseDTO<RouteDTO>> {\n+    const { total, records } = await this.routesService.findAll(\n+      project,\n+      user.profile,\n+      query,\n+    );\n+    return {\n+      total,\n+      limit: query.limit,\n+      offset: query.page,\n+      data: plainToClass(RouteDTO, records),\n+    };\n+  }\n+\n+  @Get(':id')\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiOkResponse({\n+    schema: {\n+      allOf: [\n+        { $ref: getSchemaPath(ResponseDTO) },\n+        { properties: { data: { $ref: getSchemaPath(RouteDTO) } } },\n+      ],\n+    },\n+  })\n+  @UseInterceptors(NotFoundInterceptor)\n+  public async findOne(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Param('id') id: number,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const route = await this.routesService.findOne(project, user.profile, id);\n+\n+    return route ? { data: plainToClass(RouteDTO, route) } : null;\n+  }\n+\n+  @Post()\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiCreatedResponse({\n+    schema: {\n+      allOf: [\n+        { $ref: getSchemaPath(ResponseDTO) },\n+        { properties: { data: { $ref: getSchemaPath(RouteDTO) } } },\n+      ],\n+    },\n+  })\n+  public async create(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Body() routeCreateDTO: RouteCreateDTO,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const route = await this.routesService.create(\n+      project,\n+      user.profile,\n+      routeCreateDTO,\n+    );\n+\n+    return route ? { data: plainToClass(RouteDTO, route) } : null;\n+  }\n+\n+  @Patch(':id')\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiOkResponse({\n+    schema: {\n+      allOf: [\n+        { $ref: getSchemaPath(ResponseDTO) },\n+        { properties: { data: { $ref: getSchemaPath(RouteDTO) } } },\n+      ],\n+    },\n+  })\n+  public async update(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Param('id') id: number,\n+    @Body() routeUpdateDTO: RouteUpdateDTO,\n+  ): Promise<ResponseDTO<RouteDTO>> {\n+    const route = await this.routesService.update(\n+      project,\n+      user.profile,\n+      id,\n+      routeUpdateDTO,\n+    );\n+\n+    return route ? { data: plainToClass(RouteDTO, route) } : null;\n+  }\n+\n+  @Delete(':id')\n+  @HttpCode(204)\n+  @ApiParam({ name: 'projectId', required: true })\n+  @ApiNoContentResponse()\n+  public async destroy(\n+    @LoggedInUser() user: UserProfile,\n+    @ScopedProject() project: Project,\n+    @Param('id') id: number,\n+  ): Promise<void> {\n+    const route = await this.routesService.delete(project, user.profile, id);\n+    if (route) {\n+      return;\n+    }\n+\n+    throw new NotFoundException();",
        "created_at": "2021-07-12T17:21:17Z",
        "body": "Of course..."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 704364785,
        "path": "src/route-planner/interfaces/route.ts",
        "id": 668118695,
        "diff_hunk": "@@ -0,0 +1,19 @@\n+import { Position } from 'geojson';\n+\n+import { Project } from '@/projects/interfaces';\n+\n+import { Segment } from './segment';\n+import { UserDefinedPoint } from './user-defined-point';\n+\n+export interface Route {\n+  id: number;\n+  name: string;\n+  userDefinedPoints: UserDefinedPoint[];\n+  optimizedPoints: Position[];\n+  segments: Segment[];\n+  project: Project;\n+  parent?: Route;\n+  children: Route[];\n+  createdAt: Date;\n+  updatedAt: Date;\n+}",
        "created_at": "2021-07-12T17:23:48Z",
        "body": "Love that this`interface` refactor was in place."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 704366633,
        "path": "src/route-planner/interfaces/user-defined-point.ts",
        "id": 668120099,
        "diff_hunk": "@@ -0,0 +1,6 @@\n+import { Position } from 'geojson';\n+\n+export interface UserDefinedPoint {\n+  name: string;\n+  coordinates: Position;",
        "created_at": "2021-07-12T17:25:59Z",
        "body": "Nice."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 704372279,
        "path": "test/factories/companies.factory.ts",
        "id": 668124465,
        "diff_hunk": "@@ -1,48 +1,32 @@\n-/* eslint-disable no-param-reassign */\n import { Factory } from 'fishery';\n-import { getRepository, Repository } from 'typeorm';\n+import { getRepository } from 'typeorm';\n \n import { BusinessType } from '@/identity/enums';\n import { Company } from '@/identity/interfaces';\n import { CompanyEntity } from '@/identity/entities';\n \n-const companiesFactory: Factory<Company> = Factory.define<Company>(\n-  ({ sequence, onCreate, afterBuild }) => {\n+export const companiesFactory: Factory<Company> = Factory.define<Company>(\n+  ({ sequence, associations, onCreate }) => {\n     onCreate(\n       (company): Promise<Company> => {\n-        const companiesRepo: Repository<Company> = getRepository(CompanyEntity);\n-        return companiesRepo.save(company);\n+        const companiesRepo = getRepository(CompanyEntity);\n+        const { id, createdAt, updatedAt, ...companyProps } = company;\n+        return companiesRepo.save(companyProps);\n       },\n     );\n \n-    afterBuild((company) => {\n-      if (company.projects === null) {\n-        company.projects = [];\n-      }\n-      if (company.users === null) {\n-        company.users = [];\n-      }\n-      if (company.programs === null) {\n-        company.programs = [];\n-      }\n-      if (company.adminRoles === null) {\n-        company.adminRoles = [];\n-      }\n-    });\n-\n     return {\n       id: sequence,\n       name: `Test Company ${sequence}`,\n       size: 10,\n       ein: Math.floor(100000000 + Math.random() * 900000000).toString(),\n       businessTypes: [BusinessType.BS1],\n-      createdAt: new Date(),\n-      updatedAt: new Date(),\n-      users: null,\n-      adminRoles: null,\n-      programs: null,\n-      projects: null,\n+      users: associations.users || [],\n+      adminRoles: associations.adminRoles || [],\n+      programs: associations.programs || [],\n+      projects: associations.projects || [],\n+      createdAt: null,\n+      updatedAt: null,",
        "created_at": "2021-07-12T17:32:35Z",
        "body": "üëç \r\n"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/107",
      "updated_at": "2021-07-02T21:30:14Z",
      "title": "Revert \"[Snyk] Upgrade cache-manager from 3.4.3 to 3.4.4\"",
      "state": "closed",
      "number": 107,
      "merged_at": "2021-07-02T21:30:13Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "456decd3a3b101403032583ac0a8a7f60394e358",
        "ref": "revert-106-snyk-upgrade-625c5d8b3babf2182b07ed66adeca29b"
      },
      "created_at": "2021-07-02T19:57:03Z",
      "closed_at": "2021-07-02T21:30:13Z",
      "body": "Reverts iMercatus/imercata-backend#106",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ce2c0c88320baa4de3b5490ec781058425bb2b93",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/106",
      "updated_at": "2021-08-23T15:55:06Z",
      "title": "[Snyk] Upgrade cache-manager from 3.4.3 to 3.4.4",
      "state": "closed",
      "number": 106,
      "merged_at": "2021-07-02T19:53:49Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c2041a9209b899bb593913ff539a216c355aaa06",
        "ref": "snyk-upgrade-625c5d8b3babf2182b07ed66adeca29b"
      },
      "created_at": "2021-07-02T19:35:21Z",
      "closed_at": "2021-07-02T19:53:49Z",
      "body": "<h3>Snyk has created this PR to upgrade cache-manager from 3.4.3 to 3.4.4.</h3>\n\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **21 days ago**, on 2021-06-11.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>cache-manager</b></summary>\n    <ul>\n      <li>\n        <b>3.4.4</b> - <a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/releases/tag/3.4.4\">2021-06-11</a></br><p>3.4.4</p>\n      </li>\n      <li>\n        <b>3.4.3</b> - <a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/releases/tag/3.4.3\">2021-03-30</a></br><p>3.4.3</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/releases\">cache-manager GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>cache-manager</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/5d5f69c7b348c43fa61f4846990908f89684d09b\">5d5f69c</a> Merge branch &#x27;release/3.4.4&#x27;</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/1e072a2a4d365ae745944704d537bf4a4cdb3a33\">1e072a2</a> 3.4.4</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/4be28ba01766720a5a2967a10e67806f0d15e42f\">4be28ba</a> minor package-lock.json change</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/98bba45059555b115b31eed689f7e6a1275341b0\">98bba45</a> Merge pull request #160 from BryanDonovan/dependabot/npm_and_yarn/glob-parent-5.1.2</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/37591b4fa7b2fa9303f56b2eccdeaccf57bef5a0\">37591b4</a> Bump glob-parent from 5.1.1 to 5.1.2</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/b3aa1d59885d5a011fd02f8c197c78f4f6235dde\">b3aa1d5</a> Merge pull request #157 from axolo/patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/ea78b1d34745093ea8ea86ef7cb910fcf6d62d55\">ea78b1d</a> fix: memoryCache.set example of README.md</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/af422f1279aa89ec309e2bb927300945eecca2fe\">af422f1</a> removing node 6 and adding node 14 in travis config</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/ae5db2449b743927ef42cf1d7b9dd50dc44913a0\">ae5db24</a> Merge pull request #156 from NicolasMahe/patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/97d642f30c8c35f93d96f610f3cdea8a4fce0102\">97d642f</a> Remove node-cache-manager-fs from README.md</li>\n      <li><a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/commit/606bf6240fdfe17403f7f89c6031e08eba7411ad\">606bf62</a> Merge branch &#x27;release/3.4.3&#x27; into develop</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/BryanDonovan/node-cache-manager/compare/2a5ed3ae2fe72ff410b76fce13e6cf7cdf4ad209...5d5f69c7b348c43fa61f4846990908f89684d09b\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI0OTA1NDUxNi0xNjc0LTQ0MjItYjJhOC05M2RiZjc3NWYyOWEiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjQ5MDU0NTE2LTE2NzQtNDQyMi1iMmE4LTkzZGJmNzc1ZjI5YSJ9fQ==\" width=\"0\" height=\"0\"/><img src=\"https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=cache-manager&from_version=3.4.3&to_version=3.4.4&pr_id=49054516-1674-4422-b2a8-93dbf775f29a&visibility=false&has_feature_flag=false\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?pkg&#x3D;cache-manager&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"49054516-1674-4422-b2a8-93dbf775f29a\",\"prPublicId\":\"49054516-1674-4422-b2a8-93dbf775f29a\",\"dependencies\":[{\"name\":\"cache-manager\",\"from\":\"3.4.3\",\"to\":\"3.4.4\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"87e2f02e-ddbc-4bb7-b086-002440cb0cf2\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-06-11T16:13:55.252Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "bc737771cd34bf78636984fa3a04f4b0ca54170f",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/105",
      "updated_at": "2021-07-06T12:35:48Z",
      "title": "[IMERC-296] Make logging configurable",
      "state": "closed",
      "number": 105,
      "merged_at": "2021-07-06T12:35:47Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "d95cf3df2e4fb9fab1520210633b3bd6a67e8f37",
        "ref": "no-ticket/logging"
      },
      "created_at": "2021-07-02T11:27:50Z",
      "closed_at": "2021-07-06T12:35:47Z",
      "body": "[IMERC-296] [Make logging configurable](https://imercatus.backlog.com/view/IMERC-296)\r\n\r\n- [x] Add an instantiatable Logger to the `shared` module.\r\n- [x] Add the logger to the Nest app (`main.ts`)\r\n- [x] Inject the logger into all services/controllers/anything that will log\r\n- [x] Create a null version of the logger to be injected during testing\r\n- [x] Inject the logger into all relevant tests\r\n\r\nCurrently, the logger behavior is identical to the default logger (with the exception of logging being automatically disabled during testing.  The custom logger can be extended later when we have additional needs.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "2e739f039353a17d2e39111d5d6c4012ccbeae76",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/104",
      "updated_at": "2021-07-02T19:48:09Z",
      "title": "[IMERC-273] Add project type and product type to Projects.",
      "state": "closed",
      "number": 104,
      "merged_at": "2021-07-02T19:48:08Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "6174d8d3f5737d7bf49fc0df9bcf46ee5c274b59",
        "ref": "feature/IMERC-273-project-fields"
      },
      "created_at": "2021-07-01T21:35:42Z",
      "closed_at": "2021-07-02T19:48:08Z",
      "body": "https://imercatus.backlog.com/view/IMERC-273\r\n\r\n- [x] Add enums for product type and project type\r\n- [x] Add columns to the `projects` table to hold type and product type\r\n- [x] Add specs to the dto to test for validation on the above fields\r\n- [x] Update e2e specs for projects to ensure new values are returned\r\n\r\nAdded some very basic validation specs in `test/matchers` that could probably use a review.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "33705bcd3c76ea6ad86117f81db5caecd413436d",
        "ref": "qa"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 698347340,
        "path": "src/projects/dto/project.dto.ts",
        "id": 663130940,
        "diff_hunk": "@@ -1,9 +1,11 @@\n import { ApiProperty } from '@nestjs/swagger';\n-import { IsNotEmpty, MaxLength } from 'class-validator';\n+import { IsEnum, IsNotEmpty, MaxLength } from 'class-validator';\n import { Expose } from 'class-transformer';\n \n+import { enumErrorMessage } from '@/shared/errors';",
        "created_at": "2021-07-02T16:33:42Z",
        "body": "üèÖ "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 698348515,
        "path": "test/e2e/projects.e2e-spec.ts",
        "id": 663131835,
        "diff_hunk": "@@ -118,147 +99,171 @@ describe('ProjectsController (e2e)', () => {\n   });\n \n   describe('Creating a project', () => {\n-    let result: request.Test;\n-    let projectCreateDTO: ProjectCreateDTO;\n+    let project: ProjectCreateDTO;\n+\n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .post(`/companies/${company.id}/projects`)\n+        .send({})\n+        .set('Accept', 'application/json');\n+      expect(response).toHaveProperty('status', 403);\n+    });\n \n     describe('with valid arguments', () => {\n       beforeEach(async () => {\n-        projectCreateDTO = toDTO(\n+        project = toDTO(\n           ProjectCreateDTO,\n           factories.project.forCompany(company).build(),\n         );\n \n-        result = request(http)\n+        response = await request(http)\n           .post(`/companies/${company.id}/projects`)\n-          .send(projectCreateDTO)\n+          .send(project)\n           .set('Content-Type', 'application/json')\n           .set('Accept', 'application/json')\n           .set('Authorization', `Bearer ${accessToken}`);\n       });\n \n-      it('should return 201 (Created)', (done) => result.expect(201, done));\n-\n-      it('should respond with the new project', (done) =>\n-        result.end(async (err, res) => {\n-          const project = await projectsRepo.findOne(res.body.id);\n-          expect(res.body).toHaveProperty(\n-            'data',\n-            expect.objectContaining({\n-              id: project.id,\n-              name: project.name,\n-              createdAt: expect.any(String),\n-              updatedAt: expect.any(String),\n-            }),\n-          );\n-          done();\n-        }));\n+      it('should return 201 (Created)', () =>\n+        expect(response).toHaveProperty('status', 201));",
        "created_at": "2021-07-02T16:35:28Z",
        "body": "üëç "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 698350485,
        "path": "test/e2e/projects.e2e-spec.ts",
        "id": 663133316,
        "diff_hunk": "@@ -118,147 +99,171 @@ describe('ProjectsController (e2e)', () => {\n   });\n \n   describe('Creating a project', () => {\n-    let result: request.Test;\n-    let projectCreateDTO: ProjectCreateDTO;\n+    let project: ProjectCreateDTO;\n+\n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .post(`/companies/${company.id}/projects`)\n+        .send({})\n+        .set('Accept', 'application/json');\n+      expect(response).toHaveProperty('status', 403);\n+    });\n \n     describe('with valid arguments', () => {\n       beforeEach(async () => {\n-        projectCreateDTO = toDTO(\n+        project = toDTO(\n           ProjectCreateDTO,\n           factories.project.forCompany(company).build(),\n         );\n \n-        result = request(http)\n+        response = await request(http)\n           .post(`/companies/${company.id}/projects`)\n-          .send(projectCreateDTO)\n+          .send(project)\n           .set('Content-Type', 'application/json')\n           .set('Accept', 'application/json')\n           .set('Authorization', `Bearer ${accessToken}`);\n       });\n \n-      it('should return 201 (Created)', (done) => result.expect(201, done));\n-\n-      it('should respond with the new project', (done) =>\n-        result.end(async (err, res) => {\n-          const project = await projectsRepo.findOne(res.body.id);\n-          expect(res.body).toHaveProperty(\n-            'data',\n-            expect.objectContaining({\n-              id: project.id,\n-              name: project.name,\n-              createdAt: expect.any(String),\n-              updatedAt: expect.any(String),\n-            }),\n-          );\n-          done();\n-        }));\n+      it('should return 201 (Created)', () =>\n+        expect(response).toHaveProperty('status', 201));\n+\n+      it('should respond with the new project', () =>\n+        expect(response.body).toHaveProperty(\n+          'data',\n+          expect.objectContaining({\n+            id: expect.any(Number),\n+            name: project.name,\n+            type: project.type,\n+            productType: project.productType,\n+            deletedAt: null,\n+            createdAt: expect.any(String),\n+            updatedAt: expect.any(String),\n+          }),\n+        ));\n     });\n \n     describe('with invalid arguments', () => {\n-      beforeEach(() => {\n-        result = request(http)\n+      beforeEach(async () => {\n+        response = await request(http)\n           .post(`/companies/${company.id}/projects`)\n           .send({})\n           .set('Content-Type', 'application/json')\n           .set('Accept', 'application/json')\n           .set('Authorization', `Bearer ${accessToken}`);\n       });\n \n-      it('should return 400 (Error)', (done) => result.expect(400, done));\n-\n-      it('should respond with the errors', (done) =>\n-        result.end((err, res) => {\n-          expect(res.body).toMatchObject({\n-            message: 'Bad Request',\n-            errors: [\n-              'name must be shorter than or equal to 100 characters',\n-              'name should not be empty',\n-            ],\n-          });\n-          done();\n+      it('should return 400 (Error)', () =>\n+        expect(response).toHaveProperty('status', 400));\n+\n+      it('should respond with the errors', () =>\n+        expect(response.body).toMatchObject({\n+          message: 'Bad Request',\n+          errors: [\n+            'name must be shorter than or equal to 100 characters',\n+            'name should not be empty',\n+            'type should not be empty',\n+            'type must be one of the following values: CUSTOMER_DRIVEN, NEW_REFINERY, NEW_MARKET_OPORTUNITY, NEW_TECHNOLOGY, NEW_FIELD',\n+            'productType should not be empty',\n+            'productType must be one of the following values: CRUDE, NATURAL_GAS, NATURAL_GAS_LIQUID, WATER',\n+          ],\n         }));\n     });\n   });\n \n   describe('Updating a project', () => {\n-    let result: request.Test;\n     let project: Project;\n     let projectUpdateDTO: ProjectUpdateDTO;\n \n     beforeEach(async () => {\n       project = await factories.project.forCompany(company).create();\n     });\n \n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .patch(`/companies/${company.id}/projects/${project.id}`)\n+        .send({})\n+        .set('Content-Type', 'application/json')\n+        .set('Accept', 'application/json');\n+      expect(response).toHaveProperty('status', 403);\n+    });\n+\n     describe('with valid arguments', () => {\n-      beforeEach(() => {\n+      beforeEach(async () => {\n         projectUpdateDTO = { name: 'New Project Name' };\n-        result = request(http)\n+        response = await request(http)\n           .patch(`/companies/${company.id}/projects/${project.id}`)\n           .send(projectUpdateDTO)\n           .set('Content-Type', 'application/json')\n           .set('Accept', 'application/json')\n           .set('Authorization', `Bearer ${accessToken}`);\n       });\n \n-      it('should return 200 (Ok)', (done) => result.expect(200, done));\n-\n-      it('should respond with updated project', (done) =>\n-        result.end((err, res) => {\n-          expect(res.body).toHaveProperty(\n-            'data',\n-            expect.objectContaining({\n-              id: project.id,\n-              name: projectUpdateDTO.name,\n-              updatedAt: expect.any(String),\n-              createdAt: expect.any(String),\n-            }),\n-          );\n-          done();\n-        }));\n+      it('should return 200 (Ok)', () =>\n+        expect(response).toHaveProperty('status', 200));\n+\n+      it('should respond with updated project', () =>\n+        expect(response.body).toHaveProperty(\n+          'data',\n+          expect.objectContaining({\n+            id: project.id,\n+            name: projectUpdateDTO.name,\n+            type: project.type,\n+            productType: project.productType,\n+            deletedAt: null,\n+            updatedAt: expect.any(String),\n+            createdAt: expect.any(String),\n+          }),\n+        ));\n     });\n \n     describe('with invalid arguments', () => {\n-      beforeEach(() => {\n+      beforeEach(async () => {\n         projectUpdateDTO = { name: '' };\n-        result = request(http)\n+        response = await request(http)\n           .patch(`/companies/${company.id}/projects/${project.id}`)\n           .send(projectUpdateDTO)\n           .set('Content-Type', 'application/json')\n           .set('Accept', 'application/json')\n           .set('Authorization', `Bearer ${accessToken}`);\n       });\n \n-      it('should return 400 (Error)', (done) => result.expect(400, done));\n+      it('should return 400 (Error)', () =>\n+        expect(response).toHaveProperty('status', 400));\n \n-      it('should respond with the errors', (done) =>\n-        result.end((err, res) => {\n-          expect(res.body).toMatchObject({\n-            message: 'Bad Request',\n-            errors: ['name should not be empty'],\n-          });\n-          done();\n+      it('should respond with the errors', () =>\n+        expect(response.body).toMatchObject({\n+          message: 'Bad Request',\n+          errors: ['name should not be empty'],",
        "created_at": "2021-07-02T16:38:35Z",
        "body": "Wondering why only one error is here..."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 698351409,
        "path": "test/e2e/projects.e2e-spec.ts",
        "in_reply_to_id": 663133316,
        "id": 663133964,
        "diff_hunk": "@@ -118,147 +99,171 @@ describe('ProjectsController (e2e)', () => {\n   });\n \n   describe('Creating a project', () => {\n-    let result: request.Test;\n-    let projectCreateDTO: ProjectCreateDTO;\n+    let project: ProjectCreateDTO;\n+\n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .post(`/companies/${company.id}/projects`)\n+        .send({})\n+        .set('Accept', 'application/json');\n+      expect(response).toHaveProperty('status', 403);\n+    });\n \n     describe('with valid arguments', () => {\n       beforeEach(async () => {\n-        projectCreateDTO = toDTO(\n+        project = toDTO(\n           ProjectCreateDTO,\n           factories.project.forCompany(company).build(),\n         );\n \n-        result = request(http)\n+        response = await request(http)\n           .post(`/companies/${company.id}/projects`)\n-          .send(projectCreateDTO)\n+          .send(project)\n           .set('Content-Type', 'application/json')\n           .set('Accept', 'application/json')\n           .set('Authorization', `Bearer ${accessToken}`);\n       });\n \n-      it('should return 201 (Created)', (done) => result.expect(201, done));\n-\n-      it('should respond with the new project', (done) =>\n-        result.end(async (err, res) => {\n-          const project = await projectsRepo.findOne(res.body.id);\n-          expect(res.body).toHaveProperty(\n-            'data',\n-            expect.objectContaining({\n-              id: project.id,\n-              name: project.name,\n-              createdAt: expect.any(String),\n-              updatedAt: expect.any(String),\n-            }),\n-          );\n-          done();\n-        }));\n+      it('should return 201 (Created)', () =>\n+        expect(response).toHaveProperty('status', 201));\n+\n+      it('should respond with the new project', () =>\n+        expect(response.body).toHaveProperty(\n+          'data',\n+          expect.objectContaining({\n+            id: expect.any(Number),\n+            name: project.name,\n+            type: project.type,\n+            productType: project.productType,\n+            deletedAt: null,\n+            createdAt: expect.any(String),\n+            updatedAt: expect.any(String),\n+          }),\n+        ));\n     });\n \n     describe('with invalid arguments', () => {\n-      beforeEach(() => {\n-        result = request(http)\n+      beforeEach(async () => {\n+        response = await request(http)\n           .post(`/companies/${company.id}/projects`)\n           .send({})\n           .set('Content-Type', 'application/json')\n           .set('Accept', 'application/json')\n           .set('Authorization', `Bearer ${accessToken}`);\n       });\n \n-      it('should return 400 (Error)', (done) => result.expect(400, done));\n-\n-      it('should respond with the errors', (done) =>\n-        result.end((err, res) => {\n-          expect(res.body).toMatchObject({\n-            message: 'Bad Request',\n-            errors: [\n-              'name must be shorter than or equal to 100 characters',\n-              'name should not be empty',\n-            ],\n-          });\n-          done();\n+      it('should return 400 (Error)', () =>\n+        expect(response).toHaveProperty('status', 400));\n+\n+      it('should respond with the errors', () =>\n+        expect(response.body).toMatchObject({\n+          message: 'Bad Request',\n+          errors: [\n+            'name must be shorter than or equal to 100 characters',\n+            'name should not be empty',\n+            'type should not be empty',\n+            'type must be one of the following values: CUSTOMER_DRIVEN, NEW_REFINERY, NEW_MARKET_OPORTUNITY, NEW_TECHNOLOGY, NEW_FIELD',\n+            'productType should not be empty',\n+            'productType must be one of the following values: CRUDE, NATURAL_GAS, NATURAL_GAS_LIQUID, WATER',\n+          ],\n         }));\n     });\n   });\n \n   describe('Updating a project', () => {\n-    let result: request.Test;\n     let project: Project;\n     let projectUpdateDTO: ProjectUpdateDTO;\n \n     beforeEach(async () => {\n       project = await factories.project.forCompany(company).create();\n     });\n \n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .patch(`/companies/${company.id}/projects/${project.id}`)\n+        .send({})\n+        .set('Content-Type', 'application/json')\n+        .set('Accept', 'application/json');\n+      expect(response).toHaveProperty('status', 403);\n+    });\n+\n     describe('with valid arguments', () => {\n-      beforeEach(() => {\n+      beforeEach(async () => {\n         projectUpdateDTO = { name: 'New Project Name' };\n-        result = request(http)\n+        response = await request(http)\n           .patch(`/companies/${company.id}/projects/${project.id}`)\n           .send(projectUpdateDTO)\n           .set('Content-Type', 'application/json')\n           .set('Accept', 'application/json')\n           .set('Authorization', `Bearer ${accessToken}`);\n       });\n \n-      it('should return 200 (Ok)', (done) => result.expect(200, done));\n-\n-      it('should respond with updated project', (done) =>\n-        result.end((err, res) => {\n-          expect(res.body).toHaveProperty(\n-            'data',\n-            expect.objectContaining({\n-              id: project.id,\n-              name: projectUpdateDTO.name,\n-              updatedAt: expect.any(String),\n-              createdAt: expect.any(String),\n-            }),\n-          );\n-          done();\n-        }));\n+      it('should return 200 (Ok)', () =>\n+        expect(response).toHaveProperty('status', 200));\n+\n+      it('should respond with updated project', () =>\n+        expect(response.body).toHaveProperty(\n+          'data',\n+          expect.objectContaining({\n+            id: project.id,\n+            name: projectUpdateDTO.name,\n+            type: project.type,\n+            productType: project.productType,\n+            deletedAt: null,\n+            updatedAt: expect.any(String),\n+            createdAt: expect.any(String),\n+          }),\n+        ));\n     });\n \n     describe('with invalid arguments', () => {\n-      beforeEach(() => {\n+      beforeEach(async () => {\n         projectUpdateDTO = { name: '' };\n-        result = request(http)\n+        response = await request(http)\n           .patch(`/companies/${company.id}/projects/${project.id}`)\n           .send(projectUpdateDTO)\n           .set('Content-Type', 'application/json')\n           .set('Accept', 'application/json')\n           .set('Authorization', `Bearer ${accessToken}`);\n       });\n \n-      it('should return 400 (Error)', (done) => result.expect(400, done));\n+      it('should return 400 (Error)', () =>\n+        expect(response).toHaveProperty('status', 400));\n \n-      it('should respond with the errors', (done) =>\n-        result.end((err, res) => {\n-          expect(res.body).toMatchObject({\n-            message: 'Bad Request',\n-            errors: ['name should not be empty'],\n-          });\n-          done();\n+      it('should respond with the errors', () =>\n+        expect(response.body).toMatchObject({\n+          message: 'Bad Request',\n+          errors: ['name should not be empty'],",
        "created_at": "2021-07-02T16:39:59Z",
        "body": "Nevermind, it is a patch... derp."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 698352828,
        "path": "test/identity/dto/company.dto.spec.ts",
        "id": 663134998,
        "diff_hunk": "@@ -0,0 +1,11 @@\n+import { CompanyDTO } from '@/identity/dto';\n+\n+import { matchers } from '@/test/matchers/validation-matchers';\n+\n+expect.extend(matchers);\n+\n+describe('CompanyDTO', () => {\n+  it('should require size to be an integer', async () => {\n+    await expect(CompanyDTO).toRequireInt('size');",
        "created_at": "2021-07-02T16:42:16Z",
        "body": "Can you explain why this test was needed?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 698353730,
        "path": "test/matchers/validation-matchers.ts",
        "id": 663135700,
        "diff_hunk": "@@ -0,0 +1,126 @@\n+import {\n+  getLabelPrinter,\n+  matcherHint,\n+  printExpected,\n+  printReceived,\n+  MatcherHintOptions,\n+} from 'jest-matcher-utils';\n+import {\n+  isEnum,\n+  isInt,\n+  isNotEmpty,\n+  maxLength,\n+  validate,\n+  ValidationError,\n+} from 'class-validator';\n+import { plainToClass, ClassConstructor } from 'class-transformer';\n+\n+export const errorsForProperty = (\n+  errors: ValidationError[],\n+  property: string,\n+) => errors.filter((error: ValidationError) => error.property === property);\n+\n+export const validationMatcher = async <T>(\n+  matcherName: string,\n+  received: ClassConstructor<T>,\n+  property: string,\n+  matcher: Function,\n+  options: MatcherHintOptions,\n+  target: object = null,\n+) => {\n+  const dto =\n+    target || (plainToClass(received, { [property]: null }) as unknown);\n+  const errors = await validate(dto as object);\n+  const propertyErrors = errorsForProperty(errors, property);\n+\n+  const matchedConditions = [].concat(\n+    ...propertyErrors.map((e) => Object.keys(e.constraints)),\n+  );\n+\n+  const pass = matchedConditions.includes(matcher.name);\n+\n+  const message = () => {\n+    const labelExpected = 'Expected errors';\n+    const labelReceived = 'Received errors';\n+\n+    const printLabel = getLabelPrinter(labelExpected, labelReceived);\n+\n+    const hint = `${matcherHint(\n+      matcherName,\n+      received.name,\n+      property,\n+      options,\n+    )}\\n\\n`;\n+\n+    const expectedText = [\n+      printLabel(labelExpected),\n+      options.isNot ? 'not ' : ' ',\n+      printExpected([matcher.name]),\n+    ];\n+    const receivedText = [\n+      printLabel(labelReceived),\n+      options.isNot ? '    ' : ' ',\n+      printReceived(matchedConditions),\n+    ];\n+    return `${hint}${expectedText.join('')}\\n\\n${receivedText.join('')}`;\n+  };\n+  return { message, pass };\n+};\n+\n+declare global {\n+  namespace jest {\n+    interface Matchers<R> {\n+      toRequire: (prop: string) => Promise<R>;\n+      toEnsureEnum: (prop: string) => Promise<R>;\n+      toEnforceMaxLengthOf: (prop: string, value: number) => Promise<R>;\n+      toRequireInt: (prop: string) => Promise<R>;\n+    }\n+  }\n+}\n+\n+export const matchers = {\n+  toRequire<T>(\n+    received: ClassConstructor<T>,\n+    property: string,\n+  ): Promise<jest.CustomMatcherResult> {\n+    return validationMatcher('toRequire', received, property, isNotEmpty, {\n+      isNot: this.isNot,\n+      promise: this.promise,\n+    });\n+  },\n+  toEnsureEnum<T>(\n+    received: ClassConstructor<T>,\n+    property: string,\n+  ): Promise<jest.CustomMatcherResult> {\n+    return validationMatcher('toRequireEnum', received, property, isEnum, {\n+      isNot: this.isNot,\n+      promise: this.promise,\n+    });\n+  },\n+  toEnforceMaxLengthOf<T>(\n+    received: ClassConstructor<T>,\n+    property: string,\n+    lengthConstraint: number,\n+  ): Promise<jest.CustomMatcherResult> {\n+    const dto = plainToClass(received, {\n+      [property]: '#'.repeat(lengthConstraint + 1),\n+    }) as unknown;\n+    return validationMatcher(\n+      'toEnforceMaxLengthOf',\n+      received,\n+      property,\n+      maxLength,\n+      { isNot: this.isNot, promise: this.promise },\n+      dto as object,\n+    );\n+  },",
        "created_at": "2021-07-02T16:43:33Z",
        "body": "It seems like we are testing the type checking is working?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 698371212,
        "path": "test/identity/dto/company.dto.spec.ts",
        "in_reply_to_id": 663134998,
        "id": 663148280,
        "diff_hunk": "@@ -0,0 +1,11 @@\n+import { CompanyDTO } from '@/identity/dto';\n+\n+import { matchers } from '@/test/matchers/validation-matchers';\n+\n+expect.extend(matchers);\n+\n+describe('CompanyDTO', () => {\n+  it('should require size to be an integer', async () => {\n+    await expect(CompanyDTO).toRequireInt('size');",
        "created_at": "2021-07-02T17:08:59Z",
        "body": "1. It wasn't strictly needed, but I needed a model to test the integer validator on, and company was the first entity I found with an integer property."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 698372342,
        "path": "test/matchers/validation-matchers.ts",
        "in_reply_to_id": 663135700,
        "id": 663149085,
        "diff_hunk": "@@ -0,0 +1,126 @@\n+import {\n+  getLabelPrinter,\n+  matcherHint,\n+  printExpected,\n+  printReceived,\n+  MatcherHintOptions,\n+} from 'jest-matcher-utils';\n+import {\n+  isEnum,\n+  isInt,\n+  isNotEmpty,\n+  maxLength,\n+  validate,\n+  ValidationError,\n+} from 'class-validator';\n+import { plainToClass, ClassConstructor } from 'class-transformer';\n+\n+export const errorsForProperty = (\n+  errors: ValidationError[],\n+  property: string,\n+) => errors.filter((error: ValidationError) => error.property === property);\n+\n+export const validationMatcher = async <T>(\n+  matcherName: string,\n+  received: ClassConstructor<T>,\n+  property: string,\n+  matcher: Function,\n+  options: MatcherHintOptions,\n+  target: object = null,\n+) => {\n+  const dto =\n+    target || (plainToClass(received, { [property]: null }) as unknown);\n+  const errors = await validate(dto as object);\n+  const propertyErrors = errorsForProperty(errors, property);\n+\n+  const matchedConditions = [].concat(\n+    ...propertyErrors.map((e) => Object.keys(e.constraints)),\n+  );\n+\n+  const pass = matchedConditions.includes(matcher.name);\n+\n+  const message = () => {\n+    const labelExpected = 'Expected errors';\n+    const labelReceived = 'Received errors';\n+\n+    const printLabel = getLabelPrinter(labelExpected, labelReceived);\n+\n+    const hint = `${matcherHint(\n+      matcherName,\n+      received.name,\n+      property,\n+      options,\n+    )}\\n\\n`;\n+\n+    const expectedText = [\n+      printLabel(labelExpected),\n+      options.isNot ? 'not ' : ' ',\n+      printExpected([matcher.name]),\n+    ];\n+    const receivedText = [\n+      printLabel(labelReceived),\n+      options.isNot ? '    ' : ' ',\n+      printReceived(matchedConditions),\n+    ];\n+    return `${hint}${expectedText.join('')}\\n\\n${receivedText.join('')}`;\n+  };\n+  return { message, pass };\n+};\n+\n+declare global {\n+  namespace jest {\n+    interface Matchers<R> {\n+      toRequire: (prop: string) => Promise<R>;\n+      toEnsureEnum: (prop: string) => Promise<R>;\n+      toEnforceMaxLengthOf: (prop: string, value: number) => Promise<R>;\n+      toRequireInt: (prop: string) => Promise<R>;\n+    }\n+  }\n+}\n+\n+export const matchers = {\n+  toRequire<T>(\n+    received: ClassConstructor<T>,\n+    property: string,\n+  ): Promise<jest.CustomMatcherResult> {\n+    return validationMatcher('toRequire', received, property, isNotEmpty, {\n+      isNot: this.isNot,\n+      promise: this.promise,\n+    });\n+  },\n+  toEnsureEnum<T>(\n+    received: ClassConstructor<T>,\n+    property: string,\n+  ): Promise<jest.CustomMatcherResult> {\n+    return validationMatcher('toRequireEnum', received, property, isEnum, {\n+      isNot: this.isNot,\n+      promise: this.promise,\n+    });\n+  },\n+  toEnforceMaxLengthOf<T>(\n+    received: ClassConstructor<T>,\n+    property: string,\n+    lengthConstraint: number,\n+  ): Promise<jest.CustomMatcherResult> {\n+    const dto = plainToClass(received, {\n+      [property]: '#'.repeat(lengthConstraint + 1),\n+    }) as unknown;\n+    return validationMatcher(\n+      'toEnforceMaxLengthOf',\n+      received,\n+      property,\n+      maxLength,\n+      { isNot: this.isNot, promise: this.promise },\n+      dto as object,\n+    );\n+  },",
        "created_at": "2021-07-02T17:10:43Z",
        "body": "We're testing that the type checking is **present**.  I added the fields to the entity/DTO, but the entire unit test suite was still green, because none of the unit testing actually triggers validation.  I added these tests to ensure that we're validating what we intend to without running the e2e test.  So in essence, this ensures we have the validation we expect."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 698443781,
        "path": "test/identity/dto/company.dto.spec.ts",
        "in_reply_to_id": 663134998,
        "id": 663203868,
        "diff_hunk": "@@ -0,0 +1,11 @@\n+import { CompanyDTO } from '@/identity/dto';\n+\n+import { matchers } from '@/test/matchers/validation-matchers';\n+\n+expect.extend(matchers);\n+\n+describe('CompanyDTO', () => {\n+  it('should require size to be an integer', async () => {\n+    await expect(CompanyDTO).toRequireInt('size');",
        "created_at": "2021-07-02T19:11:15Z",
        "body": "Offline we came to a rename of `expect(CompanyDTO).toEnsureInt('size')` to have no ambiguity to the reader of ‚Äúis this requiring this to be present _and_ the type of int‚Äù?\r\n\r\n"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/103",
      "updated_at": "2021-06-30T02:38:05Z",
      "title": "Pass id to TypeORM soft delete",
      "state": "closed",
      "number": 103,
      "merged_at": "2021-06-30T02:38:04Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "bf685dba893641291421ffbff48074548369134b",
        "ref": "bugfix/project-soft-delete"
      },
      "created_at": "2021-06-30T02:18:13Z",
      "closed_at": "2021-06-30T02:38:04Z",
      "body": "Updates soft delete endpoint to pass id to softDelete instead of an object.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5073d2259ff8e0f2e51e3330bf415eea6e40458d",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/102",
      "updated_at": "2021-07-02T19:58:44Z",
      "title": "[Snyk] Upgrade typeorm from 0.2.33 to 0.2.34",
      "state": "closed",
      "number": 102,
      "merged_at": "2021-07-02T19:58:44Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "27cc6d26fdcec5ec424c0e3e23493156fa083076",
        "ref": "snyk-upgrade-81903b3813864e9f9507dc1dbac993af"
      },
      "created_at": "2021-06-29T03:58:31Z",
      "closed_at": "2021-07-02T19:58:44Z",
      "body": "<h3>Snyk has created this PR to upgrade typeorm from 0.2.33 to 0.2.34.</h3>\n\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **a month ago**, on 2021-06-03.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>typeorm</b></summary>\n    <ul>\n      <li>\n        <b>0.2.34</b> - <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases/tag/0.2.34\">2021-06-03</a></br><p>version bump</p>\n      </li>\n      <li>\n        <b>0.2.33</b> - <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases/tag/0.2.33\">2021-06-01</a></br><p>version bump</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases\">typeorm GitHub release notes</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI2ZjQ5MzA5MS1kYzhjLTQyZmQtYTFmNy04NWIzNjQ3ZDMwNWMiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjZmNDkzMDkxLWRjOGMtNDJmZC1hMWY3LTg1YjM2NDdkMzA1YyJ9fQ==\" width=\"0\" height=\"0\"/><img src=\"https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=typeorm&from_version=0.2.33&to_version=0.2.34&pr_id=6f493091-dc8c-42fd-a1f7-85b3647d305c&visibility=false&has_feature_flag=false\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?pkg&#x3D;typeorm&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"6f493091-dc8c-42fd-a1f7-85b3647d305c\",\"prPublicId\":\"6f493091-dc8c-42fd-a1f7-85b3647d305c\",\"dependencies\":[{\"name\":\"typeorm\",\"from\":\"0.2.33\",\"to\":\"0.2.34\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"87e2f02e-ddbc-4bb7-b086-002440cb0cf2\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-06-03T15:15:53.653Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "6023c58bd4fc223954110d3fafefd14a961cc1e5",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/101",
      "updated_at": "2021-07-01T00:04:05Z",
      "title": "[IMERC-258] Add pagination to projects",
      "state": "closed",
      "number": 101,
      "merged_at": "2021-07-01T00:04:04Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c221f056a1017b65465af776d25b50cb8d8c8601",
        "ref": "feature/IMERC-258-projects-pagination"
      },
      "created_at": "2021-06-25T21:01:21Z",
      "closed_at": "2021-07-01T00:04:04Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5073d2259ff8e0f2e51e3330bf415eea6e40458d",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 693263285,
        "path": "src/projects/dto/project-query.dto.ts",
        "id": 659097993,
        "diff_hunk": "@@ -0,0 +1,96 @@\n+import { ApiPropertyOptional } from '@nestjs/swagger';\n+import { IsInt, IsOptional, IsString, ValidateNested } from 'class-validator';\n+import { Type } from 'class-transformer';\n+import { configuration } from '@/shared/config';\n+import { Config } from '@/shared/interfaces';\n+import { ProjectFiltersDTO } from './project-filters.dto';\n+import { ProjectQuery } from '../interfaces';\n+\n+const config: Config = configuration();\n+\n+export class ProjectQueryDTO implements ProjectQuery {\n+  @ApiPropertyOptional({\n+    description: 'Maximum number of records to return',\n+    default: config.api.defaultPerPage,\n+    maximum: config.api.maxRecords,\n+  })\n+  @IsOptional()\n+  @IsInt()\n+  @Type(() => Number)\n+  limit?: number = config.api.defaultPerPage;\n+\n+  @ApiPropertyOptional({\n+    description: 'Page of records to return',\n+    default: 1,\n+  })\n+  @IsOptional()\n+  @IsInt()\n+  @Type(() => Number)\n+  page?: number = 1;\n+\n+  @ApiPropertyOptional({\n+    description:\n+      'Sorts the results by the provided column.  Sort will be ascending by default.  Prefix the field with `-` to sort descending.',\n+  })\n+  @IsOptional()\n+  @IsString()\n+  @Type(() => String)\n+  sort?: string;\n+\n+  @ApiPropertyOptional({\n+    type: 'object',\n+    properties: {\n+      name: { type: 'string' },\n+    },\n+    description: `\n+**Filter on project properties**",
        "created_at": "2021-06-26T01:10:09Z",
        "body": "Is there any way we can improve this boilerplate?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 696405581,
        "path": "src/projects/dto/project-query.dto.ts",
        "in_reply_to_id": 659097993,
        "id": 661650574,
        "diff_hunk": "@@ -0,0 +1,96 @@\n+import { ApiPropertyOptional } from '@nestjs/swagger';\n+import { IsInt, IsOptional, IsString, ValidateNested } from 'class-validator';\n+import { Type } from 'class-transformer';\n+import { configuration } from '@/shared/config';\n+import { Config } from '@/shared/interfaces';\n+import { ProjectFiltersDTO } from './project-filters.dto';\n+import { ProjectQuery } from '../interfaces';\n+\n+const config: Config = configuration();\n+\n+export class ProjectQueryDTO implements ProjectQuery {\n+  @ApiPropertyOptional({\n+    description: 'Maximum number of records to return',\n+    default: config.api.defaultPerPage,\n+    maximum: config.api.maxRecords,\n+  })\n+  @IsOptional()\n+  @IsInt()\n+  @Type(() => Number)\n+  limit?: number = config.api.defaultPerPage;\n+\n+  @ApiPropertyOptional({\n+    description: 'Page of records to return',\n+    default: 1,\n+  })\n+  @IsOptional()\n+  @IsInt()\n+  @Type(() => Number)\n+  page?: number = 1;\n+\n+  @ApiPropertyOptional({\n+    description:\n+      'Sorts the results by the provided column.  Sort will be ascending by default.  Prefix the field with `-` to sort descending.',\n+  })\n+  @IsOptional()\n+  @IsString()\n+  @Type(() => String)\n+  sort?: string;\n+\n+  @ApiPropertyOptional({\n+    type: 'object',\n+    properties: {\n+      name: { type: 'string' },\n+    },\n+    description: `\n+**Filter on project properties**",
        "created_at": "2021-06-30T16:49:13Z",
        "body": "See https://github.com/iMercatus/imercata-backend/blob/c221f056a1017b65465af776d25b50cb8d8c8601/src/shared/decorators/api-filter.decorator.ts and https://github.com/iMercatus/imercata-backend/blob/c221f056a1017b65465af776d25b50cb8d8c8601/src/shared/decorators/api-filters.decorator.ts.\r\n\r\nIn essence, we now only have to add an `@ApiFilter` decorator on the individual fields being used to filter (ex. `user-filters.dto.ts`), and an `@ApiFilters()` decorator in the query dto (ex. `user-query.dto.ts`).\r\n\r\n```typescript\r\nclass UserFiltersDTO {\r\n  @ApiFilter()\r\n  name: StringFilterDTO;\r\n}\r\n\r\nclass UserQueryDTO {\r\n  @ApiFilters()\r\n  filter: UserFiltersDTO;\r\n}\r\n```"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 696588622,
        "path": "src/projects/dto/project-query.dto.ts",
        "in_reply_to_id": 659097993,
        "id": 661789029,
        "diff_hunk": "@@ -0,0 +1,96 @@\n+import { ApiPropertyOptional } from '@nestjs/swagger';\n+import { IsInt, IsOptional, IsString, ValidateNested } from 'class-validator';\n+import { Type } from 'class-transformer';\n+import { configuration } from '@/shared/config';\n+import { Config } from '@/shared/interfaces';\n+import { ProjectFiltersDTO } from './project-filters.dto';\n+import { ProjectQuery } from '../interfaces';\n+\n+const config: Config = configuration();\n+\n+export class ProjectQueryDTO implements ProjectQuery {\n+  @ApiPropertyOptional({\n+    description: 'Maximum number of records to return',\n+    default: config.api.defaultPerPage,\n+    maximum: config.api.maxRecords,\n+  })\n+  @IsOptional()\n+  @IsInt()\n+  @Type(() => Number)\n+  limit?: number = config.api.defaultPerPage;\n+\n+  @ApiPropertyOptional({\n+    description: 'Page of records to return',\n+    default: 1,\n+  })\n+  @IsOptional()\n+  @IsInt()\n+  @Type(() => Number)\n+  page?: number = 1;\n+\n+  @ApiPropertyOptional({\n+    description:\n+      'Sorts the results by the provided column.  Sort will be ascending by default.  Prefix the field with `-` to sort descending.',\n+  })\n+  @IsOptional()\n+  @IsString()\n+  @Type(() => String)\n+  sort?: string;\n+\n+  @ApiPropertyOptional({\n+    type: 'object',\n+    properties: {\n+      name: { type: 'string' },\n+    },\n+    description: `\n+**Filter on project properties**",
        "created_at": "2021-06-30T20:28:22Z",
        "body": "üèÖ "
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/100",
      "updated_at": "2021-06-25T14:12:11Z",
      "title": "[IMERC-264] Fix workarounds needed for QA demo",
      "state": "closed",
      "number": 100,
      "merged_at": "2021-06-25T14:12:10Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c29df1ea1e173cd7edd6b14c3fb8bd6965a34a01",
        "ref": "no-ticket/fixing-qa-todos"
      },
      "created_at": "2021-06-25T00:31:08Z",
      "closed_at": "2021-06-25T14:12:10Z",
      "body": "[[IMERC-264] Fix workarounds needed for QA demo](https://imercatus.backlog.com/view/IMERC-264)\r\n\r\nFixing some of the workarounds needed for the QA demo:\r\n- removes `shelljs` and the \"forced\" migration\r\n- removes endpoint that is not needed, even for demoing\r\n- add a test for the resend invite\r\n- removes duplicate logs\r\n- removes hardcoded `from` property on emails\r\n- removes unused method (`findByEmailAndNoCompany`)\r\n- reverts changes to `src/mail/transport-ethereal.ts` (I was using SendGrid for some manual tests, but no one will use it)\r\n- adds a log to `UnhandledExceptionsFilter`",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "430be70dd10e7f3f841d518c8de8e86907865675",
        "ref": "qa"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/99",
      "updated_at": "2021-06-24T21:31:16Z",
      "title": "Relates a logged in user to the created project",
      "state": "closed",
      "number": 99,
      "merged_at": "2021-06-24T21:31:16Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "3b1ebb6c57b25970dbdf3fd1fe4fd4d681bb4207",
        "ref": "project-user-create"
      },
      "created_at": "2021-06-24T04:45:04Z",
      "closed_at": "2021-06-24T21:31:16Z",
      "body": "[IMERC-257 User cannot access projects they created](https://imercatus.backlog.com/view/IMERC-257)\r\n\r\n**Steps to reproduce** \r\nAs a user\r\nWhen I am signed in\r\nAnd I create a project\r\nThen i visit my projects\r\n\r\n **Expected** \r\nThen I should see my projects\r\n\r\n **Actual** \r\nThen I do not see any projects",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "430be70dd10e7f3f841d518c8de8e86907865675",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/98",
      "updated_at": "2021-06-23T17:19:06Z",
      "title": "[NO-TICKET] fixing from address;",
      "state": "closed",
      "number": 98,
      "merged_at": "2021-06-23T17:19:05Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "a5d8beb152b616ffafc81d93e60286467191f5a1",
        "ref": "no-ticket/fixing-from-address"
      },
      "created_at": "2021-06-23T17:18:59Z",
      "closed_at": "2021-06-23T17:19:05Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "8853497c7bdb3b16e2a83c3fc70316acba5aadb3",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/97",
      "updated_at": "2021-06-25T20:53:58Z",
      "title": "Programs endpoint: index/show/create functional.",
      "state": "closed",
      "number": 97,
      "merged_at": "2021-06-25T20:53:57Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "f1a01d8b4376f6f3bc1c4ffef57cb4c84ace8554",
        "ref": "feature/IMERC-243-programs"
      },
      "created_at": "2021-06-23T17:08:12Z",
      "closed_at": "2021-06-25T20:53:57Z",
      "body": "https://imercatus.backlog.com/view/IMERC-243\r\n\r\n- [x] index\r\n- [x] show\r\n- [x] create\r\n- [x] update\r\n\r\nSeveral other items were change/added as part of this PR:\r\n- All Entities are now describe in at least 3 files:\r\n    - interface - Describes the shape of the entity.  This should be used anywhere not directly interacting with TypeORM\r\n    - entity - Holds the actual column definitions.  Use this when grabbing a repository or saving records.\r\n    - dto - Marks up all fields from the interface, indicating whether or not they should be exposed, and any other Swagger information that should be included.\r\n- Factories are now accessed via a combined `factories` import.  This feels like a much cleaner interface.  For example:\r\n    ```typescript\r\n    import { companiesFactory, usersFactory, adminRolesFactory } from '@/test/factories';\r\n\r\n    const user: User = usersFactory.create();\r\n    const company: Company = companiesFactory.create();\r\n    const adminRole: AdminRole = adminRolesFactory.build();\r\n\r\n    // vs.\r\n\r\n    import factories from '@/test/factories';\r\n    const user: User = factories.user.create();\r\n    const company: Company = factories.company.create();\r\n    const adminRole: AdminRole = factories.adminRole.build();\r\n    ```\r\n    This also means that when new factories are added, they are automatically available in all tests that import `factories`.\r\n\r\n- Helper methods were added to many factories to make adding associations easier.  I'm sure more can be done here, but I just added what was required.  This change makes interacting with factories more fluid.  For example:\r\n    ```typescript\r\n    // Old\r\n    import { adminRolesFactory, companiesFactory, usersFactory } from '@/test/factories';\r\n    const existingCompany: Company = companiesFactory.create();\r\n    const users: User[] = usersFactory.createList(10, {}, { associations: { company: existingCompany } });\r\n    const adminRole: AdminRole = adminRolesFactory.create(\r\n      {},\r\n      { associations: { company: existingCompany, users: users } }\r\n    ); \r\n\r\n    // New\r\n    import factories from '@/test/factories';\r\n    const existingCompany: Company = factories.company.create();\r\n    const user: User = factories.user\r\n      .forCompany(existingCompany)\r\n      .createList(10);\r\n    const adminRole: AdminRole = factories.adminRole\r\n      .forCompany(existingCompany)\r\n      .withUsers(users)\r\n      .create();\r\n    ````\r\n\r\n- The ValidationPipe options have been changed, hopefully giving us harder validations.  Our validation logic was actually fairly lax before, allowing unknown values to just be silently ignored.  We're not doing proper conversion/validation on all incoming payloads.  This necessitated the switch to interfaces for all entities.  Our existing setup just didn't give enough flexibility when it came to defining DTO's.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "0a7a130bc868a0274ecbb29ee43e728eb0e98b79",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 690969229,
        "path": "src/identity/entities/company.entity.ts",
        "id": 657331557,
        "diff_hunk": "@@ -2,11 +2,12 @@ import { ApiProperty } from '@nestjs/swagger';\n import { Column, Entity, OneToMany } from 'typeorm';\n import { IsEnum, MaxLength, IsInt, IsNotEmpty } from 'class-validator';\n \n-import { BaseEntity } from '@/shared';\n+import { BaseEntity } from '@/shared/entities';\n+import { ProgramEntity } from '@/programs/entities';\n+import { Project } from '@/projects/entities';\n \n import { AdminRole } from './admin-role.entity';\n import { User } from './user.entity';\n-import { Project } from '../../projects/entities/project.entity';",
        "created_at": "2021-06-23T17:47:51Z",
        "body": "Thanks for this."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 691854825,
        "path": "test/factories/companies.factory.ts",
        "id": 658021715,
        "diff_hunk": "@@ -1,18 +1,32 @@\n+/* eslint-disable no-param-reassign */\n import { Factory } from 'fishery';\n import { getRepository, Repository } from 'typeorm';\n \n-import { BusinessType, Company } from '@/identity';\n+import { BusinessType, Company } from '@/identity/entities';\n \n-export default Factory.define<Company>(\n-  ({ sequence, onCreate, associations }) => {\n+const companiesFactory: Factory<Company> = Factory.define<Company>(\n+  ({ sequence, onCreate, afterBuild }) => {\n     onCreate(\n       (company): Promise<Company> => {\n         const companiesRepo: Repository<Company> = getRepository(Company);\n         return companiesRepo.save(company);\n       },\n     );\n \n-    const projects = associations.projects || [];\n+    afterBuild((company) => {\n+      if (company.projects === null) {\n+        company.projects = [];\n+      }\n+      if (company.users === null) {\n+        company.users = [];\n+      }\n+      if (company.programs === null) {\n+        company.programs = [];\n+      }\n+      if (company.adminRoles === null) {\n+        company.adminRoles = [];\n+      }\n+    });",
        "created_at": "2021-06-24T14:52:44Z",
        "body": "Wondering if there is a better way here... Could a default be added at the instance/method level on the model?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 693004073,
        "path": "test/factories/companies.factory.ts",
        "in_reply_to_id": 658021715,
        "id": 658896233,
        "diff_hunk": "@@ -1,18 +1,32 @@\n+/* eslint-disable no-param-reassign */\n import { Factory } from 'fishery';\n import { getRepository, Repository } from 'typeorm';\n \n-import { BusinessType, Company } from '@/identity';\n+import { BusinessType, Company } from '@/identity/entities';\n \n-export default Factory.define<Company>(\n-  ({ sequence, onCreate, associations }) => {\n+const companiesFactory: Factory<Company> = Factory.define<Company>(\n+  ({ sequence, onCreate, afterBuild }) => {\n     onCreate(\n       (company): Promise<Company> => {\n         const companiesRepo: Repository<Company> = getRepository(Company);\n         return companiesRepo.save(company);\n       },\n     );\n \n-    const projects = associations.projects || [];\n+    afterBuild((company) => {\n+      if (company.projects === null) {\n+        company.projects = [];\n+      }\n+      if (company.users === null) {\n+        company.users = [];\n+      }\n+      if (company.programs === null) {\n+        company.programs = [];\n+      }\n+      if (company.adminRoles === null) {\n+        company.adminRoles = [];\n+      }\n+    });",
        "created_at": "2021-06-25T16:35:20Z",
        "body": "Possibly.  I plan to add a story and do another pass through our testing as there is a LOT of duplicated logic in the factories."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 693103245,
        "path": "src/identity/enums/business-type.enum.ts",
        "id": 658968085,
        "diff_hunk": "@@ -0,0 +1,5 @@\n+export enum BusinessType {\n+  BS1 = 'BS1',\n+  SS1 = 'SS1',\n+  SS2 = 'SS2',\n+}",
        "created_at": "2021-06-25T18:43:53Z",
        "body": "üëç "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 693103611,
        "path": "src/identity/identity.module.ts",
        "id": 658968391,
        "diff_hunk": "@@ -34,11 +42,17 @@ import { InvitationsMailer } from './mailers';\n \n @Module({\n   imports: [\n-    TypeOrmModule.forFeature([AdminRole, AdminRolePermission, Company, User]),\n-    QueryHelperModule.forFeature([AdminRole, Company, User]),\n     ConfigModule,\n     HttpModule,\n-    MailModule,\n+    forwardRef(() => MailModule),\n+    forwardRef(() => ProgramsModule),",
        "created_at": "2021-06-25T18:44:29Z",
        "body": "üëç "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 693128047,
        "path": "src/shared/helpers/enum.helper.ts",
        "id": 658987023,
        "diff_hunk": "@@ -0,0 +1,13 @@\n+export function enumToArray(e: Object): String[] {\n+  return Object.keys(e).map((k) => e[k]);\n+}\n+export function enumErrorMessage(attr: string, e: Object): string {\n+  return `${attr} must be one of the following values: ${enumToArray(e).join(\n+    ', ',\n+  )}`;\n+}\n+export function enumArrayErrorMessage(attr: string, e: Object): string {\n+  return `${attr} may only include the following values: ${enumToArray(e).join(\n+    ', ',\n+  )}`;\n+}",
        "created_at": "2021-06-25T19:20:12Z",
        "body": "Isn't this what TypeScript typing gives us? This is surprising me to be honest."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 693128978,
        "path": "src/shared/helpers/enum.helper.ts",
        "in_reply_to_id": 658987023,
        "id": 658987769,
        "diff_hunk": "@@ -0,0 +1,13 @@\n+export function enumToArray(e: Object): String[] {\n+  return Object.keys(e).map((k) => e[k]);\n+}\n+export function enumErrorMessage(attr: string, e: Object): string {\n+  return `${attr} must be one of the following values: ${enumToArray(e).join(\n+    ', ',\n+  )}`;\n+}\n+export function enumArrayErrorMessage(attr: string, e: Object): string {\n+  return `${attr} may only include the following values: ${enumToArray(e).join(\n+    ', ',\n+  )}`;\n+}",
        "created_at": "2021-06-25T19:21:37Z",
        "body": "The errors we're getting out of `class-validator` just say something like `<field> must be a valid enum value`."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 693129103,
        "path": "test/e2e/admin-roles.e2e-spec.ts",
        "id": 658987895,
        "diff_hunk": "@@ -3,27 +3,27 @@ import * as request from 'supertest';\n import { getRepositoryToken } from '@nestjs/typeorm';\n import { Repository } from 'typeorm';\n \n+import { AdminRoleEntity, User } from '@/identity/entities';\n+import { AdminRole, Company } from '@/identity/interfaces';\n import {\n-  AdminRole,\n   AdminRoleCreateDTO,\n   AdminRoleUpdateDTO,\n   AdminRoleUsersDTO,\n-  Company,\n-  User,\n-} from '@/identity';\n+} from '@/identity/dto';\n \n import { initTestingModule, TestingContext, TestDBManager } from '@/test/utils';\n-import {\n-  adminRolesFactory,\n-  companiesFactory,\n-  usersFactory,\n-} from '@/test/factories';\n+// import {\n+//   adminRolesFactory,\n+//   companiesFactory,\n+//   usersFactory,\n+// } from '@/test/factories';",
        "created_at": "2021-06-25T19:21:48Z",
        "body": "‚úÇÔ∏è "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 693130146,
        "path": "test/e2e/projects.e2e-spec.ts",
        "id": 658988667,
        "diff_hunk": "@@ -103,7 +109,7 @@ describe('ProjectsController (e2e)', () => {\n \n       it('should return 201 (Created)', (done) => result.expect(201, done));\n \n-      it('should respond with the new project', (done) =>\n+      it.only('should respond with the new project', (done) =>",
        "created_at": "2021-06-25T19:23:27Z",
        "body": "Remove `it.only`. "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 693130571,
        "path": "test/factories/companies.factory.ts",
        "in_reply_to_id": 658021715,
        "id": 658989006,
        "diff_hunk": "@@ -1,18 +1,32 @@\n+/* eslint-disable no-param-reassign */\n import { Factory } from 'fishery';\n import { getRepository, Repository } from 'typeorm';\n \n-import { BusinessType, Company } from '@/identity';\n+import { BusinessType, Company } from '@/identity/entities';\n \n-export default Factory.define<Company>(\n-  ({ sequence, onCreate, associations }) => {\n+const companiesFactory: Factory<Company> = Factory.define<Company>(\n+  ({ sequence, onCreate, afterBuild }) => {\n     onCreate(\n       (company): Promise<Company> => {\n         const companiesRepo: Repository<Company> = getRepository(Company);\n         return companiesRepo.save(company);\n       },\n     );\n \n-    const projects = associations.projects || [];\n+    afterBuild((company) => {\n+      if (company.projects === null) {\n+        company.projects = [];\n+      }\n+      if (company.users === null) {\n+        company.users = [];\n+      }\n+      if (company.programs === null) {\n+        company.programs = [];\n+      }\n+      if (company.adminRoles === null) {\n+        company.adminRoles = [];\n+      }\n+    });",
        "created_at": "2021-06-25T19:24:06Z",
        "body": "Sounds fine."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 693132544,
        "path": "src/shared/helpers/enum.helper.ts",
        "in_reply_to_id": 658987023,
        "id": 658990518,
        "diff_hunk": "@@ -0,0 +1,13 @@\n+export function enumToArray(e: Object): String[] {\n+  return Object.keys(e).map((k) => e[k]);\n+}\n+export function enumErrorMessage(attr: string, e: Object): string {\n+  return `${attr} must be one of the following values: ${enumToArray(e).join(\n+    ', ',\n+  )}`;\n+}\n+export function enumArrayErrorMessage(attr: string, e: Object): string {\n+  return `${attr} may only include the following values: ${enumToArray(e).join(\n+    ', ',\n+  )}`;\n+}",
        "created_at": "2021-06-25T19:27:14Z",
        "body": "Ya, ok. When I see it is looks more like a way to enforce some typing. Would it be better named something to do with validation/validation messages?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 693133590,
        "path": "test/e2e/features.e2e-spec.ts",
        "id": 658991306,
        "diff_hunk": "@@ -1,10 +1,12 @@\n import { INestApplication } from '@nestjs/common';\n import * as request from 'supertest';\n \n-import { BusinessType, Company, Feature, Mod } from '@/identity';\n+import { Company } from '@/identity/interfaces';\n+import { BusinessType, Feature, Mod } from '@/identity/enums';\n \n import { initTestingModule, TestDBManager, TestingContext } from '@/test/utils';\n-import { companiesFactory } from '@/test/factories';\n+// import { companiesFactory } from '@/test/factories';",
        "created_at": "2021-06-25T19:28:51Z",
        "body": "‚úÇÔ∏è "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 693134139,
        "path": "test/e2e/programs.e2e-spec.ts",
        "id": 658991755,
        "diff_hunk": "@@ -0,0 +1,285 @@\n+import { INestApplication } from '@nestjs/common';\n+import * as request from 'supertest';\n+\n+import {\n+  toDTO,\n+  initTestingModule,\n+  TestingContext,\n+  TestDBManager,\n+} from '@/test/utils';\n+import factories from '@/test/factories';\n+\n+import { ProgramCreateDTO } from '@/programs/dto';\n+import { Company } from '@/identity/interfaces';\n+\n+import { Program } from '@/programs/interfaces';\n+\n+describe('ProgramsController (e2e)', () => {\n+  let context: TestingContext;\n+  let app: INestApplication;\n+  let http: any;\n+  let dbManager: TestDBManager;\n+  let accessToken: string;\n+  let company: Company;\n+  let response: request.Response;\n+\n+  beforeAll(async () => {\n+    context = await initTestingModule();\n+    ({ app, dbManager } = context);\n+    http = app.getHttpServer();\n+    accessToken = await context.getAccessToken();\n+  });\n+\n+  beforeEach(async () => {\n+    dbManager.prepareDatabase();\n+    company = await factories.company.create();\n+  });\n+\n+  afterEach(() => dbManager.clearDatabase());\n+  afterAll(() => app.close());\n+\n+  describe('Listing programs', () => {\n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .get(`/companies/${company.id}/programs`)\n+        .set('Accept', 'application/json')\n+        .query({\n+          page: 2,\n+          limit: 10,\n+          filter: {\n+            name: { eq: 'Test' },\n+          },\n+        });\n+      expect(response).toHaveProperty('status', 403);\n+    });\n+\n+    it('should accept filtering/pagination/sorting', async () => {\n+      response = await request(http)\n+        .get(`/companies/${company.id}/programs`)\n+        .set('Accept', 'application/json')\n+        .set('Authorization', `Bearer ${accessToken}`)\n+        .query({\n+          page: 2,\n+          limit: 10,\n+          filter: {\n+            name: { eq: 'Test' },\n+          },\n+        });\n+      expect(response).toHaveProperty('status', 200);\n+    });\n+\n+    describe('response', () => {\n+      beforeEach(async () => {\n+        response = await request(http)\n+          .get(`/companies/${company.id}/programs`)\n+          .set('Accept', 'application/json')\n+          .set('Authorization', `Bearer ${accessToken}`)\n+          .query({\n+            page: 2,\n+            limit: 10,\n+            filter: {\n+              name: { eq: 'Test' },\n+            },\n+          });\n+      });\n+\n+      it('should return 200', async () => {\n+        expect(response).toHaveProperty('status', 200);\n+      });\n+\n+      it('should respond with a valid structure', async () => {\n+        expect(response).toHaveProperty(\n+          'body',\n+          expect.objectContaining({\n+            total: expect.any(Number),\n+            limit: expect.any(Number),\n+            offset: expect.any(Number),\n+            data: expect.any(Array),\n+          }),\n+        );\n+      });\n+    });\n+  });\n+\n+  describe('Retrieving a single program', () => {\n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .get(`/companies/${company.id}/programs/1`)\n+        .set('Accept', 'application/json');\n+      expect(response).toHaveProperty('status', 403);\n+    });\n+\n+    describe('when the program exists', () => {\n+      let program: Program;\n+\n+      beforeEach(async () => {\n+        program = await factories.program.forCompany(company).create();\n+        response = await request(http)\n+          .get(`/companies/${company.id}/programs/${program.id}`)\n+          .set('Accept', 'application/json')\n+          .set('Authorization', `Bearer ${accessToken}`);\n+      });\n+\n+      it('should return 200', () => {\n+        expect(response).toHaveProperty('status', 200);\n+      });\n+\n+      it('should respond with the program', async () => {\n+        expect(response.body).toMatchObject({\n+          data: {\n+            id: program.id,\n+            name: program.name,\n+            createdAt: program.createdAt.toISOString(),\n+            updatedAt: program.updatedAt.toISOString(),",
        "created_at": "2021-06-25T19:29:45Z",
        "body": "Finally! We have skirted this for a while now."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 693135434,
        "path": "test/e2e/programs.e2e-spec.ts",
        "id": 658992802,
        "diff_hunk": "@@ -0,0 +1,285 @@\n+import { INestApplication } from '@nestjs/common';\n+import * as request from 'supertest';\n+\n+import {\n+  toDTO,\n+  initTestingModule,\n+  TestingContext,\n+  TestDBManager,\n+} from '@/test/utils';\n+import factories from '@/test/factories';\n+\n+import { ProgramCreateDTO } from '@/programs/dto';\n+import { Company } from '@/identity/interfaces';\n+\n+import { Program } from '@/programs/interfaces';\n+\n+describe('ProgramsController (e2e)', () => {\n+  let context: TestingContext;\n+  let app: INestApplication;\n+  let http: any;\n+  let dbManager: TestDBManager;\n+  let accessToken: string;\n+  let company: Company;\n+  let response: request.Response;\n+\n+  beforeAll(async () => {\n+    context = await initTestingModule();\n+    ({ app, dbManager } = context);\n+    http = app.getHttpServer();\n+    accessToken = await context.getAccessToken();\n+  });\n+\n+  beforeEach(async () => {\n+    dbManager.prepareDatabase();\n+    company = await factories.company.create();\n+  });\n+\n+  afterEach(() => dbManager.clearDatabase());\n+  afterAll(() => app.close());\n+\n+  describe('Listing programs', () => {\n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .get(`/companies/${company.id}/programs`)\n+        .set('Accept', 'application/json')\n+        .query({\n+          page: 2,\n+          limit: 10,\n+          filter: {\n+            name: { eq: 'Test' },\n+          },\n+        });\n+      expect(response).toHaveProperty('status', 403);\n+    });\n+\n+    it('should accept filtering/pagination/sorting', async () => {\n+      response = await request(http)\n+        .get(`/companies/${company.id}/programs`)\n+        .set('Accept', 'application/json')\n+        .set('Authorization', `Bearer ${accessToken}`)\n+        .query({\n+          page: 2,\n+          limit: 10,\n+          filter: {\n+            name: { eq: 'Test' },\n+          },\n+        });\n+      expect(response).toHaveProperty('status', 200);\n+    });\n+\n+    describe('response', () => {\n+      beforeEach(async () => {\n+        response = await request(http)\n+          .get(`/companies/${company.id}/programs`)\n+          .set('Accept', 'application/json')\n+          .set('Authorization', `Bearer ${accessToken}`)\n+          .query({\n+            page: 2,\n+            limit: 10,\n+            filter: {\n+              name: { eq: 'Test' },\n+            },\n+          });\n+      });\n+\n+      it('should return 200', async () => {\n+        expect(response).toHaveProperty('status', 200);\n+      });\n+\n+      it('should respond with a valid structure', async () => {\n+        expect(response).toHaveProperty(\n+          'body',\n+          expect.objectContaining({\n+            total: expect.any(Number),\n+            limit: expect.any(Number),\n+            offset: expect.any(Number),\n+            data: expect.any(Array),\n+          }),\n+        );\n+      });\n+    });\n+  });\n+\n+  describe('Retrieving a single program', () => {\n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .get(`/companies/${company.id}/programs/1`)\n+        .set('Accept', 'application/json');\n+      expect(response).toHaveProperty('status', 403);\n+    });\n+\n+    describe('when the program exists', () => {\n+      let program: Program;\n+\n+      beforeEach(async () => {\n+        program = await factories.program.forCompany(company).create();\n+        response = await request(http)\n+          .get(`/companies/${company.id}/programs/${program.id}`)\n+          .set('Accept', 'application/json')\n+          .set('Authorization', `Bearer ${accessToken}`);\n+      });\n+\n+      it('should return 200', () => {\n+        expect(response).toHaveProperty('status', 200);\n+      });\n+\n+      it('should respond with the program', async () => {\n+        expect(response.body).toMatchObject({\n+          data: {\n+            id: program.id,\n+            name: program.name,\n+            createdAt: program.createdAt.toISOString(),\n+            updatedAt: program.updatedAt.toISOString(),\n+          },\n+        });\n+      });\n+    });\n+\n+    describe('when the program does not exist', () => {\n+      it('should return 404', async () => {\n+        response = await request(http)\n+          .get(`/companies/${company.id}/programs/1234`)\n+          .set('Accept', 'application/json')\n+          .set('Authorization', `Bearer ${accessToken}`);\n+        expect(response).toHaveProperty('status', 404);\n+      });\n+    });\n+  });\n+\n+  describe('Creating a program', () => {\n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .post(`/companies/${company.id}/programs`)\n+        .send({})\n+        .set('Content-Type', 'application/json')\n+        .set('Accept', 'application/json');\n+      expect(response).toHaveProperty('status', 403);\n+    });\n+\n+    describe('with valid arguments', () => {\n+      let programCreateDTO: ProgramCreateDTO;\n+\n+      beforeEach(async () => {\n+        programCreateDTO = toDTO(\n+          ProgramCreateDTO,\n+          factories.program.forCompany(company).build(),\n+        );\n+        response = await request(http)\n+          .post(`/companies/${company.id}/programs`)\n+          .send(programCreateDTO)\n+          .set('Content-Type', 'application/json')\n+          .set('Accept', 'application/json')\n+          .set('Authorization', `Bearer ${accessToken}`);\n+      });\n+\n+      it('should return 201 (Created)', async () => {\n+        expect(response).toHaveProperty('status', 201);\n+      });\n+\n+      it('should respond with the new program', async () => {\n+        expect(response.body).toMatchObject({\n+          data: {\n+            id: expect.any(Number),\n+            name: programCreateDTO.name,\n+            createdAt: expect.any(String),\n+            updatedAt: expect.any(String),\n+          },\n+        });\n+      });\n+    });\n+\n+    describe('with invalid arguments', () => {\n+      beforeEach(async () => {\n+        response = await request(http)\n+          .post(`/companies/${company.id}/programs`)\n+          .send({})\n+          .set('Content-Type', 'application/json')\n+          .set('Accept', 'application/json')\n+          .set('Authorization', `Bearer ${accessToken}`);\n+      });\n+\n+      it('should return 400 (Error)', () => {\n+        expect(response).toHaveProperty('status', 400);\n+      });\n+\n+      it('should respond with the errors', () => {\n+        expect(response.body).toMatchObject({\n+          message: 'Bad Request',\n+          errors: [\n+            'name must be shorter than or equal to 100 characters',\n+            'name should not be empty',\n+          ],\n+        });\n+      });\n+    });\n+  });\n+\n+  describe('Updating a program', () => {\n+    let program: Program;\n+\n+    beforeEach(async () => {\n+      program = await factories.program.forCompany(company).create();\n+    });\n+\n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .patch(`/companies/${company.id}/programs/${program.id}`)\n+        .send({})\n+        .set('Content-Type', 'application/json')\n+        .set('Accept', 'application/json');\n+      expect(response).toHaveProperty('status', 403);\n+    });\n+\n+    describe('with valid arguments', () => {\n+      let attrs: Partial<Program>;\n+\n+      beforeEach(async () => {\n+        attrs = { name: 'New Name' };",
        "created_at": "2021-06-25T19:31:47Z",
        "body": "Nit: Is it more idiomatic top say `props` in TypeScript?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 693183035,
        "path": "test/e2e/programs.e2e-spec.ts",
        "in_reply_to_id": 658992802,
        "id": 659028885,
        "diff_hunk": "@@ -0,0 +1,285 @@\n+import { INestApplication } from '@nestjs/common';\n+import * as request from 'supertest';\n+\n+import {\n+  toDTO,\n+  initTestingModule,\n+  TestingContext,\n+  TestDBManager,\n+} from '@/test/utils';\n+import factories from '@/test/factories';\n+\n+import { ProgramCreateDTO } from '@/programs/dto';\n+import { Company } from '@/identity/interfaces';\n+\n+import { Program } from '@/programs/interfaces';\n+\n+describe('ProgramsController (e2e)', () => {\n+  let context: TestingContext;\n+  let app: INestApplication;\n+  let http: any;\n+  let dbManager: TestDBManager;\n+  let accessToken: string;\n+  let company: Company;\n+  let response: request.Response;\n+\n+  beforeAll(async () => {\n+    context = await initTestingModule();\n+    ({ app, dbManager } = context);\n+    http = app.getHttpServer();\n+    accessToken = await context.getAccessToken();\n+  });\n+\n+  beforeEach(async () => {\n+    dbManager.prepareDatabase();\n+    company = await factories.company.create();\n+  });\n+\n+  afterEach(() => dbManager.clearDatabase());\n+  afterAll(() => app.close());\n+\n+  describe('Listing programs', () => {\n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .get(`/companies/${company.id}/programs`)\n+        .set('Accept', 'application/json')\n+        .query({\n+          page: 2,\n+          limit: 10,\n+          filter: {\n+            name: { eq: 'Test' },\n+          },\n+        });\n+      expect(response).toHaveProperty('status', 403);\n+    });\n+\n+    it('should accept filtering/pagination/sorting', async () => {\n+      response = await request(http)\n+        .get(`/companies/${company.id}/programs`)\n+        .set('Accept', 'application/json')\n+        .set('Authorization', `Bearer ${accessToken}`)\n+        .query({\n+          page: 2,\n+          limit: 10,\n+          filter: {\n+            name: { eq: 'Test' },\n+          },\n+        });\n+      expect(response).toHaveProperty('status', 200);\n+    });\n+\n+    describe('response', () => {\n+      beforeEach(async () => {\n+        response = await request(http)\n+          .get(`/companies/${company.id}/programs`)\n+          .set('Accept', 'application/json')\n+          .set('Authorization', `Bearer ${accessToken}`)\n+          .query({\n+            page: 2,\n+            limit: 10,\n+            filter: {\n+              name: { eq: 'Test' },\n+            },\n+          });\n+      });\n+\n+      it('should return 200', async () => {\n+        expect(response).toHaveProperty('status', 200);\n+      });\n+\n+      it('should respond with a valid structure', async () => {\n+        expect(response).toHaveProperty(\n+          'body',\n+          expect.objectContaining({\n+            total: expect.any(Number),\n+            limit: expect.any(Number),\n+            offset: expect.any(Number),\n+            data: expect.any(Array),\n+          }),\n+        );\n+      });\n+    });\n+  });\n+\n+  describe('Retrieving a single program', () => {\n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .get(`/companies/${company.id}/programs/1`)\n+        .set('Accept', 'application/json');\n+      expect(response).toHaveProperty('status', 403);\n+    });\n+\n+    describe('when the program exists', () => {\n+      let program: Program;\n+\n+      beforeEach(async () => {\n+        program = await factories.program.forCompany(company).create();\n+        response = await request(http)\n+          .get(`/companies/${company.id}/programs/${program.id}`)\n+          .set('Accept', 'application/json')\n+          .set('Authorization', `Bearer ${accessToken}`);\n+      });\n+\n+      it('should return 200', () => {\n+        expect(response).toHaveProperty('status', 200);\n+      });\n+\n+      it('should respond with the program', async () => {\n+        expect(response.body).toMatchObject({\n+          data: {\n+            id: program.id,\n+            name: program.name,\n+            createdAt: program.createdAt.toISOString(),\n+            updatedAt: program.updatedAt.toISOString(),\n+          },\n+        });\n+      });\n+    });\n+\n+    describe('when the program does not exist', () => {\n+      it('should return 404', async () => {\n+        response = await request(http)\n+          .get(`/companies/${company.id}/programs/1234`)\n+          .set('Accept', 'application/json')\n+          .set('Authorization', `Bearer ${accessToken}`);\n+        expect(response).toHaveProperty('status', 404);\n+      });\n+    });\n+  });\n+\n+  describe('Creating a program', () => {\n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .post(`/companies/${company.id}/programs`)\n+        .send({})\n+        .set('Content-Type', 'application/json')\n+        .set('Accept', 'application/json');\n+      expect(response).toHaveProperty('status', 403);\n+    });\n+\n+    describe('with valid arguments', () => {\n+      let programCreateDTO: ProgramCreateDTO;\n+\n+      beforeEach(async () => {\n+        programCreateDTO = toDTO(\n+          ProgramCreateDTO,\n+          factories.program.forCompany(company).build(),\n+        );\n+        response = await request(http)\n+          .post(`/companies/${company.id}/programs`)\n+          .send(programCreateDTO)\n+          .set('Content-Type', 'application/json')\n+          .set('Accept', 'application/json')\n+          .set('Authorization', `Bearer ${accessToken}`);\n+      });\n+\n+      it('should return 201 (Created)', async () => {\n+        expect(response).toHaveProperty('status', 201);\n+      });\n+\n+      it('should respond with the new program', async () => {\n+        expect(response.body).toMatchObject({\n+          data: {\n+            id: expect.any(Number),\n+            name: programCreateDTO.name,\n+            createdAt: expect.any(String),\n+            updatedAt: expect.any(String),\n+          },\n+        });\n+      });\n+    });\n+\n+    describe('with invalid arguments', () => {\n+      beforeEach(async () => {\n+        response = await request(http)\n+          .post(`/companies/${company.id}/programs`)\n+          .send({})\n+          .set('Content-Type', 'application/json')\n+          .set('Accept', 'application/json')\n+          .set('Authorization', `Bearer ${accessToken}`);\n+      });\n+\n+      it('should return 400 (Error)', () => {\n+        expect(response).toHaveProperty('status', 400);\n+      });\n+\n+      it('should respond with the errors', () => {\n+        expect(response.body).toMatchObject({\n+          message: 'Bad Request',\n+          errors: [\n+            'name must be shorter than or equal to 100 characters',\n+            'name should not be empty',\n+          ],\n+        });\n+      });\n+    });\n+  });\n+\n+  describe('Updating a program', () => {\n+    let program: Program;\n+\n+    beforeEach(async () => {\n+      program = await factories.program.forCompany(company).create();\n+    });\n+\n+    it('should require authentication', async () => {\n+      response = await request(http)\n+        .patch(`/companies/${company.id}/programs/${program.id}`)\n+        .send({})\n+        .set('Content-Type', 'application/json')\n+        .set('Accept', 'application/json');\n+      expect(response).toHaveProperty('status', 403);\n+    });\n+\n+    describe('with valid arguments', () => {\n+      let attrs: Partial<Program>;\n+\n+      beforeEach(async () => {\n+        attrs = { name: 'New Name' };",
        "created_at": "2021-06-25T20:49:24Z",
        "body": "It is.  I renamed it."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 693185209,
        "path": "src/shared/helpers/enum.helper.ts",
        "in_reply_to_id": 658987023,
        "id": 659030518,
        "diff_hunk": "@@ -0,0 +1,13 @@\n+export function enumToArray(e: Object): String[] {\n+  return Object.keys(e).map((k) => e[k]);\n+}\n+export function enumErrorMessage(attr: string, e: Object): string {\n+  return `${attr} must be one of the following values: ${enumToArray(e).join(\n+    ', ',\n+  )}`;\n+}\n+export function enumArrayErrorMessage(attr: string, e: Object): string {\n+  return `${attr} may only include the following values: ${enumToArray(e).join(\n+    ', ',\n+  )}`;\n+}",
        "created_at": "2021-06-25T20:53:07Z",
        "body": "I relocated this to `src/shared/errors/helpers.ts`, as you were right.  These did have more to do with errors/validations than enums."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/96",
      "updated_at": "2021-06-23T15:51:06Z",
      "title": "[NO-TICKET] Rename API docs",
      "state": "closed",
      "number": 96,
      "merged_at": "2021-06-23T15:51:05Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "d35b04315bc474f58c05d97f5f7186253fe7c3d3",
        "ref": "no-ticket/rename-api-docs"
      },
      "created_at": "2021-06-23T15:50:57Z",
      "closed_at": "2021-06-23T15:51:05Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "0a2389a647640116ec4e997b292ffc338da922c3",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/95",
      "updated_at": "2021-06-23T11:15:02Z",
      "title": "[NO-TICKET] Some adjustments + QA demo",
      "state": "closed",
      "number": 95,
      "merged_at": "2021-06-23T11:15:01Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "58006634792e97fdc6056204435fbd86a9730839",
        "ref": "no-ticket/qa-demo-sprint-6"
      },
      "created_at": "2021-06-23T11:01:46Z",
      "closed_at": "2021-06-23T11:15:01Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9c5f9e3cfe75069532d890ec1b15c8720a7a2a7a",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/94",
      "updated_at": "2021-07-02T18:12:44Z",
      "title": "[Snyk] Upgrade typeorm from 0.2.32 to 0.2.33",
      "state": "closed",
      "number": 94,
      "merged_at": "2021-06-28T11:07:47Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "68f8b03cc86dbb8d4fc52b75dec45aced6c2415d",
        "ref": "snyk-upgrade-6d94e44816c92267aa87f1dcabe4cfad"
      },
      "created_at": "2021-06-23T04:04:06Z",
      "closed_at": "2021-06-28T11:07:47Z",
      "body": "<h3>Snyk has created this PR to upgrade typeorm from 0.2.32 to 0.2.33.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=typeorm&from_version=0.2.32&to_version=0.2.33&pr_id=cb55ec11-0276-4dde-a56f-2424e93e6dc2&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **22 days ago**, on 2021-06-01.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>typeorm</b></summary>\n    <ul>\n      <li>\n        <b>0.2.33</b> - <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases/tag/0.2.33\">2021-06-01</a></br><p>version bump</p>\n      </li>\n      <li>\n        <b>0.2.32</b> - <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases/tag/0.2.32\">2021-03-30</a></br><p>version bump</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/typeorm/typeorm/releases\">typeorm GitHub release notes</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJjYjU1ZWMxMS0wMjc2LTRkZGUtYTU2Zi0yNDI0ZTkzZTZkYzIiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImNiNTVlYzExLTAyNzYtNGRkZS1hNTZmLTI0MjRlOTNlNmRjMiJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?pkg&#x3D;typeorm&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"cb55ec11-0276-4dde-a56f-2424e93e6dc2\",\"prPublicId\":\"cb55ec11-0276-4dde-a56f-2424e93e6dc2\",\"dependencies\":[{\"name\":\"typeorm\",\"from\":\"0.2.32\",\"to\":\"0.2.33\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"87e2f02e-ddbc-4bb7-b086-002440cb0cf2\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-06-01T15:54:10.392Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9daf0fb1908b76807bf69426ac6a6b8998e551e1",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/93",
      "updated_at": "2021-06-23T09:43:16Z",
      "title": "Fixes SES on AWS",
      "state": "closed",
      "number": 93,
      "merged_at": "2021-06-23T09:43:15Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "02bfb2909f8b8e67a57e4d91ae00d2f9c3720c69",
        "ref": "IMERC-255"
      },
      "created_at": "2021-06-23T01:01:07Z",
      "closed_at": "2021-06-23T09:43:15Z",
      "body": "https://imercatus.backlog.com/view/IMERC-255\r\n\r\n **Bug Report** \r\n\r\n **Steps to reproduce** \r\nWhen I am using the application on QA\r\nAnd I sign up and the system says an email was sent\r\n\r\n **Expected** \r\nTo receive the email to my inbox\r\n\r\n **Actual** \r\nNo email reaches my inbox\r\n\r\n**Note**\r\n\r\nI have tested this locally with my AWS config setup and it works correctly.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9daf0fb1908b76807bf69426ac6a6b8998e551e1",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/92",
      "updated_at": "2021-06-20T01:13:08Z",
      "title": "[NO-TICKET] another attempt to migrate",
      "state": "closed",
      "number": 92,
      "merged_at": "2021-06-20T01:13:08Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "780c3cf16d6bb0efa6e4b23916ad2f2e6e9a5cfe",
        "ref": "NO-TICKET/demo-7-2106191858"
      },
      "created_at": "2021-06-20T01:13:01Z",
      "closed_at": "2021-06-20T01:13:08Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "1410ca98c8adf12c92f9484360b709b8b04ed6e2",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/91",
      "updated_at": "2021-06-20T00:54:41Z",
      "title": "[NO-TICKET] Migrating from app",
      "state": "closed",
      "number": 91,
      "merged_at": "2021-06-20T00:54:40Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "d93017bb1d22409450ab628243388973566ed8fe",
        "ref": "NO-TICKET/demo-7-2106191858"
      },
      "created_at": "2021-06-20T00:54:33Z",
      "closed_at": "2021-06-20T00:54:40Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "30d4bce4d6d4ae8e932dfb8792341172d5a2f6c1",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/90",
      "updated_at": "2021-06-20T00:14:40Z",
      "title": "[NO-TICKET] QA env integration",
      "state": "closed",
      "number": 90,
      "merged_at": "2021-06-20T00:14:40Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "d5a41c1daeb1a7e880fdff53126f18a42a97930b",
        "ref": "NO-TICKET/demo-7-2106191858"
      },
      "created_at": "2021-06-20T00:14:33Z",
      "closed_at": "2021-06-20T00:14:40Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "585edb61d1b6d9ccf95e6be39c911f886bd0ff69",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/89",
      "updated_at": "2021-06-19T23:13:50Z",
      "title": "[NO-TICKET] Debugging QA round2",
      "state": "closed",
      "number": 89,
      "merged_at": "2021-06-19T23:13:50Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "b40e9d5d6dc0f06178d8dab6788b853242e6fe5a",
        "ref": "NO-TICKET/demo-7-2106191858"
      },
      "created_at": "2021-06-19T23:13:43Z",
      "closed_at": "2021-06-19T23:13:50Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "a807be0ed5499ab7db3c5bba0b5e7c606b2f0529",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/88",
      "updated_at": "2021-06-22T10:53:51Z",
      "title": "Tweak the exception filter so better messages are returned.",
      "state": "closed",
      "number": 88,
      "merged_at": "2021-06-22T10:53:51Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "2219bb465318224e442b8d6a0d9dde793a6a442f",
        "ref": "no-ticket/errors"
      },
      "created_at": "2021-06-19T23:01:34Z",
      "closed_at": "2021-06-22T10:53:51Z",
      "body": "Just makes a minor change to the exception handling logic so we get more than just the status code in the responses.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "a807be0ed5499ab7db3c5bba0b5e7c606b2f0529",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/87",
      "updated_at": "2021-06-19T22:56:47Z",
      "title": "[NO-TICKET] debugging QA env",
      "state": "closed",
      "number": 87,
      "merged_at": "2021-06-19T22:56:47Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "4e07c13c324c80f97bf4a2b454004001be02f2a0",
        "ref": "NO-TICKET/demo-7-2106191858"
      },
      "created_at": "2021-06-19T22:56:39Z",
      "closed_at": "2021-06-19T22:56:47Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "155cbe7a33bb85dd656d52144e6900350b09bdd1",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/86",
      "updated_at": "2021-06-19T21:01:26Z",
      "title": "[NO-TICKET] Demo sprint 7",
      "state": "closed",
      "number": 86,
      "merged_at": "2021-06-19T21:01:26Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "b824dc5acf5763e734c242dc320f723183c7c8e4",
        "ref": "NO-TICKET/demo-sprint-7"
      },
      "created_at": "2021-06-19T21:01:04Z",
      "closed_at": "2021-06-19T21:01:26Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "3e848c93acd8ae65d151aa53f64f9664202f6f94",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/85",
      "updated_at": "2021-06-19T20:55:56Z",
      "title": "[NO-TICKET] Resending invites",
      "state": "closed",
      "number": 85,
      "merged_at": "2021-06-19T20:55:55Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "580cccadcfdd13b930f2928cd88805efb2657098",
        "ref": "NO-TICKET/demo-sprint-7"
      },
      "created_at": "2021-06-19T20:55:39Z",
      "closed_at": "2021-06-19T20:55:55Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "bcb097c6aebaa6639b534c3a3a280baec0b77319",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/84",
      "updated_at": "2021-06-18T22:13:30Z",
      "title": "[no-ticket] Slightly restructure the shared module.",
      "state": "closed",
      "number": 84,
      "merged_at": "2021-06-18T22:13:29Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ff94c861abdff8f5ba2f3b14b7e60350205bda6b",
        "ref": "no-ticket/consolidate-shared"
      },
      "created_at": "2021-06-18T12:00:26Z",
      "closed_at": "2021-06-18T22:13:30Z",
      "body": "Proposing 3 slightly opinionated changes here:\r\n- Apply structure to the code contained in the Shared module\r\n- Move all logic currently in the App module to the Shared module\r\n- Converts the UserInfoMiddleware into an actual middleware.\r\n\r\nThe first set of changes are fairly benign.  It just rearranges some things so there's more structure, as we're going to be adding quite a bit more to the Shared module over time.\r\n\r\nThe second change is also trivial.  Currently, we have some initialization happening in the App module, and some in Shared.  This PR just moves everything to Shared, leaving App as just a top-level container for other modules.  I think this will make it easier to know where app initialization logic should reside in the future.\r\n\r\nThirdly, this just hooks the UserInfoMiddleware up an actual middleware.  Currently, it's just a method that's called directly by the AuthenticationGuard.  This PR makes it an actual middleware, running on every request.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "4ce582a93d6bb27d0168b3214b144008cc24c2f7",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/83",
      "updated_at": "2021-06-18T16:38:57Z",
      "title": "[no-ticket] Allow Auth0 to be bypassed during e2e testing.",
      "state": "closed",
      "number": 83,
      "merged_at": "2021-06-18T16:38:56Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "6ac283e20939b547e7957a3333d928ffd8494310",
        "ref": "no-ticket/auth0-testing"
      },
      "created_at": "2021-06-18T10:57:57Z",
      "closed_at": "2021-06-18T16:38:56Z",
      "body": "This PR adds the ability to completely bypass Auth0 during e2e testing.  During normal development, it is extremely common to hit rate-limiting from Auth0, basically rendering testing impossible.  Since most of our e2e tests don't rely on the Auth0 integration, and make the assumption that we have a valid logged in user, it makes sense to be able to bypass Auth0.\r\n\r\nThis PR does X things:\r\n- Add a configuration option (and environment variable) to toggle Auth0 integration during testing\r\n- Exposes an option in `initTestingModule()` to allow overriding the global setting in individual e2e tests\r\n- When Auth0 integration is disabled, this PR replaces `UserInfoMiddleware` with a mock that just sets some `UserProfile` data on the `Request`, and replaces the real `getUserProfile`/`getAccessToken` with mocks that just return data to match that set by `UserInfoMiddleware`.\r\n\r\nBy default, the behavior of the system is the same as it is today (meaning that we really hit Auth0 during e2e testing).  Setting the appropriate environment variable in `.env.test` will disable the integration in all e2e tests **except** the actual Auth0 e2e test (for obvious reasons).",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "65fbab619b6249e6748ee30140e2ba3d1c296e64",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/82",
      "updated_at": "2021-06-22T12:31:19Z",
      "title": "[IMERC-133] implement filtering pagination",
      "state": "closed",
      "number": 82,
      "merged_at": "2021-06-22T12:31:18Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "09439dc12c1627c678159e01ed5f7867514ec8b1",
        "ref": "feature/IMERC-133-implement-filtering-pagination"
      },
      "created_at": "2021-06-15T18:13:03Z",
      "closed_at": "2021-06-22T12:31:18Z",
      "body": "https://imercatus.backlog.com/view/IMERC-133",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ba384e69e57d2ee50a763cc1ebbbc6fb06ee2f44",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/81",
      "updated_at": "2021-08-16T14:12:29Z",
      "title": "[Snyk] Upgrade nodemailer from 6.6.0 to 6.6.1",
      "state": "closed",
      "number": 81,
      "merged_at": "2021-06-16T14:56:27Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "50c3ebdbd87c6e844b47d89f1cced6d081483e08",
        "ref": "snyk-upgrade-02ee2e7ac21768d6214bcfc7327256c9"
      },
      "created_at": "2021-06-13T21:24:15Z",
      "closed_at": "2021-06-16T14:56:27Z",
      "body": "<h3>Snyk has created this PR to upgrade nodemailer from 6.6.0 to 6.6.1.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=nodemailer&from_version=6.6.0&to_version=6.6.1&pr_id=855b3d5b-fb0c-45db-b8eb-6343fae36682&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **21 days ago**, on 2021-05-23.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>nodemailer</b></summary>\n    <ul>\n      <li>\n        <b>6.6.1</b> - <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases/tag/v6.6.1\">2021-05-23</a></br><p>v6.6.1</p>\n      </li>\n      <li>\n        <b>6.6.0</b> - <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases/tag/v6.6.0\">2021-04-28</a></br><p>v6.6.0</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases\">nodemailer GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>nodemailer</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/7e02648cc8cd863f5085bad3cd09087bccf84b9f\">7e02648</a> v6.6.1</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/compare/1750c0ff89ab79161f722b0cd35381cbc39fee46...7e02648cc8cd863f5085bad3cd09087bccf84b9f\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI4NTViM2Q1Yi1mYjBjLTQ1ZGItYjhlYi02MzQzZmFlMzY2ODIiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6Ijg1NWIzZDViLWZiMGMtNDVkYi1iOGViLTYzNDNmYWUzNjY4MiJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?pkg&#x3D;nodemailer&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"855b3d5b-fb0c-45db-b8eb-6343fae36682\",\"prPublicId\":\"855b3d5b-fb0c-45db-b8eb-6343fae36682\",\"dependencies\":[{\"name\":\"nodemailer\",\"from\":\"6.6.0\",\"to\":\"6.6.1\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"87e2f02e-ddbc-4bb7-b086-002440cb0cf2\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-05-23T10:19:19.008Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "659f05f8455629b2b9fd3b6b9f0aa55f0e94ee33",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/80",
      "updated_at": "2021-06-22T06:35:44Z",
      "title": "Adds projects module and controller",
      "state": "closed",
      "number": 80,
      "merged_at": "2021-06-22T06:35:44Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "30be21b9d8bd5137421c31294d9474f2313ab6ea",
        "ref": "IMERC-217-list-of-projects"
      },
      "created_at": "2021-06-11T17:47:06Z",
      "closed_at": "2021-06-22T06:35:44Z",
      "body": "- [IMERC-217 BE - create endpoint to get list of projects](https://imercatus.backlog.com/view/IMERC-217)\r\n- [IMERC-218 BE - create endpoint to create a new project](https://imercatus.backlog.com/view/IMERC-218)\r\n- [IMERC-219 BE - create endpoint to update a project](https://imercatus.backlog.com/view/IMERC-219)\r\n- [IMERC-220 BE - create an endpoint for a soft-delete (archive)](https://imercatus.backlog.com/view/IMERC-220)\r\n\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "f35a48d6f2b218373effeb3d8478b57c6ae7dad3",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 683530856,
        "path": "src/identity/entities/user.entity.ts",
        "id": 651425499,
        "diff_hunk": "@@ -7,9 +14,8 @@ import {\n   IsPhoneNumber,\n   MaxLength,\n } from 'class-validator';\n-\n import { BaseEntity } from '@/shared';\n-\n+import { Project } from '../../projects/entities/project.entity';",
        "created_at": "2021-06-15T03:43:36Z",
        "body": "When this is changed to:\r\n\r\n```\r\nimport { Project } from '@/projects';\r\n```\r\n\r\nWe get a circular dependency error:\r\nhttps://gist.githubusercontent.com/alkema/78811b7c54c3b23bdae1aa3590fba4c5/raw/f1abc2db0c3ad969f3b9dd3cfbb6d6c15836f430/gistfile1.txt\r\n"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 683531336,
        "path": "src/identity/entities/user.entity.ts",
        "in_reply_to_id": 651425499,
        "id": 651425893,
        "diff_hunk": "@@ -7,9 +14,8 @@ import {\n   IsPhoneNumber,\n   MaxLength,\n } from 'class-validator';\n-\n import { BaseEntity } from '@/shared';\n-\n+import { Project } from '../../projects/entities/project.entity';",
        "created_at": "2021-06-15T03:45:05Z",
        "body": "Can you see something wrong with how the barrel files are implemented etc?\r\n\r\nPossible related: \r\nhttps://github.com/nestjs/nest/issues/3555\r\n\r\n"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 685298360,
        "path": "src/identity/services/users.service.ts",
        "id": 652781365,
        "diff_hunk": "@@ -30,6 +30,12 @@ export class UsersService {\n       .getOne();\n   }\n \n+  findWithProjects(id: number): Promise<User> {\n+    return this.userRepository.findOne(id, {\n+      relations: ['projects'],",
        "created_at": "2021-06-16T15:04:52Z",
        "body": "I don't recall where we at wrt multiple companies/users combinations, but should we always include company as a condition/clause?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 686594926,
        "path": "src/identity/services/users.service.ts",
        "in_reply_to_id": 652781365,
        "id": 653768095,
        "diff_hunk": "@@ -30,6 +30,12 @@ export class UsersService {\n       .getOne();\n   }\n \n+  findWithProjects(id: number): Promise<User> {\n+    return this.userRepository.findOne(id, {\n+      relations: ['projects'],",
        "created_at": "2021-06-17T17:10:38Z",
        "body": "üëç "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 686814003,
        "path": "src/identity/services/users.service.ts",
        "in_reply_to_id": 652781365,
        "id": 653935330,
        "diff_hunk": "@@ -30,6 +30,12 @@ export class UsersService {\n       .getOne();\n   }\n \n+  findWithProjects(id: number): Promise<User> {\n+    return this.userRepository.findOne(id, {\n+      relations: ['projects'],",
        "created_at": "2021-06-17T20:57:49Z",
        "body": "Will nest it."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 688717655,
        "path": "src/identity/services/users.service.ts",
        "in_reply_to_id": 652781365,
        "id": 655592393,
        "diff_hunk": "@@ -30,6 +30,12 @@ export class UsersService {\n       .getOne();\n   }\n \n+  findWithProjects(id: number): Promise<User> {\n+    return this.userRepository.findOne(id, {\n+      relations: ['projects'],",
        "created_at": "2021-06-21T17:55:14Z",
        "body": "all nested now"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/79",
      "updated_at": "2021-06-10T10:45:28Z",
      "title": "[Snyk] Upgrade fishery from 1.3.0 to 1.3.1",
      "state": "closed",
      "number": 79,
      "merged_at": "2021-06-10T10:45:27Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c6059bda89d071fa62ee8d3b9657a34d166c3aa1",
        "ref": "snyk-upgrade-40b39249a82c8935410d4134b45ded39"
      },
      "created_at": "2021-06-09T03:19:06Z",
      "closed_at": "2021-06-10T10:45:27Z",
      "body": "<h3>Snyk has created this PR to upgrade fishery from 1.3.0 to 1.3.1.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=fishery&from_version=1.3.0&to_version=1.3.1&pr_id=5eabecff-1951-47f9-a0a4-523e0df77ea9&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **25 days ago**, on 2021-05-14.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>fishery</b></summary>\n    <ul>\n      <li>\n        <b>1.3.1</b> - <a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/releases/tag/v1.3.1\">2021-05-14</a></br><p>Previously, deep merge was only being done when merging the params supplied to <code>build()</code> on top of the object defined in the factory definition.</p>\n<p>This makes it so a deep merge is also performed when merging the params supplied to <code>params()</code> into the params supplied to <code>build()</code> and also when merging params from multiple <code>params()</code> calls into each other.</p>\n<p>See <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"892241109\" data-permission-text=\"Title is private\" data-url=\"https://github.com/thoughtbot/fishery/issues/59\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/thoughtbot/fishery/pull/59/hovercard\" href=\"https://snyk.io/redirect/github/thoughtbot/fishery/pull/59\">#59</a>.</p>\n      </li>\n      <li>\n        <b>1.3.0</b> - <a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/releases/tag/v1.3.0\">2021-05-14</a></br><p>This fixes an issue where using traits or extending factories caused the sequence to no longer be shared. See <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"802401939\" data-permission-text=\"Title is private\" data-url=\"https://github.com/thoughtbot/fishery/issues/51\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/thoughtbot/fishery/pull/51/hovercard\" href=\"https://snyk.io/redirect/github/thoughtbot/fishery/pull/51\">#51</a>.</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/releases\">fishery GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>fishery</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/commit/3eb0ec1bbca1ec87e89213a0061483f476b8db49\">3eb0ec1</a> 1.3.1</li>\n      <li><a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/commit/c2cb6cc78b0361ce67714ecf427f96e20125c16b\">c2cb6cc</a> Deep merge params when supplied via traits (#59)</li>\n      <li><a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/commit/e3aaa3efab93920fb56f570c9133c897121823a6\">e3aaa3e</a> Bump hosted-git-info from 2.8.8 to 2.8.9 (#58)</li>\n      <li><a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/commit/2833f66fdfbcbb6d9f6ff7f97d3d21952c914ead\">2833f66</a> Bump lodash from 4.17.19 to 4.17.21 (#57)</li>\n      <li><a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/commit/846f9f0c3fc8258986902ae3fb407223ce45686b\">846f9f0</a> Bump y18n from 4.0.0 to 4.0.1 (#55)</li>\n      <li><a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/commit/f86f47522c59074f662b67fb8fb63a43357df36f\">f86f475</a> Update documation for &#x27;Installation&#x27; (#50)</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/compare/1212f48debbc10e694dbcc9dd57e8d33d12ab3c2...3eb0ec1bbca1ec87e89213a0061483f476b8db49\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI1ZWFiZWNmZi0xOTUxLTQ3ZjktYTBhNC01MjNlMGRmNzdlYTkiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjVlYWJlY2ZmLTE5NTEtNDdmOS1hMGE0LTUyM2UwZGY3N2VhOSJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?pkg&#x3D;fishery&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"5eabecff-1951-47f9-a0a4-523e0df77ea9\",\"prPublicId\":\"5eabecff-1951-47f9-a0a4-523e0df77ea9\",\"dependencies\":[{\"name\":\"fishery\",\"from\":\"1.3.0\",\"to\":\"1.3.1\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"87e2f02e-ddbc-4bb7-b086-002440cb0cf2\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-05-14T21:44:39.081Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "fe9d5b7f73a34e53aac3a99e53698910b3cbb630",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/78",
      "updated_at": "2021-06-10T10:41:09Z",
      "title": "[Snyk] Upgrade: @nestjs/common, @nestjs/core, @nestjs/platform-express",
      "state": "closed",
      "number": 78,
      "merged_at": "2021-06-10T10:41:08Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ddd9247a37e4e1ea8da733e7621832c6d64bee96",
        "ref": "snyk-upgrade-789fa9a93f7f92c4f2dc6609cf401163"
      },
      "created_at": "2021-06-09T03:19:01Z",
      "closed_at": "2021-06-10T10:41:08Z",
      "body": "<h3>Snyk has created this PR to upgrade multiple dependencies.</h3>\nüëØ The following dependencies are linked and will therefore be updated together.\n</br></br>\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n</br></br>\n\n Name         | Versions     | Released on\n:-------------|:-------------|:-------------\n**@nestjs/common**</br>from 7.6.15 to 7.6.17 | **2 versions** ahead of your current version | **22 days ago**</br>on 2021-05-18\n**@nestjs/core**</br>from 7.6.15 to 7.6.17 | **2 versions** ahead of your current version | **22 days ago**</br>on 2021-05-18\n**@nestjs/platform-express**</br>from 7.6.15 to 7.6.17 | **2 versions** ahead of your current version | **22 days ago**</br>on 2021-05-18\n\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>@nestjs/common</b></summary>\n    <ul>\n      <li>\n        <b>7.6.17</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.17\">2021-05-18</a></br><p>v7.6.17</p>\n      </li>\n      <li>\n        <b>7.6.16</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.16\">2021-05-18</a></br><p>v7.6.16</p>\n      </li>\n      <li>\n        <b>7.6.15</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.15\">2021-03-22</a></br><p>v7.6.15</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases\">@nestjs/common GitHub release notes</a>\n  </details>\n  <details>\n    <summary>Package name: <b>@nestjs/core</b></summary>\n    <ul>\n      <li>\n        <b>7.6.17</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.17\">2021-05-18</a></br><p>v7.6.17</p>\n      </li>\n      <li>\n        <b>7.6.16</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.16\">2021-05-18</a></br><p>v7.6.16</p>\n      </li>\n      <li>\n        <b>7.6.15</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.15\">2021-03-22</a></br><p>v7.6.15</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases\">@nestjs/core GitHub release notes</a>\n  </details>\n  <details>\n    <summary>Package name: <b>@nestjs/platform-express</b></summary>\n    <ul>\n      <li>\n        <b>7.6.17</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.17\">2021-05-18</a></br><p>v7.6.17</p>\n      </li>\n      <li>\n        <b>7.6.16</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.16\">2021-05-18</a></br><p>v7.6.16</p>\n      </li>\n      <li>\n        <b>7.6.15</b> - <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases/tag/v7.6.15\">2021-03-22</a></br><p>v7.6.15</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nestjs/nest/releases\">@nestjs/platform-express GitHub release notes</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIwYTkyMGY1Ni01NTBhLTQzOWYtYjQ0My05N2EyMDJhOWVkYzMiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjBhOTIwZjU2LTU1MGEtNDM5Zi1iNDQzLTk3YTIwMmE5ZWRjMyJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?pkg&#x3D;@nestjs/common&amp;pkg&#x3D;@nestjs/core&amp;pkg&#x3D;@nestjs/platform-express&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"0a920f56-550a-439f-b443-97a202a9edc3\",\"prPublicId\":\"0a920f56-550a-439f-b443-97a202a9edc3\",\"dependencies\":[{\"name\":\"@nestjs/common\",\"from\":\"7.6.15\",\"to\":\"7.6.17\"},{\"name\":\"@nestjs/core\",\"from\":\"7.6.15\",\"to\":\"7.6.17\"},{\"name\":\"@nestjs/platform-express\",\"from\":\"7.6.15\",\"to\":\"7.6.17\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"87e2f02e-ddbc-4bb7-b086-002440cb0cf2\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":2,\"publishedDate\":\"2021-05-18T08:43:03.799Z\"},\"templateVariants\":[],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "fe9d5b7f73a34e53aac3a99e53698910b3cbb630",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/77",
      "updated_at": "2021-07-01T23:39:10Z",
      "title": "[IMERC-132] Implement search/sort/pagination",
      "state": "closed",
      "number": 77,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "4c5324231275fca544862dfd51ca4c64dcd1fb70",
        "ref": "feature/IMERC-132-filtering-pagination"
      },
      "created_at": "2021-06-07T16:57:45Z",
      "closed_at": "2021-06-11T18:59:08Z",
      "body": "https://imercatus.backlog.com/view/IMERC-132\r\n\r\nThis makes changes to both the input and output of the `CompaniesController` index action.  The input QS uses a DTO to perform validation.\r\n\r\nWhat this gives us is the ability to have urls that resemble the following:\r\n`/companies?page=2&limit=50&sort=-name&filter[name][like]=Foo`\r\n\r\nThe arguments are as followed:\r\n| **FIELD** | **DESCRIPTION** |\r\n| ---------- | ------------------ |\r\n| *page* | Page number |\r\n| *limit* | Number of records to return |\r\n| *sort* | Sort order + direction (default is ascending...switch to descending by prefixing with a hyphen (`-`)) |\r\n| *filter* | see below |\r\n\r\nFiltering is currently performed using an object in the URL.  This allows for more than just equality checks. Format is as follows:\r\n\r\n```\r\nfilter[<field_name>][<operator>]=<value>\r\n```\r\n\r\nThis allows for things like `filter[size][gt]=20`, `filter[name][like]=Foo`.  Not currently supported, but it would not be difficult to allow for grouping in the url, so something like `filter[and][groupid][name][like]=foo&filter[and][groupid][size][gt]=100`.\r\n\r\nSwagger docs are currently wonky for the companies index action, because of the deeply nested Query DTO.  There's a path to get it working, but I didn't want to spend any more time if this approach isn't popular.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "bbab6596a6c3ba426438c88a11b527f2042a2413",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 681048726,
        "path": "src/main.ts",
        "id": 649376052,
        "diff_hunk": "@@ -17,9 +17,6 @@ async function bootstrap() {\n   const app = await NestFactory.create(AppModule);\n   const configService = app.get<ConfigService>(ConfigService);\n \n-  // ~15 security middlewares: https://github.com/helmetjs/helmet#how-it-works\n-  app.use(helmet());\n-",
        "created_at": "2021-06-10T17:13:34Z",
        "body": "Was this getting in the way of pagination params?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 681049054,
        "path": "src/main.ts",
        "id": 649376266,
        "diff_hunk": "@@ -31,6 +28,9 @@ async function bootstrap() {\n   const document = SwaggerModule.createDocument(app, config);\n   SwaggerModule.setup('api', app, document);\n \n+  // ~15 security middlewares: https://github.com/helmetjs/helmet#how-it-works\n+  app.use(helmet());",
        "created_at": "2021-06-10T17:13:55Z",
        "body": "Derp, it just got moved."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 681057169,
        "path": "test/e2e/companies.e2e-spec.ts",
        "id": 649382292,
        "diff_hunk": "@@ -47,31 +48,177 @@ describe('CompaniesController (e2e)', () => {\n \n   describe('Listing companies', () => {\n     let result: request.Test;\n-    let company: Company;\n+    let companies: Company[];\n \n-    beforeEach(async () => {\n-      company = await companiesFactory.create();\n-      result = request(http)\n-        .get('/companies')\n-        .set('Accept', 'application/json');\n+    describe('with no options', () => {\n+      beforeEach(async () => {\n+        companies = await companiesFactory.createList(40);\n+        result = request(http)\n+          .get('/companies')\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with an array of companies', (done) => {\n+        const company = companies[0];\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(40);\n+          expect(res.body.data).toHaveLength(20);\n+          const data = res.body.data[0];\n+          expect(data).toMatchObject({\n+            id: company.id,\n+            name: company.name,\n+            size: company.size,\n+            ein: company.ein,\n+            businessTypes: company.businessTypes,\n+          });\n+          expect(data).toHaveProperty('createdAt');\n+          expect(data).toHaveProperty('updatedAt');\n+          done();\n+        });\n+      });\n+    });\n+\n+    describe('with pagination', () => {\n+      beforeEach(async () => {\n+        companies = await companiesFactory.createList(40);\n+      });\n+\n+      const query: CompanyQueryDTO = {\n+        limit: 2,\n+        page: 3,\n+      };\n+\n+      beforeEach(() => {\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with an array of companies', (done) => {\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(40);\n+          expect(res.body.data).toHaveLength(query.limit);\n+          done();\n+        });\n+      });\n+    });\n+\n+    describe('with filtering by name', () => {\n+      let company: Company;\n+\n+      beforeEach(async () => {\n+        company = await companiesFactory.create({ name: 'SelectMe' });\n+        await companiesFactory.create({ name: 'SkipMe' });\n+        const query: CompanyQueryDTO = {\n+          filter: {\n+            name: { eq: company.name },\n+          },\n+        };\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with only the matched company', (done) => {",
        "created_at": "2021-06-10T17:23:16Z",
        "body": "üèÖ "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 681063742,
        "path": "test/e2e/companies.e2e-spec.ts",
        "id": 649384542,
        "diff_hunk": "@@ -47,31 +48,177 @@ describe('CompaniesController (e2e)', () => {\n \n   describe('Listing companies', () => {\n     let result: request.Test;\n-    let company: Company;\n+    let companies: Company[];\n \n-    beforeEach(async () => {\n-      company = await companiesFactory.create();\n-      result = request(http)\n-        .get('/companies')\n-        .set('Accept', 'application/json');\n+    describe('with no options', () => {\n+      beforeEach(async () => {\n+        companies = await companiesFactory.createList(40);\n+        result = request(http)\n+          .get('/companies')\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with an array of companies', (done) => {\n+        const company = companies[0];\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(40);\n+          expect(res.body.data).toHaveLength(20);\n+          const data = res.body.data[0];\n+          expect(data).toMatchObject({\n+            id: company.id,\n+            name: company.name,\n+            size: company.size,\n+            ein: company.ein,\n+            businessTypes: company.businessTypes,\n+          });\n+          expect(data).toHaveProperty('createdAt');\n+          expect(data).toHaveProperty('updatedAt');\n+          done();\n+        });\n+      });\n+    });\n+\n+    describe('with pagination', () => {\n+      beforeEach(async () => {\n+        companies = await companiesFactory.createList(40);\n+      });\n+\n+      const query: CompanyQueryDTO = {\n+        limit: 2,\n+        page: 3,\n+      };\n+\n+      beforeEach(() => {\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with an array of companies', (done) => {\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(40);\n+          expect(res.body.data).toHaveLength(query.limit);\n+          done();\n+        });\n+      });\n+    });\n+\n+    describe('with filtering by name', () => {\n+      let company: Company;\n+\n+      beforeEach(async () => {\n+        company = await companiesFactory.create({ name: 'SelectMe' });\n+        await companiesFactory.create({ name: 'SkipMe' });\n+        const query: CompanyQueryDTO = {\n+          filter: {\n+            name: { eq: company.name },\n+          },\n+        };\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with only the matched company', (done) => {\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(1);\n+          expect(res.body.data).toHaveLength(1);\n+          expect(res.body.data[0]).toMatchObject({ name: company.name });\n+          done();\n+        });\n+      });\n     });\n \n-    it('should return 200', (done) => result.expect(200, done));\n-\n-    it('should respond with an array of companies', (done) =>\n-      result.end((err, res) => {\n-        expect(res.body).toHaveLength(1);\n-        expect(res.body[0]).toMatchObject({\n-          id: company.id,\n-          name: company.name,\n-          size: company.size,\n-          ein: company.ein,\n-          businessTypes: company.businessTypes,\n+    describe('with filtering by size', () => {\n+      let company: Company;\n+\n+      beforeEach(async () => {\n+        company = await companiesFactory.create({ size: 1 });\n+        await companiesFactory.create({ size: 2 });\n+        const query: CompanyQueryDTO = {\n+          filter: {\n+            size: { eq: company.size },\n+          },\n+        };\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with only the matched company', (done) => {\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(1);\n+          expect(res.body.data).toHaveLength(1);\n+          expect(res.body.data[0]).toMatchObject({ size: company.size });\n+          done();\n         });\n-        expect(res.body[0]).toHaveProperty('createdAt');\n-        expect(res.body[0]).toHaveProperty('updatedAt');\n-        done();\n-      }));\n+      });\n+    });\n+\n+    describe('with sorting by name', () => {\n+      let companyA: Company;\n+      let companyB: Company;\n+\n+      beforeEach(async () => {\n+        companyA = await companiesFactory.create({ name: 'ACompany' });\n+        companyB = await companiesFactory.create({ name: 'CompanyB' });\n+      });\n+\n+      describe('ascending', () => {\n+        beforeEach(() => {\n+          const query: CompanyQueryDTO = {\n+            sort: 'name',\n+          };\n+          result = request(http)\n+            .get('/companies')\n+            .query(query)\n+            .set('Accept', 'application/json');\n+        });\n+\n+        it('should return 200', (done) => result.expect(200, done));\n+\n+        it('should sort ascending', async (done) => {\n+          result.end((err, res) => {\n+            expect(res.body.total).toBe(2);\n+            expect(res.body.data[0].name).toBe(companyA.name);\n+            done();\n+          });\n+        });\n+      });\n+\n+      describe('descending', () => {\n+        beforeEach(() => {\n+          const query: CompanyQueryDTO = {\n+            sort: '-name',\n+          };\n+          result = request(http)\n+            .get('/companies')\n+            .query(query)\n+            .set('Accept', 'application/json');\n+        });\n+\n+        it('should return 200', (done) => result.expect(200, done));\n+\n+        it('should sort ascending', async (done) => {\n+          result.end((err, res) => {\n+            expect(res.body.total).toBe(2);\n+            expect(res.body.data[0].name).toBe(companyB.name);\n+            done();\n+          });\n+        });\n+      });\n+    });",
        "created_at": "2021-06-10T17:26:44Z",
        "body": "These tests are great. once you start implementing this across the board, I wonder if we should have a generic e2e test somehow. Thoughts?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 681069484,
        "path": "test/e2e/companies.e2e-spec.ts",
        "in_reply_to_id": 649384542,
        "id": 649386578,
        "diff_hunk": "@@ -47,31 +48,177 @@ describe('CompaniesController (e2e)', () => {\n \n   describe('Listing companies', () => {\n     let result: request.Test;\n-    let company: Company;\n+    let companies: Company[];\n \n-    beforeEach(async () => {\n-      company = await companiesFactory.create();\n-      result = request(http)\n-        .get('/companies')\n-        .set('Accept', 'application/json');\n+    describe('with no options', () => {\n+      beforeEach(async () => {\n+        companies = await companiesFactory.createList(40);\n+        result = request(http)\n+          .get('/companies')\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with an array of companies', (done) => {\n+        const company = companies[0];\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(40);\n+          expect(res.body.data).toHaveLength(20);\n+          const data = res.body.data[0];\n+          expect(data).toMatchObject({\n+            id: company.id,\n+            name: company.name,\n+            size: company.size,\n+            ein: company.ein,\n+            businessTypes: company.businessTypes,\n+          });\n+          expect(data).toHaveProperty('createdAt');\n+          expect(data).toHaveProperty('updatedAt');\n+          done();\n+        });\n+      });\n+    });\n+\n+    describe('with pagination', () => {\n+      beforeEach(async () => {\n+        companies = await companiesFactory.createList(40);\n+      });\n+\n+      const query: CompanyQueryDTO = {\n+        limit: 2,\n+        page: 3,\n+      };\n+\n+      beforeEach(() => {\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with an array of companies', (done) => {\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(40);\n+          expect(res.body.data).toHaveLength(query.limit);\n+          done();\n+        });\n+      });\n+    });\n+\n+    describe('with filtering by name', () => {\n+      let company: Company;\n+\n+      beforeEach(async () => {\n+        company = await companiesFactory.create({ name: 'SelectMe' });\n+        await companiesFactory.create({ name: 'SkipMe' });\n+        const query: CompanyQueryDTO = {\n+          filter: {\n+            name: { eq: company.name },\n+          },\n+        };\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with only the matched company', (done) => {\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(1);\n+          expect(res.body.data).toHaveLength(1);\n+          expect(res.body.data[0]).toMatchObject({ name: company.name });\n+          done();\n+        });\n+      });\n     });\n \n-    it('should return 200', (done) => result.expect(200, done));\n-\n-    it('should respond with an array of companies', (done) =>\n-      result.end((err, res) => {\n-        expect(res.body).toHaveLength(1);\n-        expect(res.body[0]).toMatchObject({\n-          id: company.id,\n-          name: company.name,\n-          size: company.size,\n-          ein: company.ein,\n-          businessTypes: company.businessTypes,\n+    describe('with filtering by size', () => {\n+      let company: Company;\n+\n+      beforeEach(async () => {\n+        company = await companiesFactory.create({ size: 1 });\n+        await companiesFactory.create({ size: 2 });\n+        const query: CompanyQueryDTO = {\n+          filter: {\n+            size: { eq: company.size },\n+          },\n+        };\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with only the matched company', (done) => {\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(1);\n+          expect(res.body.data).toHaveLength(1);\n+          expect(res.body.data[0]).toMatchObject({ size: company.size });\n+          done();\n         });\n-        expect(res.body[0]).toHaveProperty('createdAt');\n-        expect(res.body[0]).toHaveProperty('updatedAt');\n-        done();\n-      }));\n+      });\n+    });\n+\n+    describe('with sorting by name', () => {\n+      let companyA: Company;\n+      let companyB: Company;\n+\n+      beforeEach(async () => {\n+        companyA = await companiesFactory.create({ name: 'ACompany' });\n+        companyB = await companiesFactory.create({ name: 'CompanyB' });\n+      });\n+\n+      describe('ascending', () => {\n+        beforeEach(() => {\n+          const query: CompanyQueryDTO = {\n+            sort: 'name',\n+          };\n+          result = request(http)\n+            .get('/companies')\n+            .query(query)\n+            .set('Accept', 'application/json');\n+        });\n+\n+        it('should return 200', (done) => result.expect(200, done));\n+\n+        it('should sort ascending', async (done) => {\n+          result.end((err, res) => {\n+            expect(res.body.total).toBe(2);\n+            expect(res.body.data[0].name).toBe(companyA.name);\n+            done();\n+          });\n+        });\n+      });\n+\n+      describe('descending', () => {\n+        beforeEach(() => {\n+          const query: CompanyQueryDTO = {\n+            sort: '-name',\n+          };\n+          result = request(http)\n+            .get('/companies')\n+            .query(query)\n+            .set('Accept', 'application/json');\n+        });\n+\n+        it('should return 200', (done) => result.expect(200, done));\n+\n+        it('should sort ascending', async (done) => {\n+          result.end((err, res) => {\n+            expect(res.body.total).toBe(2);\n+            expect(res.body.data[0].name).toBe(companyB.name);\n+            done();\n+          });\n+        });\n+      });\n+    });",
        "created_at": "2021-06-10T17:29:33Z",
        "body": "Or maybe the pagination DTOs and related code could get unit tested instead/as well."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 681076426,
        "path": "src/identity/controllers/companies.controller.ts",
        "id": 649393231,
        "diff_hunk": "@@ -5,43 +5,79 @@ import {\n   Param,\n   Patch,\n   Post,\n+  Query,\n   UseGuards,\n   UseInterceptors,\n } from '@nestjs/common';\n+import { ApiExtraModels } from '@nestjs/swagger';\n import { plainToClass } from 'class-transformer';\n \n-import { NotFoundInterceptor } from '@/shared';\n+import { NotFoundInterceptor, ResponseDTO } from '@/shared';\n+import { NumericFilter, StringFilter } from '@/shared/querying';\n+import { ApiPaginatedResponse, PaginatedResponseDTO } from '@/shared/responses';\n \n import { CompaniesService, RegistrationsService } from '../services';\n import {\n   CompanyDTO,\n   CompanyCreateDTO,\n   CompanyUpdateDTO,\n   CompanyRegisterDTO,\n+  CompanyQueryDTO,\n+  CompanyFilters,\n } from '../dto';\n import { LoggedInUser, UserProfile } from '../decorators';\n import { AuthenticationGuard } from '../guards';\n \n @Controller('companies')\n+@ApiExtraModels(PaginatedResponseDTO)\n export class CompaniesController {\n   constructor(\n     private readonly companiesService: CompaniesService,\n     private readonly registrationsService: RegistrationsService,\n   ) {}\n \n   @Get()\n-  public async getAll(): Promise<CompanyDTO[]> {\n-    const companies = await this.companiesService.getAll();\n+  @ApiPaginatedResponse(CompanyDTO)\n+  @ApiExtraModels(CompanyFilters, NumericFilter, StringFilter)\n+  // TODO: Get Swagger docs working for the query params\n+  // @ApiQuery({\n+  //   required: false,\n+  //   name: 'filter',\n+  //   style: 'deepObject',\n+  //   explode: true,\n+  //   type: 'object',\n+  //   schema: {\n+  //     type: 'object',\n+  //     properties: {\n+  //       name: {\n+  //         type: 'object',\n+  //         properties: {}\n+  //       }\n+  //     },\n+  //     // $ref: getSchemaPath(CompanyFilters),\n+  //   },\n+  // })",
        "created_at": "2021-06-10T17:37:40Z",
        "body": "Thanks for this note. Is it causing grief? FWIW I am fine approving and resolving this in the next story."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 681079869,
        "path": "test/e2e/companies.e2e-spec.ts",
        "in_reply_to_id": 649384542,
        "id": 649395874,
        "diff_hunk": "@@ -47,31 +48,177 @@ describe('CompaniesController (e2e)', () => {\n \n   describe('Listing companies', () => {\n     let result: request.Test;\n-    let company: Company;\n+    let companies: Company[];\n \n-    beforeEach(async () => {\n-      company = await companiesFactory.create();\n-      result = request(http)\n-        .get('/companies')\n-        .set('Accept', 'application/json');\n+    describe('with no options', () => {\n+      beforeEach(async () => {\n+        companies = await companiesFactory.createList(40);\n+        result = request(http)\n+          .get('/companies')\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with an array of companies', (done) => {\n+        const company = companies[0];\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(40);\n+          expect(res.body.data).toHaveLength(20);\n+          const data = res.body.data[0];\n+          expect(data).toMatchObject({\n+            id: company.id,\n+            name: company.name,\n+            size: company.size,\n+            ein: company.ein,\n+            businessTypes: company.businessTypes,\n+          });\n+          expect(data).toHaveProperty('createdAt');\n+          expect(data).toHaveProperty('updatedAt');\n+          done();\n+        });\n+      });\n+    });\n+\n+    describe('with pagination', () => {\n+      beforeEach(async () => {\n+        companies = await companiesFactory.createList(40);\n+      });\n+\n+      const query: CompanyQueryDTO = {\n+        limit: 2,\n+        page: 3,\n+      };\n+\n+      beforeEach(() => {\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with an array of companies', (done) => {\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(40);\n+          expect(res.body.data).toHaveLength(query.limit);\n+          done();\n+        });\n+      });\n+    });\n+\n+    describe('with filtering by name', () => {\n+      let company: Company;\n+\n+      beforeEach(async () => {\n+        company = await companiesFactory.create({ name: 'SelectMe' });\n+        await companiesFactory.create({ name: 'SkipMe' });\n+        const query: CompanyQueryDTO = {\n+          filter: {\n+            name: { eq: company.name },\n+          },\n+        };\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with only the matched company', (done) => {\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(1);\n+          expect(res.body.data).toHaveLength(1);\n+          expect(res.body.data[0]).toMatchObject({ name: company.name });\n+          done();\n+        });\n+      });\n     });\n \n-    it('should return 200', (done) => result.expect(200, done));\n-\n-    it('should respond with an array of companies', (done) =>\n-      result.end((err, res) => {\n-        expect(res.body).toHaveLength(1);\n-        expect(res.body[0]).toMatchObject({\n-          id: company.id,\n-          name: company.name,\n-          size: company.size,\n-          ein: company.ein,\n-          businessTypes: company.businessTypes,\n+    describe('with filtering by size', () => {\n+      let company: Company;\n+\n+      beforeEach(async () => {\n+        company = await companiesFactory.create({ size: 1 });\n+        await companiesFactory.create({ size: 2 });\n+        const query: CompanyQueryDTO = {\n+          filter: {\n+            size: { eq: company.size },\n+          },\n+        };\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with only the matched company', (done) => {\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(1);\n+          expect(res.body.data).toHaveLength(1);\n+          expect(res.body.data[0]).toMatchObject({ size: company.size });\n+          done();\n         });\n-        expect(res.body[0]).toHaveProperty('createdAt');\n-        expect(res.body[0]).toHaveProperty('updatedAt');\n-        done();\n-      }));\n+      });\n+    });\n+\n+    describe('with sorting by name', () => {\n+      let companyA: Company;\n+      let companyB: Company;\n+\n+      beforeEach(async () => {\n+        companyA = await companiesFactory.create({ name: 'ACompany' });\n+        companyB = await companiesFactory.create({ name: 'CompanyB' });\n+      });\n+\n+      describe('ascending', () => {\n+        beforeEach(() => {\n+          const query: CompanyQueryDTO = {\n+            sort: 'name',\n+          };\n+          result = request(http)\n+            .get('/companies')\n+            .query(query)\n+            .set('Accept', 'application/json');\n+        });\n+\n+        it('should return 200', (done) => result.expect(200, done));\n+\n+        it('should sort ascending', async (done) => {\n+          result.end((err, res) => {\n+            expect(res.body.total).toBe(2);\n+            expect(res.body.data[0].name).toBe(companyA.name);\n+            done();\n+          });\n+        });\n+      });\n+\n+      describe('descending', () => {\n+        beforeEach(() => {\n+          const query: CompanyQueryDTO = {\n+            sort: '-name',\n+          };\n+          result = request(http)\n+            .get('/companies')\n+            .query(query)\n+            .set('Accept', 'application/json');\n+        });\n+\n+        it('should return 200', (done) => result.expect(200, done));\n+\n+        it('should sort ascending', async (done) => {\n+          result.end((err, res) => {\n+            expect(res.body.total).toBe(2);\n+            expect(res.body.data[0].name).toBe(companyB.name);\n+            done();\n+          });\n+        });\n+      });\n+    });",
        "created_at": "2021-06-10T17:41:51Z",
        "body": "I see that unit testing at the bottom in `test/identity/services/companies.service.spec.ts`. üëç \r\n"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 681096693,
        "path": "src/identity/controllers/companies.controller.ts",
        "in_reply_to_id": 649393231,
        "id": 649408604,
        "diff_hunk": "@@ -5,43 +5,79 @@ import {\n   Param,\n   Patch,\n   Post,\n+  Query,\n   UseGuards,\n   UseInterceptors,\n } from '@nestjs/common';\n+import { ApiExtraModels } from '@nestjs/swagger';\n import { plainToClass } from 'class-transformer';\n \n-import { NotFoundInterceptor } from '@/shared';\n+import { NotFoundInterceptor, ResponseDTO } from '@/shared';\n+import { NumericFilter, StringFilter } from '@/shared/querying';\n+import { ApiPaginatedResponse, PaginatedResponseDTO } from '@/shared/responses';\n \n import { CompaniesService, RegistrationsService } from '../services';\n import {\n   CompanyDTO,\n   CompanyCreateDTO,\n   CompanyUpdateDTO,\n   CompanyRegisterDTO,\n+  CompanyQueryDTO,\n+  CompanyFilters,\n } from '../dto';\n import { LoggedInUser, UserProfile } from '../decorators';\n import { AuthenticationGuard } from '../guards';\n \n @Controller('companies')\n+@ApiExtraModels(PaginatedResponseDTO)\n export class CompaniesController {\n   constructor(\n     private readonly companiesService: CompaniesService,\n     private readonly registrationsService: RegistrationsService,\n   ) {}\n \n   @Get()\n-  public async getAll(): Promise<CompanyDTO[]> {\n-    const companies = await this.companiesService.getAll();\n+  @ApiPaginatedResponse(CompanyDTO)\n+  @ApiExtraModels(CompanyFilters, NumericFilter, StringFilter)\n+  // TODO: Get Swagger docs working for the query params\n+  // @ApiQuery({\n+  //   required: false,\n+  //   name: 'filter',\n+  //   style: 'deepObject',\n+  //   explode: true,\n+  //   type: 'object',\n+  //   schema: {\n+  //     type: 'object',\n+  //     properties: {\n+  //       name: {\n+  //         type: 'object',\n+  //         properties: {}\n+  //       }\n+  //     },\n+  //     // $ref: getSchemaPath(CompanyFilters),\n+  //   },\n+  // })",
        "created_at": "2021-06-10T18:01:05Z",
        "body": "Not really.  That was some WIP code on my part trying to get SwaggerUI to display the fields properly.  I've since found a better solution that we'll implement if this PR is approved."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 681097926,
        "path": "test/e2e/companies.e2e-spec.ts",
        "in_reply_to_id": 649384542,
        "id": 649409569,
        "diff_hunk": "@@ -47,31 +48,177 @@ describe('CompaniesController (e2e)', () => {\n \n   describe('Listing companies', () => {\n     let result: request.Test;\n-    let company: Company;\n+    let companies: Company[];\n \n-    beforeEach(async () => {\n-      company = await companiesFactory.create();\n-      result = request(http)\n-        .get('/companies')\n-        .set('Accept', 'application/json');\n+    describe('with no options', () => {\n+      beforeEach(async () => {\n+        companies = await companiesFactory.createList(40);\n+        result = request(http)\n+          .get('/companies')\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with an array of companies', (done) => {\n+        const company = companies[0];\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(40);\n+          expect(res.body.data).toHaveLength(20);\n+          const data = res.body.data[0];\n+          expect(data).toMatchObject({\n+            id: company.id,\n+            name: company.name,\n+            size: company.size,\n+            ein: company.ein,\n+            businessTypes: company.businessTypes,\n+          });\n+          expect(data).toHaveProperty('createdAt');\n+          expect(data).toHaveProperty('updatedAt');\n+          done();\n+        });\n+      });\n+    });\n+\n+    describe('with pagination', () => {\n+      beforeEach(async () => {\n+        companies = await companiesFactory.createList(40);\n+      });\n+\n+      const query: CompanyQueryDTO = {\n+        limit: 2,\n+        page: 3,\n+      };\n+\n+      beforeEach(() => {\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with an array of companies', (done) => {\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(40);\n+          expect(res.body.data).toHaveLength(query.limit);\n+          done();\n+        });\n+      });\n+    });\n+\n+    describe('with filtering by name', () => {\n+      let company: Company;\n+\n+      beforeEach(async () => {\n+        company = await companiesFactory.create({ name: 'SelectMe' });\n+        await companiesFactory.create({ name: 'SkipMe' });\n+        const query: CompanyQueryDTO = {\n+          filter: {\n+            name: { eq: company.name },\n+          },\n+        };\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with only the matched company', (done) => {\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(1);\n+          expect(res.body.data).toHaveLength(1);\n+          expect(res.body.data[0]).toMatchObject({ name: company.name });\n+          done();\n+        });\n+      });\n     });\n \n-    it('should return 200', (done) => result.expect(200, done));\n-\n-    it('should respond with an array of companies', (done) =>\n-      result.end((err, res) => {\n-        expect(res.body).toHaveLength(1);\n-        expect(res.body[0]).toMatchObject({\n-          id: company.id,\n-          name: company.name,\n-          size: company.size,\n-          ein: company.ein,\n-          businessTypes: company.businessTypes,\n+    describe('with filtering by size', () => {\n+      let company: Company;\n+\n+      beforeEach(async () => {\n+        company = await companiesFactory.create({ size: 1 });\n+        await companiesFactory.create({ size: 2 });\n+        const query: CompanyQueryDTO = {\n+          filter: {\n+            size: { eq: company.size },\n+          },\n+        };\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with only the matched company', (done) => {\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(1);\n+          expect(res.body.data).toHaveLength(1);\n+          expect(res.body.data[0]).toMatchObject({ size: company.size });\n+          done();\n         });\n-        expect(res.body[0]).toHaveProperty('createdAt');\n-        expect(res.body[0]).toHaveProperty('updatedAt');\n-        done();\n-      }));\n+      });\n+    });\n+\n+    describe('with sorting by name', () => {\n+      let companyA: Company;\n+      let companyB: Company;\n+\n+      beforeEach(async () => {\n+        companyA = await companiesFactory.create({ name: 'ACompany' });\n+        companyB = await companiesFactory.create({ name: 'CompanyB' });\n+      });\n+\n+      describe('ascending', () => {\n+        beforeEach(() => {\n+          const query: CompanyQueryDTO = {\n+            sort: 'name',\n+          };\n+          result = request(http)\n+            .get('/companies')\n+            .query(query)\n+            .set('Accept', 'application/json');\n+        });\n+\n+        it('should return 200', (done) => result.expect(200, done));\n+\n+        it('should sort ascending', async (done) => {\n+          result.end((err, res) => {\n+            expect(res.body.total).toBe(2);\n+            expect(res.body.data[0].name).toBe(companyA.name);\n+            done();\n+          });\n+        });\n+      });\n+\n+      describe('descending', () => {\n+        beforeEach(() => {\n+          const query: CompanyQueryDTO = {\n+            sort: '-name',\n+          };\n+          result = request(http)\n+            .get('/companies')\n+            .query(query)\n+            .set('Accept', 'application/json');\n+        });\n+\n+        it('should return 200', (done) => result.expect(200, done));\n+\n+        it('should sort ascending', async (done) => {\n+          result.end((err, res) => {\n+            expect(res.body.total).toBe(2);\n+            expect(res.body.data[0].name).toBe(companyB.name);\n+            done();\n+          });\n+        });\n+      });\n+    });",
        "created_at": "2021-06-10T18:02:35Z",
        "body": "We could possibly setup a stock e2e test, but it will probably wind up shifting our existing test logic to boilerplate in a beforeEach() to setup all the proper expectations.  It was definitely a thought I had, but I don't think in the end it would give us much."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 681098748,
        "path": "src/main.ts",
        "in_reply_to_id": 649376266,
        "id": 649410147,
        "diff_hunk": "@@ -31,6 +28,9 @@ async function bootstrap() {\n   const document = SwaggerModule.createDocument(app, config);\n   SwaggerModule.setup('api', app, document);\n \n+  // ~15 security middlewares: https://github.com/helmetjs/helmet#how-it-works\n+  app.use(helmet());",
        "created_at": "2021-06-10T18:03:30Z",
        "body": "Yeah, I'm pretty sure it was getting in the way of the Swagger docs.  GH issue mentioned making sure they were in this order.  Everything seems to work now."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 681133373,
        "path": "test/e2e/companies.e2e-spec.ts",
        "in_reply_to_id": 649382292,
        "id": 649434510,
        "diff_hunk": "@@ -47,31 +48,177 @@ describe('CompaniesController (e2e)', () => {\n \n   describe('Listing companies', () => {\n     let result: request.Test;\n-    let company: Company;\n+    let companies: Company[];\n \n-    beforeEach(async () => {\n-      company = await companiesFactory.create();\n-      result = request(http)\n-        .get('/companies')\n-        .set('Accept', 'application/json');\n+    describe('with no options', () => {\n+      beforeEach(async () => {\n+        companies = await companiesFactory.createList(40);\n+        result = request(http)\n+          .get('/companies')\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with an array of companies', (done) => {\n+        const company = companies[0];\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(40);\n+          expect(res.body.data).toHaveLength(20);\n+          const data = res.body.data[0];\n+          expect(data).toMatchObject({\n+            id: company.id,\n+            name: company.name,\n+            size: company.size,\n+            ein: company.ein,\n+            businessTypes: company.businessTypes,\n+          });\n+          expect(data).toHaveProperty('createdAt');\n+          expect(data).toHaveProperty('updatedAt');\n+          done();\n+        });\n+      });\n+    });\n+\n+    describe('with pagination', () => {\n+      beforeEach(async () => {\n+        companies = await companiesFactory.createList(40);\n+      });\n+\n+      const query: CompanyQueryDTO = {\n+        limit: 2,\n+        page: 3,\n+      };\n+\n+      beforeEach(() => {\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with an array of companies', (done) => {\n+        result.end((err, res) => {\n+          expect(res.body.total).toBe(40);\n+          expect(res.body.data).toHaveLength(query.limit);\n+          done();\n+        });\n+      });\n+    });\n+\n+    describe('with filtering by name', () => {\n+      let company: Company;\n+\n+      beforeEach(async () => {\n+        company = await companiesFactory.create({ name: 'SelectMe' });\n+        await companiesFactory.create({ name: 'SkipMe' });\n+        const query: CompanyQueryDTO = {\n+          filter: {\n+            name: { eq: company.name },\n+          },\n+        };\n+        result = request(http)\n+          .get('/companies')\n+          .query(query)\n+          .set('Accept', 'application/json');\n+      });\n+\n+      it('should return 200', (done) => result.expect(200, done));\n+\n+      it('should respond with only the matched company', (done) => {",
        "created_at": "2021-06-10T18:41:30Z",
        "body": "> Should this basic signature change of responses affect our error responses?\r\n\r\nI would think so.  I setup the `ResponseDTO` and `PaginatedResponseDTO` so we could hopefully start standardizing on our responses.  I think designing a meaningful error system should be on the horizon."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/76",
      "updated_at": "2021-06-07T17:51:02Z",
      "title": "[NO-TICKET] Changing script so we can truncate dev",
      "state": "closed",
      "number": 76,
      "merged_at": "2021-06-07T17:51:01Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "0466e1b5f090046600d15bf48e8ebcb8f8beb46e",
        "ref": "NO-TICKET/trucating-dev"
      },
      "created_at": "2021-06-07T10:53:09Z",
      "closed_at": "2021-06-07T17:51:01Z",
      "body": "With these changes, we can now use the `bin/clear-db.ts` script to truncate both the `test` and the `development` environments.\r\n\r\nIt is worth noting that I was having problems with the `test:truncate` NPM script (it was complaining about being unable to find dependencies under custom paths like `@/config`). Therefore, I changed it a bit to run with `ts-node -r tsconfig-paths/register` (which loads the paths prior to execution).",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ef6129fa6d6b75ab3113a5a8bdf0e380521ceea3",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 677282845,
        "path": "package.json",
        "id": 646492602,
        "diff_hunk": "@@ -20,11 +20,12 @@\n     \"test:cov\": \"npx jest --coverage\",\n     \"test:e2e\": \"npx jest --config jest.e2e-config.ts\",\n     \"test:migrate\": \"npx dotenv -e .env.test npm run migrate\",\n-    \"test:truncate\": \"npx dotenv -e .env.test bin/clear-test-db.ts\",\n+    \"test:truncate\": \"export DOTENV_CONFIG_PATH=.env.test && npm run truncate\",",
        "created_at": "2021-06-07T11:12:43Z",
        "body": "For consistency, can we switch this back to `npx dotenv -e .env.test`?  It looks....weird."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/75",
      "updated_at": "2021-08-16T14:12:29Z",
      "title": "[Snyk] Upgrade typeorm-transactional-cls-hooked from 0.1.20 to 0.1.21",
      "state": "closed",
      "number": 75,
      "merged_at": "2021-06-08T09:35:43Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e48e359d40904ffa11875ac5d633062835e0883c",
        "ref": "snyk-upgrade-f1a7bd6ecab865a755acc95e582f7730"
      },
      "created_at": "2021-06-05T19:19:44Z",
      "closed_at": "2021-06-08T09:35:43Z",
      "body": "<h3>Snyk has created this PR to upgrade typeorm-transactional-cls-hooked from 0.1.20 to 0.1.21.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=typeorm-transactional-cls-hooked&from_version=0.1.20&to_version=0.1.21&pr_id=f6cecf26-46e8-4823-8a67-b6a269a51f90&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **21 days ago**, on 2021-05-15.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>typeorm-transactional-cls-hooked</b></summary>\n    <ul>\n      <li>\n        <b>0.1.21</b> - <a href=\"https://snyk.io/redirect/github/odavid/typeorm-transactional-cls-hooked/releases/tag/v0.1.21\">2021-05-15</a></br><p>0.1.21</p>\n      </li>\n      <li>\n        <b>0.1.20</b> - <a href=\"https://snyk.io/redirect/github/odavid/typeorm-transactional-cls-hooked/releases/tag/v0.1.20\">2021-01-15</a></br><p>0.1.20</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/odavid/typeorm-transactional-cls-hooked/releases\">typeorm-transactional-cls-hooked GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>typeorm-transactional-cls-hooked</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/odavid/typeorm-transactional-cls-hooked/commit/c6aeaddff2eb6f85be2a62b845bd34f2a68632bb\">c6aeadd</a> 0.1.21</li>\n      <li><a href=\"https://snyk.io/redirect/github/odavid/typeorm-transactional-cls-hooked/commit/f3de675356a07a0bf31d2626784a7db2e72a9db7\">f3de675</a> add runInTransaction and wrapInTransaction (#94)</li>\n      <li><a href=\"https://snyk.io/redirect/github/odavid/typeorm-transactional-cls-hooked/commit/11d4b982cef5bd76a051a89197d54df490dff356\">11d4b98</a> Update README.md (#85)</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/odavid/typeorm-transactional-cls-hooked/compare/882950edd8e389d3e2dc377fc4830a8733608d37...c6aeaddff2eb6f85be2a62b845bd34f2a68632bb\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJmNmNlY2YyNi00NmU4LTQ4MjMtOGE2Ny1iNmEyNjlhNTFmOTAiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImY2Y2VjZjI2LTQ2ZTgtNDgyMy04YTY3LWI2YTI2OWE1MWY5MCJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?pkg&#x3D;typeorm-transactional-cls-hooked&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"f6cecf26-46e8-4823-8a67-b6a269a51f90\",\"prPublicId\":\"f6cecf26-46e8-4823-8a67-b6a269a51f90\",\"dependencies\":[{\"name\":\"typeorm-transactional-cls-hooked\",\"from\":\"0.1.20\",\"to\":\"0.1.21\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"87e2f02e-ddbc-4bb7-b086-002440cb0cf2\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-05-15T09:35:59.106Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ef6129fa6d6b75ab3113a5a8bdf0e380521ceea3",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/74",
      "updated_at": "2021-08-16T14:12:29Z",
      "title": "[Snyk] Upgrade fishery from 1.2.0 to 1.3.0",
      "state": "closed",
      "number": 74,
      "merged_at": "2021-06-08T09:35:03Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c0107636614076fddc47e3c1cf19c7240f29ecc9",
        "ref": "snyk-upgrade-639e14397f46789d59a42cea9152f4f4"
      },
      "created_at": "2021-06-04T20:06:55Z",
      "closed_at": "2021-06-08T09:35:03Z",
      "body": "<h3>Snyk has created this PR to upgrade fishery from 1.2.0 to 1.3.0.</h3>\n\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **21 days ago**, on 2021-05-14.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>fishery</b></summary>\n    <ul>\n      <li>\n        <b>1.3.0</b> - <a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/releases/tag/v1.3.0\">2021-05-14</a></br><p>This fixes an issue where using traits or extending factories caused the sequence to no longer be shared. See <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"802401939\" data-permission-text=\"Title is private\" data-url=\"https://github.com/thoughtbot/fishery/issues/51\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/thoughtbot/fishery/pull/51/hovercard\" href=\"https://snyk.io/redirect/github/thoughtbot/fishery/pull/51\">#51</a>.</p>\n      </li>\n      <li>\n        <b>1.2.0</b> - <a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/releases/tag/v1.2.0\">2021-01-21</a></br><p>1.2.0</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/releases\">fishery GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>fishery</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/commit/1212f48debbc10e694dbcc9dd57e8d33d12ab3c2\">1212f48</a> 1.3.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/commit/c1fe30c381df0c7cc7a158021478d5bd2cf2f8ce\">c1fe30c</a> Share sequence between extended factories (#51)</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/thoughtbot/fishery/compare/dd55e01542e00cf5d3f905c2d89181e36cc509d6...1212f48debbc10e694dbcc9dd57e8d33d12ab3c2\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJiNmRjM2EzMy01YzVjLTQyMTgtODg1Yi04NmI3YjhkYzdmMmQiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImI2ZGMzYTMzLTVjNWMtNDIxOC04ODViLTg2YjdiOGRjN2YyZCJ9fQ==\" width=\"0\" height=\"0\"/><img src=\"https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=fishery&from_version=1.2.0&to_version=1.3.0&pr_id=b6dc3a33-5c5c-4218-885b-86b7b8dc7f2d&visibility=false&has_feature_flag=false\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?pkg&#x3D;fishery&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"b6dc3a33-5c5c-4218-885b-86b7b8dc7f2d\",\"prPublicId\":\"b6dc3a33-5c5c-4218-885b-86b7b8dc7f2d\",\"dependencies\":[{\"name\":\"fishery\",\"from\":\"1.2.0\",\"to\":\"1.3.0\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"87e2f02e-ddbc-4bb7-b086-002440cb0cf2\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-05-14T14:18:47.768Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ef6129fa6d6b75ab3113a5a8bdf0e380521ceea3",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/73",
      "updated_at": "2021-06-11T14:52:27Z",
      "title": "[IMERC-136] Implement RolesGuard to block unauthorized users",
      "state": "closed",
      "number": 73,
      "merged_at": "2021-06-11T14:52:27Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "1aa70fbb966e38d2ba53ea6eafdcbd657ee71269",
        "ref": "IMERC-136-Implement-RolesGuard-to-block-unauthorized-users"
      },
      "created_at": "2021-06-04T03:51:16Z",
      "closed_at": "2021-06-11T14:52:27Z",
      "body": "[[IMERC-136] Implement RolesGuard to block unauthorized users](https://imercatus.backlog.com/view/IMERC-136)\r\n\r\nSome notes:\r\n\r\n- In general we got rid of some highly normalized tables of `admin_roles_permissions`, `permissions`, `features`, `mods`, `business_type_features`.\r\n- `permissions`, `features`, `mods` are respectively enums now with a little bit of relational connections happening in some POTO classes/constants.\r\n- Named the guard _permissions_, despite have a roles table our authorization is still based on that role's permissions.\r\n- Dropped some tables including the lookup table for business type features, made that a constant based on enums, so no seeding is need at all now.\r\n- Made a `src/identity/enums/` directory and then a `src/identity/constants/` because those files were not actually enums, they are needed for this style of data though, open to guidance on this, one is not even a constant, but a class. I never know what to name the directory that contains POTOs...\r\n- I went the route of one SQL transaction per authentication/authorization call by editing `src/identity/guards/authentication.guard.ts` and doing a join on the permissions table  and adding the permissions into the session. It saves us 50% of db calls versus doing an authorization SQL query in the permissions guard. Open to feedback on that.\r\n- As of right now the `+/-` is `+631 ‚àí978`, so I think it is a win for simplicity, I think the cognitive load is reduced with this structure, also debugging a user's permissions is as easy as looking at one table.\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "97868f645bc2ea06d0b9285649ff62f8c1cc226d",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 676474293,
        "path": "src/shared/unhandled-exceptions.filter.ts",
        "id": 645704859,
        "diff_hunk": "@@ -12,6 +12,7 @@ export class UnhandledExceptionsFilter extends BaseExceptionFilter {\n   catch(exception: unknown, host: ArgumentsHost) {\n     // TODO Offload log data about exceptions caught here\n     // to something like Datadog or CloudWatch Logs.\n+    console.log(exception);",
        "created_at": "2021-06-04T16:30:54Z",
        "body": "ZOMGLOGGING?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 676474293,
        "path": "src/identity/services/admin-role-permissions.service.ts",
        "id": 649901339,
        "diff_hunk": "@@ -0,0 +1,25 @@\n+import { Injectable } from '@nestjs/common';\n+\n+import { AdminRole } from '../entities';\n+import { Permission } from '../enums';\n+import { ModFeatures } from '../constants/mod-features';\n+\n+@Injectable()\n+export class AdminRolesPermissionsService {\n+  // eslint-disable-next-line class-methods-use-this",
        "created_at": "2021-06-11T11:24:38Z",
        "body": "I feel like this is another of those rules we should just disable globally.  Especially since NestJS encourages you to turn everything into a class/service for DI."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 676474293,
        "path": "test/identity/guards/permissions.guard.spec.ts",
        "id": 649903198,
        "diff_hunk": "@@ -0,0 +1,94 @@\n+import { Reflector } from '@nestjs/core';\n+import { ExecutionContext, ForbiddenException } from '@nestjs/common';\n+import { PermissionsGuard } from '@/identity';\n+import { adminRolePermissionsFactory } from '@/test/factories';\n+import { User } from '../../../src/identity/entities/user.entity';\n+import { Feature, Mod, Permission } from '../../../src/identity/enums';\n+\n+describe('PermissionsGuard', () => {\n+  const mockContext = (\n+    modulePermissions: (string | Mod)[],\n+    user: Partial<User>,\n+  ) => ({\n+    getHandler: (): (string | Mod)[] => modulePermissions,\n+    switchToHttp: (): any => ({\n+      getRequest: (): any => ({\n+        method: 'GET',\n+        path: 'test-permissions',\n+        user,\n+      }),\n+    }),\n+  });\n+\n+  const mockReflector = (testContext) =>\n+    (({\n+      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n+      get: (key, context): (string | Mod)[] => testContext.getHandler(),\n+    } as unknown) as Reflector);\n+\n+  function call(userPermissions, user) {\n+    const testContext = mockContext(userPermissions, user);\n+\n+    const permissionsGuard = new PermissionsGuard(mockReflector(testContext));\n+\n+    return permissionsGuard.canActivate(\n+      (testContext as unknown) as ExecutionContext,\n+    );\n+  }\n+\n+  describe('canActivate', () => {\n+    let user: Object;\n+    let userPermissions: (string | Mod)[];\n+\n+    beforeEach(() => {\n+      const adminRolePermissions = adminRolePermissionsFactory.buildList(1, {});\n+      user = { permissions: adminRolePermissions };\n+    });\n+\n+    describe('when user has requested permissions', () => {\n+      beforeEach(() => {\n+        userPermissions = [\n+          Mod.COMPANY_MANAGEMENT,\n+          Feature.COMPANY_DETAILS,\n+          Permission.VIEW,\n+        ];\n+      });\n+\n+      it('can activate', () => {\n+        expect(call(userPermissions, user)).toBeTruthy();\n+      });\n+    });\n+\n+    describe('when user does not have requested permissions', () => {\n+      beforeEach(() => {\n+        userPermissions = [\n+          Mod.COMPANY_MANAGEMENT,\n+          Feature.SUBCONTRACT_AGREEMENT, // Feature unrelated to module\n+          Permission.VIEW,\n+        ];\n+      });\n+\n+      it('throws a forbidden exception', () => {\n+        expect(() => {\n+          call(userPermissions, user);\n+        }).toThrow(ForbiddenException);\n+      });\n+    });\n+\n+    describe(\"when feature is not part of module's feature list\", () => {\n+      beforeEach(() => {\n+        userPermissions = [\n+          Mod.COMPANY_MANAGEMENT,\n+          Feature.SUBCONTRACT_AGREEMENT,\n+          Permission.VIEW,\n+        ];\n+      });\n+\n+      it('throws a forbidden exception', () => {\n+        expect(() => {\n+          call(userPermissions, user);\n+        }).toThrow(ForbiddenException);\n+      });\n+    });\n+  });\n+});",
        "created_at": "2021-06-11T11:28:00Z",
        "body": "ü•á "
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/72",
      "updated_at": "2021-06-10T17:08:13Z",
      "title": "[IMERC-135] Endpoint to list users associated with an admin role",
      "state": "closed",
      "number": 72,
      "merged_at": "2021-06-10T17:08:13Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "23064b689a5d4016610e97c25d4c1f6fedf3c2a8",
        "ref": "IMERC-135-endpoint-to-list-users-associated-with-an-admin-role-base-134"
      },
      "created_at": "2021-06-03T03:52:38Z",
      "closed_at": "2021-06-10T17:08:13Z",
      "body": "[IMERC-135](https://imercatus.backlog.com/view/IMERC-135) Provide an endpoint to list users associated with an admin role\r\n\r\n**Acceptance Criteria**\r\n\r\nTest Scenarios:\r\n- Given a specific role when the endpoint is executed then it will return an array of users filtered by that role\r\n- Given an invalid role has been provided when the endpoint is executed then the endpoint will return an empty array.\r\n\r\nNote: This functionality already existed, this PR adds some more specific tests based on the AC.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ef6129fa6d6b75ab3113a5a8bdf0e380521ceea3",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/71",
      "updated_at": "2021-06-29T16:56:17Z",
      "title": "[IMERC-135] Endpoint to list users associated with an admin role",
      "state": "closed",
      "number": 71,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "25b17b59fc626347d6d655725f75211ee29ab7de",
        "ref": "IMERC-135-endpoint-to-list-users-associated-with-an-admin-role"
      },
      "created_at": "2021-06-03T02:13:24Z",
      "closed_at": "2021-06-03T03:43:24Z",
      "body": "\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "a0b6bc8a6f2dd4dabee4d919ae36680e8bbafa9b",
        "ref": "IMERC-134-admin-role-users-endpoint"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/70",
      "updated_at": "2021-06-03T17:17:49Z",
      "title": "[IMERC-134] Admin role users endpoint",
      "state": "closed",
      "number": 70,
      "merged_at": "2021-06-03T17:17:48Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "786c06412908a7693e4e604bcf1042cc1a7b9919",
        "ref": "IMERC-134-admin-role-users-endpoint"
      },
      "created_at": "2021-06-01T22:59:13Z",
      "closed_at": "2021-06-03T17:17:48Z",
      "body": "[IMERC-134](https://imercatus.backlog.com/view/IMERC-134) Provide an endpoint to post an array of users associated with an admin role\r\n\r\n**Acceptance Criteria**\r\n\r\n- Given an admin role and an array of users when the endpoint is executed then it will link the array of users to the admin role, replacing whatever was there previously.\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c2774ce2e6f85f718f64042c1c18b4d1a069c388",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 674825132,
        "path": "src/identity/services/admin-roles.service.ts",
        "id": 644441348,
        "diff_hunk": "@@ -35,6 +38,14 @@ export class AdminRolesService {\n     return this.adminRoleRepository.save(newAdminRole);\n   }\n \n+  async assignToUsers(company: Company, id: number, userIds: number[]) {\n+    const adminRole = await this.findOne(company, id);\n+\n+    await this.usersService.assignAdminRoles(company, adminRole, userIds);",
        "created_at": "2021-06-03T02:34:20Z",
        "body": "Let's say we have four users on a company: A, B, C, and D. At some point in time, A and B have the admin role with id `123`. If I, as the super admin, issue a PATCH request to the endpoint saying that, for that company and for the admin role `123`, I want to assign users C and D, does that mean that all the users would have that admin role?\r\n\r\nI have the impression that, after that PATCH request, we would like to have only users C and D with this admin role and now users A and B would be removed.\r\n\r\nIf you think otherwise, my only question is, how do we unassign users?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 674879841,
        "path": "src/identity/services/admin-roles.service.ts",
        "in_reply_to_id": 644441348,
        "id": 644488356,
        "diff_hunk": "@@ -35,6 +38,14 @@ export class AdminRolesService {\n     return this.adminRoleRepository.save(newAdminRole);\n   }\n \n+  async assignToUsers(company: Company, id: number, userIds: number[]) {\n+    const adminRole = await this.findOne(company, id);\n+\n+    await this.usersService.assignAdminRoles(company, adminRole, userIds);",
        "created_at": "2021-06-03T05:10:59Z",
        "body": "Yep, let me consider this and what the updated acceptance criteria would be, I will convert it to a draft for now."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 675391622,
        "path": "src/identity/services/admin-roles.service.ts",
        "in_reply_to_id": 644441348,
        "id": 644875807,
        "diff_hunk": "@@ -35,6 +38,14 @@ export class AdminRolesService {\n     return this.adminRoleRepository.save(newAdminRole);\n   }\n \n+  async assignToUsers(company: Company, id: number, userIds: number[]) {\n+    const adminRole = await this.findOne(company, id);\n+\n+    await this.usersService.assignAdminRoles(company, adminRole, userIds);",
        "created_at": "2021-06-03T15:07:14Z",
        "body": "> I have the impression that, after that PATCH request, we would like to have only users C and D with this admin role and now users A and B would be removed.\r\n\r\nAgreed.\r\n"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 675484086,
        "path": "src/identity/services/admin-roles.service.ts",
        "in_reply_to_id": 644441348,
        "id": 644944741,
        "diff_hunk": "@@ -35,6 +38,14 @@ export class AdminRolesService {\n     return this.adminRoleRepository.save(newAdminRole);\n   }\n \n+  async assignToUsers(company: Company, id: number, userIds: number[]) {\n+    const adminRole = await this.findOne(company, id);\n+\n+    await this.usersService.assignAdminRoles(company, adminRole, userIds);",
        "created_at": "2021-06-03T16:23:18Z",
        "body": "I updated the AC to be:\r\n\r\nGiven an admin role and an array of users when the endpoint is executed then it will link the array of users to the admin role, _replacing whatever was there previously._\r\n\r\nI changed it to PUT, so multiple identical requests will have the same outcome and be idempotent, I think that is a better design as the change is not partial.\r\n\r\nI also test for the use case you put above:\r\nae1889bf8092eee766fa72ebc459623515eb1514\r\n\r\nUn-assigning and assigning are both possible with the PUT because it replaces the original version of the resource. "
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/69",
      "updated_at": "2021-06-07T19:34:14Z",
      "title": "[Snyk] Upgrade nanoid from 3.1.22 to 3.1.23",
      "state": "closed",
      "number": 69,
      "merged_at": "2021-06-07T19:34:14Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "b39aecd96d7e3cb0845ec82209e04c21cf55fdc1",
        "ref": "snyk-upgrade-c19b32bbed19ad5d139e843f06de8358"
      },
      "created_at": "2021-06-01T00:36:37Z",
      "closed_at": "2021-06-07T19:34:14Z",
      "body": "<h3>Snyk has created this PR to upgrade nanoid from 3.1.22 to 3.1.23.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=nanoid&from_version=3.1.22&to_version=3.1.23&pr_id=dba637fb-162f-45b9-936d-51471c23db4b&visibility=true&has_feature_flag=false)\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **21 days ago**, on 2021-05-10.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>nanoid</b></summary>\n    <ul>\n      <li>\n        <b>3.1.23</b> - <a href=\"https://snyk.io/redirect/github/ai/nanoid/releases/tag/3.1.23\">2021-05-10</a></br><p>3.1.23</p>\n      </li>\n      <li>\n        <b>3.1.22</b> - <a href=\"https://snyk.io/redirect/github/ai/nanoid/releases/tag/3.1.22\">2021-03-15</a></br><p>3.1.22</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/ai/nanoid/releases\">nanoid GitHub release notes</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJkYmE2MzdmYi0xNjJmLTQ1YjktOTM2ZC01MTQ3MWMyM2RiNGIiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImRiYTYzN2ZiLTE2MmYtNDViOS05MzZkLTUxNDcxYzIzZGI0YiJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?pkg&#x3D;nanoid&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"dba637fb-162f-45b9-936d-51471c23db4b\",\"prPublicId\":\"dba637fb-162f-45b9-936d-51471c23db4b\",\"dependencies\":[{\"name\":\"nanoid\",\"from\":\"3.1.22\",\"to\":\"3.1.23\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"87e2f02e-ddbc-4bb7-b086-002440cb0cf2\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-05-10T19:08:26.398Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "bde3aac9827faa4efae9528bb6008969773265a1",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/68",
      "updated_at": "2021-10-21T13:20:58Z",
      "title": "[IMERC-214] Spike: support a user belonging to more than one company",
      "state": "closed",
      "number": 68,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5d1e5ade9d3766ef6d54b100865668fca43d9a78",
        "ref": "IMERC-214-support-a-user-belonging-to-more-than-one-company"
      },
      "created_at": "2021-05-31T17:21:18Z",
      "closed_at": "2021-06-01T23:33:27Z",
      "body": "[[Spike] Add support for a user belonging to more than one company](https://imercatus.backlog.com/view/IMERC-214)",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "bde3aac9827faa4efae9528bb6008969773265a1",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/67",
      "updated_at": "2021-05-30T09:19:30Z",
      "title": "[IMERC-160] Add index.ts files to all container directories",
      "state": "closed",
      "number": 67,
      "merged_at": "2021-05-30T09:19:29Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "a5f40743585cd469656f378c540d0f54fe4dd9d5",
        "ref": "feature/IMERC-160-index-ts"
      },
      "created_at": "2021-05-28T19:19:11Z",
      "closed_at": "2021-05-30T09:19:29Z",
      "body": "https://imercatus.backlog.com/view/IMERC-160\r\n\r\n- [x] Add `index.ts` files to most major directories.\r\n- [x] Clean up and combine imports where applicable.\r\n\r\nAs a general rule, you should import files in the current directory directly (ie. `import { User } from './user.entity';`), as opposed to via the index file (ex: `import { User } from '@/identity/entities';`) to avoid circular dependencies.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "b69e09a57cf50b6e51ffa39a715a4ba5c57a4e1b",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 671620642,
        "path": "src/app.module.ts",
        "id": 641798551,
        "diff_hunk": "@@ -3,13 +3,14 @@ import { ConfigModule, ConfigService } from '@nestjs/config';\n import { TypeOrmModule } from '@nestjs/typeorm';\n import { SnakeNamingStrategy } from 'typeorm-naming-strategies';\n \n-import configuration from '@/config/configuration';\n-import validation from '@/config/validation';\n-import { IdentityModule } from '@/identity/identity.module';\n-import { MailModule } from '@/mail/mail.module';\n-import { CacheProvider } from '@/shared/cache.provider';\n-import { SharedModule } from '@/shared/shared.module';\n-import { UnhandledExceptionsFilterProvider } from '@/shared/unhandled-exceptions.filter';\n+import { configuration, validation } from '@/config';",
        "created_at": "2021-05-28T20:23:58Z",
        "body": "üèÖ "
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/66",
      "updated_at": "2021-05-28T19:10:04Z",
      "title": "[IMERC-159] Add aliases for top-level src directories",
      "state": "closed",
      "number": 66,
      "merged_at": "2021-05-28T18:35:31Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5bd47c88f0f1489e09c0d909874f83dba21ffc90",
        "ref": "feature/IMERC-159-typescript-aliases"
      },
      "created_at": "2021-05-28T16:32:43Z",
      "closed_at": "2021-05-28T18:35:31Z",
      "body": "https://imercatus.backlog.com/view/IMERC-159\r\n\r\n- [x] Add aliases to `tsconfig.json` for major top-level directories\r\n- [x] Configure jest to use the same aliases\r\n- [x] Modify imports to use aliases\r\n\r\nHad to pull the jest configuration out of `package.json` into a separate file to it can be reused by the e2e tests.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "fa5e7e51ea189f123f3abf5b1510a79e0c226265",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 671503435,
        "path": "jest.config.ts",
        "id": 641700242,
        "diff_hunk": "@@ -0,0 +1,39 @@\n+import type { Config } from '@jest/types';\n+import * as path from 'path';\n+\n+import * as tsconfig from './tsconfig.json';\n+\n+const { paths } = tsconfig.compilerOptions;\n+\n+export const moduleMapperFactory = (\n+  rootPath: string,\n+): Record<string, string[]> =>\n+  Object.keys(paths).reduce((acc: Record<string, string[]>, curr: string) => {\n+    const values = paths[curr].map((p: string): string =>\n+      path.join(rootPath, p.replace(/\\*/, '$1')),\n+    );\n+    return {\n+      ...acc,\n+      [`^${curr.replace(/\\*/, '(.*)')}`]: values,\n+    };\n+  }, {});\n+\n+const moduleNameMapper = moduleMapperFactory(__dirname);\n+\n+const config: Config.InitialOptions = {\n+  moduleFileExtensions: ['js', 'json', 'ts'],\n+  rootDir: path.join(__dirname, 'test'),\n+  testRegex: '.*\\\\.spec\\\\.ts$',\n+  transform: {\n+    '^.+\\\\.(t|j)s$': 'ts-jest',\n+  },\n+  collectCoverageFrom: ['**/*.(t|j)s'],\n+  coverageDirectory: '../coverage',",
        "created_at": "2021-05-28T17:16:12Z",
        "body": "Is this used?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 671515918,
        "path": "jest.config.ts",
        "in_reply_to_id": 641700242,
        "id": 641709454,
        "diff_hunk": "@@ -0,0 +1,39 @@\n+import type { Config } from '@jest/types';\n+import * as path from 'path';\n+\n+import * as tsconfig from './tsconfig.json';\n+\n+const { paths } = tsconfig.compilerOptions;\n+\n+export const moduleMapperFactory = (\n+  rootPath: string,\n+): Record<string, string[]> =>\n+  Object.keys(paths).reduce((acc: Record<string, string[]>, curr: string) => {\n+    const values = paths[curr].map((p: string): string =>\n+      path.join(rootPath, p.replace(/\\*/, '$1')),\n+    );\n+    return {\n+      ...acc,\n+      [`^${curr.replace(/\\*/, '(.*)')}`]: values,\n+    };\n+  }, {});\n+\n+const moduleNameMapper = moduleMapperFactory(__dirname);\n+\n+const config: Config.InitialOptions = {\n+  moduleFileExtensions: ['js', 'json', 'ts'],\n+  rootDir: path.join(__dirname, 'test'),\n+  testRegex: '.*\\\\.spec\\\\.ts$',\n+  transform: {\n+    '^.+\\\\.(t|j)s$': 'ts-jest',\n+  },\n+  collectCoverageFrom: ['**/*.(t|j)s'],\n+  coverageDirectory: '../coverage',",
        "created_at": "2021-05-28T17:34:04Z",
        "body": "I would assume it's used here: \r\n\r\nhttps://github.com/iMercatus/imercata-backend/blob/fa5e7e51ea189f123f3abf5b1510a79e0c226265/package.json#L20"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 671548834,
        "path": "src/app.controller.ts",
        "id": 641734735,
        "diff_hunk": "@@ -1,7 +1,8 @@\n import { Controller, Get, UseGuards, UseInterceptors } from '@nestjs/common';\n-import { AuthenticationGuard } from './identity/guards';\n-import { NotFoundInterceptor } from './shared/interceptors';\n-import { LoggedInUser, UserProfile } from './identity/decorators';\n+\n+import { AuthenticationGuard } from '@/identity/guards';\n+import { LoggedInUser, UserProfile } from '@/identity/decorators';",
        "created_at": "2021-05-28T18:24:09Z",
        "body": "is it too much to surface \"everything\" in `@/identity`? Like:\r\n\r\n```ts\r\nimport { AuthenticationGuard, LoggedInUser, UserProfile } from '@/identity';\r\n```\r\n\r\nJust an idea, feel free to ignore if you prefer the way it is."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 671548834,
        "path": "test/identity/services/registrations.service.spec.ts",
        "id": 641735944,
        "diff_hunk": "@@ -74,17 +75,17 @@ describe('RegistrationsService', () => {\n           email: user.email,\n         });\n         expect(record).toMatchObject({\n-// =======\n-//     beforeEach(async () => {\n-//       company = companiesFactory.build();\n-//       user = usersFactory.build();\n-//       registration = {\n-//         name: company.name,\n-//         size: company.size,\n-//         ein: company.ein,\n-//         businessTypes: company.businessTypes,\n-//         user: {\n-// >>>>>>> Restructure application codebase.:test/registrations.service.spec.ts\n+          // =======\n+          //     beforeEach(async () => {\n+          //       company = companiesFactory.build();\n+          //       user = usersFactory.build();\n+          //       registration = {\n+          //         name: company.name,\n+          //         size: company.size,\n+          //         ein: company.ein,\n+          //         businessTypes: company.businessTypes,\n+          //         user: {\n+          // >>>>>>> Restructure application codebase.:test/registrations.service.spec.ts",
        "created_at": "2021-05-28T18:26:48Z",
        "body": "what is this? I mean, do we want to remove?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 671551968,
        "path": "src/app.controller.ts",
        "in_reply_to_id": 641734735,
        "id": 641737046,
        "diff_hunk": "@@ -1,7 +1,8 @@\n import { Controller, Get, UseGuards, UseInterceptors } from '@nestjs/common';\n-import { AuthenticationGuard } from './identity/guards';\n-import { NotFoundInterceptor } from './shared/interceptors';\n-import { LoggedInUser, UserProfile } from './identity/decorators';\n+\n+import { AuthenticationGuard } from '@/identity/guards';\n+import { LoggedInUser, UserProfile } from '@/identity/decorators';",
        "created_at": "2021-05-28T18:29:03Z",
        "body": "That's happening in https://imercatus.backlog.com/view/IMERC-160 (working on it now)."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 671552142,
        "path": "test/identity/services/registrations.service.spec.ts",
        "in_reply_to_id": 641735944,
        "id": 641737194,
        "diff_hunk": "@@ -74,17 +75,17 @@ describe('RegistrationsService', () => {\n           email: user.email,\n         });\n         expect(record).toMatchObject({\n-// =======\n-//     beforeEach(async () => {\n-//       company = companiesFactory.build();\n-//       user = usersFactory.build();\n-//       registration = {\n-//         name: company.name,\n-//         size: company.size,\n-//         ein: company.ein,\n-//         businessTypes: company.businessTypes,\n-//         user: {\n-// >>>>>>> Restructure application codebase.:test/registrations.service.spec.ts\n+          // =======\n+          //     beforeEach(async () => {\n+          //       company = companiesFactory.build();\n+          //       user = usersFactory.build();\n+          //       registration = {\n+          //         name: company.name,\n+          //         size: company.size,\n+          //         ein: company.ein,\n+          //         businessTypes: company.businessTypes,\n+          //         user: {\n+          // >>>>>>> Restructure application codebase.:test/registrations.service.spec.ts",
        "created_at": "2021-05-28T18:29:19Z",
        "body": "Oops.  Yeah. we do."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/65",
      "updated_at": "2021-07-02T18:12:43Z",
      "title": "[Snyk] Upgrade dotenv from 8.2.0 to 8.6.0",
      "state": "closed",
      "number": 65,
      "merged_at": "2021-05-27T19:33:25Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "2d7bbe6b63002870b020f06b8664310fbb9a0e6b",
        "ref": "snyk-upgrade-6c7b3b013ddac75f6e71ce663d7c3a0b"
      },
      "created_at": "2021-05-27T02:38:10Z",
      "closed_at": "2021-05-27T19:33:25Z",
      "body": "<h3>Snyk has created this PR to upgrade dotenv from 8.2.0 to 8.6.0.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=dotenv&from_version=8.2.0&to_version=8.6.0&pr_id=1bc323b5-5b2a-459b-97e1-142f25c78b6f&visibility=true&has_feature_flag=false)\nAs this is a private repository, Snyk-bot does not have access. Therefore, this PR has been created automatically, but appears to have been created by a real user.</br>\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **5 versions** ahead of your current version.\n- The recommended version was released **21 days ago**, on 2021-05-05.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>dotenv</b></summary>\n    <ul>\n      <li>\n        <b>8.6.0</b> - <a href=\"https://snyk.io/redirect/github/motdotla/dotenv/releases/tag/v8.6.0\">2021-05-05</a></br><p>Show as 'added' in changelog</p>\n      </li>\n      <li>\n        <b>8.5.1</b> - <a href=\"https://snyk.io/redirect/github/motdotla/dotenv/releases/tag/v8.5.1\">2021-05-05</a></br><p>Bump version 8.5.1</p>\n      </li>\n      <li>\n        <b>8.5.0</b> - <a href=\"https://snyk.io/redirect/github/motdotla/dotenv/releases/tag/v8.5.0\">2021-05-05</a></br><p>Bump version 8.5.0</p>\n      </li>\n      <li>\n        <b>8.4.0</b> - <a href=\"https://snyk.io/redirect/github/motdotla/dotenv/releases/tag/v8.4.0\">2021-05-05</a></br><p>Point to types file for VS Code. Bump 8.4.0</p>\n      </li>\n      <li>\n        <b>8.3.0</b> - <a href=\"https://snyk.io/redirect/github/motdotla/dotenv/releases/tag/v8.3.0\">2021-05-05</a></br><p>Drop node 8 support</p>\n      </li>\n      <li>\n        <b>8.2.0</b> - <a href=\"https://snyk.io/redirect/github/motdotla/dotenv/releases/tag/v8.2.0\">2019-10-16</a></br><p>chore(release): 8.2.0</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/motdotla/dotenv/releases\">dotenv GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>dotenv</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/f7f7df4ff2de97f39d22de8170e33666bdb69338\">f7f7df4</a> Show as &#x27;added&#x27; in changelog</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/aa52d543a7791de1ec15846c0600199dfa78f77c\">aa52d54</a> Bump version 8.6.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/2c1534e55705a85694ad6cc20c5cfba05bab84e4\">2c1534e</a> Merge pull request #525 from MrSnoozles/patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/264c3d60021ca431487fa9e8c98fed89f0430010\">264c3d6</a> Add package.json to exports</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/0275932c66a7a02e453d4de0811fc4f8e47a3c8d\">0275932</a> Shorten link to join text</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/ff555922c7381368bbbac0388f94ef0d24b10388\">ff55592</a> Add announcement</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/a74c220a5bbf4e4355f090204f772b9769a21b13\">a74c220</a> Bump version 8.5.1</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/09de4868c4ee055fd167730a703161617aa2f9e2\">09de486</a> Merge pull request #522 from motdotla/npm-audit</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/29ddd261ee7697b972ec6a292eb133321b62b19f\">29ddd26</a> Run npm audit</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/9d9038f4aa3665f599a79ef0e6c53a9db2844b83\">9d9038f</a> Bump version 8.5.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/31a90b7c4da010cb4e8d4f4966af413cd8c41008\">31a90b7</a> Merge pull request #503 from franciscop/patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/0db3a93fa7797e66f8ae9b8af2b81fab8306121b\">0db3a93</a> Merge branch &#x27;master&#x27; into patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/5ff8f48a2abf9cea6aef66d483c0c3e678b96239\">5ff8f48</a> Merge pull request #513 from ImRodry/patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/26ba7153b4ca44c78be34f81c7243b05c19dd9aa\">26ba715</a> Merge pull request #519 from motdotla/fix-types</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/164db584c54348d5757b6da7e980f33753779241\">164db58</a> Point to types file for VS Code. Bump 8.4.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/36e96ccc021e38b40559a99f7da1a3e9f76b2bd3\">36e96cc</a> Update CHANGELOG</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/db30e1eea7bc054fdb0f7750684a2f016a9d21a9\">db30e1e</a> Merge pull request #516 from motdotla/drop-node-8-support</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/11a441ac548704ccfb990b5da4e25fad50ffe7bb\">11a441a</a> Fix CHANGELOG detail</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/79b43fdccf5f7ac556854f867a3f553e39056afd\">79b43fd</a> Merge branch &#x27;master&#x27; into patch-1</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/6e42056da0edcba28e6032f5e2969760fcf24416\">6e42056</a> Bump version 8.3.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/d356789575374624139cc34780f723c83c5ae3bb\">d356789</a> Update CHANGELOG and clarify older changes</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/899c3fa13e24deae418ac32e3c2609ee2258bfcc\">899c3fa</a> Drop node 8 support</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/4bcfa7f8705b1e34d35e53a6e19456a26be7cdad\">4bcfa7f</a> Merge pull request #515 from motdotla/passing-tests</li>\n      <li><a href=\"https://snyk.io/redirect/github/motdotla/dotenv/commit/fd2d6fa9b90a4e1d6fcb9fe7b1fd6af48fed9ffa\">fd2d6fa</a> Simplify path for readability</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/motdotla/dotenv/compare/70425a9c88e5fe5c3bd128fa973701279a76a9e3...f7f7df4ff2de97f39d22de8170e33666bdb69338\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIxYmMzMjNiNS01YjJhLTQ1OWItOTdlMS0xNDJmMjVjNzhiNmYiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjFiYzMyM2I1LTViMmEtNDU5Yi05N2UxLTE0MmYyNWM3OGI2ZiJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?pkg&#x3D;dotenv&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"1bc323b5-5b2a-459b-97e1-142f25c78b6f\",\"prPublicId\":\"1bc323b5-5b2a-459b-97e1-142f25c78b6f\",\"dependencies\":[{\"name\":\"dotenv\",\"from\":\"8.2.0\",\"to\":\"8.6.0\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"87e2f02e-ddbc-4bb7-b086-002440cb0cf2\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":5,\"publishedDate\":\"2021-05-05T15:42:36.577Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "1025299c3383f3e7da8bccbda95315c8929fa282",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/64",
      "updated_at": "2021-06-03T16:46:06Z",
      "title": "[IMERC-128] Seeding features and permissions",
      "state": "closed",
      "number": 64,
      "merged_at": "2021-06-03T16:46:06Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "fcb7eaf36208ecf95713dda52ea1421ee2d90605",
        "ref": "IMERC-128-seeding-features-permissions"
      },
      "created_at": "2021-05-26T16:28:17Z",
      "closed_at": "2021-06-03T16:46:06Z",
      "body": "[Pre-populate AdminRole with SuperAdmin](https://imercatus.backlog.com/view/IMERC-128)\r\n\r\n**Acceptance Criteria**\r\n\r\n- Seed module and permission data based on company type\r\n- Assign the account owner superadmin upon registration\r\n\r\n**Related assets**\r\nERD: https://miro.com/app/board/o9J_lOr57Sw=/?moveToWidget=3074457358103057341&cot=14\r\nPermission seeds: https://miro.com/app/board/o9J_koQtKUg=/?moveToWidget=3074457356426777178&cot=14",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "bde3aac9827faa4efae9528bb6008969773265a1",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 673130040,
        "path": "src/identity/services/business-type-features.service.ts",
        "id": 643144929,
        "diff_hunk": "@@ -0,0 +1,19 @@\n+import { Injectable } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+import { Connection, Repository } from 'typeorm';\n+import { BusinessTypeFeature } from '../entities';\n+\n+@Injectable()\n+export class BusinessTypeFeaturesService {\n+  constructor(\n+    @InjectRepository(BusinessTypeFeature)\n+    private businessTypeFeatureRepo: Repository<BusinessTypeFeature>,\n+    private connection: Connection,",
        "created_at": "2021-06-01T14:16:10Z",
        "body": "eslint doesn't complain about being used?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 673130040,
        "path": "src/identity/services/features.service.ts",
        "id": 643156172,
        "diff_hunk": "@@ -13,8 +13,7 @@ export class FeaturesService {\n   ) {}\n \n   async getAll(company: Company): Promise<Feature[]> {\n-    return this.connection\n-      .getRepository(Feature)\n+    return this.featureRepository",
        "created_at": "2021-06-01T14:28:48Z",
        "body": "looks like connection can also be removed here"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 673130040,
        "path": "src/identity/services/registrations.service.ts",
        "id": 643160046,
        "diff_hunk": "@@ -36,6 +36,8 @@ export class RegistrationsService {\n     await queryRunner.connect();\n     await queryRunner.startTransaction();",
        "created_at": "2021-06-01T14:33:08Z",
        "body": "is this really working? I don't see a commit transaction... Reference: https://github.com/typeorm/typeorm/blob/master/docs/transactions.md#using-queryrunner-to-create-and-control-state-of-single-database-connection //cc @t3hpr1m3 "
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 673130040,
        "path": "src/identity/services/registrations.service.ts",
        "id": 643161381,
        "diff_hunk": "@@ -45,12 +47,20 @@ export class RegistrationsService {\n         businessTypes: registration.businessTypes,\n       });\n \n+      permissions = await queryRunner.manager.find(Permission);\n+      adminRole = await queryRunner.manager.save(AdminRole, {\n+        name: 'SuperAdmin',\n+        company,\n+        permissions,\n+      });",
        "created_at": "2021-06-01T14:34:34Z",
        "body": "this looks duplicated... `CompanyService.create` does the same. Do we use and want to keep both?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 673130040,
        "path": "src/identity/services/seed-permissions.service.ts",
        "id": 643169583,
        "diff_hunk": "@@ -0,0 +1,54 @@\n+import { InjectRepository } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+\n+import { AccessLevels, Permission } from '../entities';\n+import {\n+  ModsService,\n+  FeaturesService,\n+  PermissionsService,\n+  BusinessTypeFeaturesService,\n+} from '.';\n+import { PermissionsSeeds } from '../seeds/permissions.seeds';\n+\n+export class SeedPermissionsService {\n+  constructor(\n+    private readonly modsService: ModsService,\n+    private readonly featuresService: FeaturesService,\n+    private readonly permissionsService: PermissionsService,\n+    private readonly businessTypeFeaturesService: BusinessTypeFeaturesService,\n+    @InjectRepository(Permission)\n+    private permissionRepo: Repository<Permission>,\n+  ) {}\n+\n+  /* eslint-disable no-restricted-syntax */\n+  async seed(): Promise<Permission[]> {\n+    for (const module of PermissionsSeeds) {",
        "created_at": "2021-06-01T14:43:19Z",
        "body": "I was looking into that file (`permissions.seeds.ts`) and thinking \"why not call it ModulesSeed? This line reinforces my feeling that PermissionsSeed might be a bit misleading because you are using Permission as an entity that connects a role with an access level and a feature, while here there is no access level nor role involved."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 673184334,
        "path": "src/identity/services/registrations.service.ts",
        "in_reply_to_id": 643161381,
        "id": 643184644,
        "diff_hunk": "@@ -45,12 +47,20 @@ export class RegistrationsService {\n         businessTypes: registration.businessTypes,\n       });\n \n+      permissions = await queryRunner.manager.find(Permission);\n+      adminRole = await queryRunner.manager.save(AdminRole, {\n+        name: 'SuperAdmin',\n+        company,\n+        permissions,\n+      });",
        "created_at": "2021-06-01T14:56:42Z",
        "body": "I noticed that too, however, we have 2 endpoints as well, `POST /companies` and `POST /companies/register`. The first one uses `POST /companies`, is it being used by the frontend? If not should we chop it? "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 673185017,
        "path": "src/identity/services/seed-permissions.service.ts",
        "in_reply_to_id": 643169583,
        "id": 643185344,
        "diff_hunk": "@@ -0,0 +1,54 @@\n+import { InjectRepository } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+\n+import { AccessLevels, Permission } from '../entities';\n+import {\n+  ModsService,\n+  FeaturesService,\n+  PermissionsService,\n+  BusinessTypeFeaturesService,\n+} from '.';\n+import { PermissionsSeeds } from '../seeds/permissions.seeds';\n+\n+export class SeedPermissionsService {\n+  constructor(\n+    private readonly modsService: ModsService,\n+    private readonly featuresService: FeaturesService,\n+    private readonly permissionsService: PermissionsService,\n+    private readonly businessTypeFeaturesService: BusinessTypeFeaturesService,\n+    @InjectRepository(Permission)\n+    private permissionRepo: Repository<Permission>,\n+  ) {}\n+\n+  /* eslint-disable no-restricted-syntax */\n+  async seed(): Promise<Permission[]> {\n+    for (const module of PermissionsSeeds) {",
        "created_at": "2021-06-01T14:57:14Z",
        "body": "I was waffling between something like that earlier on. Happy to change to `ModulesSeed`."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 673186515,
        "path": "src/identity/services/business-type-features.service.ts",
        "in_reply_to_id": 643144929,
        "id": 643186578,
        "diff_hunk": "@@ -0,0 +1,19 @@\n+import { Injectable } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+import { Connection, Repository } from 'typeorm';\n+import { BusinessTypeFeature } from '../entities';\n+\n+@Injectable()\n+export class BusinessTypeFeaturesService {\n+  constructor(\n+    @InjectRepository(BusinessTypeFeature)\n+    private businessTypeFeatureRepo: Repository<BusinessTypeFeature>,\n+    private connection: Connection,",
        "created_at": "2021-06-01T14:58:22Z",
        "body": "‚úÇÔ∏è "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 673188301,
        "path": "src/identity/services/features.service.ts",
        "in_reply_to_id": 643156172,
        "id": 643187744,
        "diff_hunk": "@@ -13,8 +13,7 @@ export class FeaturesService {\n   ) {}\n \n   async getAll(company: Company): Promise<Feature[]> {\n-    return this.connection\n-      .getRepository(Feature)\n+    return this.featureRepository",
        "created_at": "2021-06-01T14:59:46Z",
        "body": "I ‚úÇÔ∏è   it."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 673214666,
        "path": "src/identity/services/seed-permissions.service.ts",
        "in_reply_to_id": 643169583,
        "id": 643207520,
        "diff_hunk": "@@ -0,0 +1,54 @@\n+import { InjectRepository } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+\n+import { AccessLevels, Permission } from '../entities';\n+import {\n+  ModsService,\n+  FeaturesService,\n+  PermissionsService,\n+  BusinessTypeFeaturesService,\n+} from '.';\n+import { PermissionsSeeds } from '../seeds/permissions.seeds';\n+\n+export class SeedPermissionsService {\n+  constructor(\n+    private readonly modsService: ModsService,\n+    private readonly featuresService: FeaturesService,\n+    private readonly permissionsService: PermissionsService,\n+    private readonly businessTypeFeaturesService: BusinessTypeFeaturesService,\n+    @InjectRepository(Permission)\n+    private permissionRepo: Repository<Permission>,\n+  ) {}\n+\n+  /* eslint-disable no-restricted-syntax */\n+  async seed(): Promise<Permission[]> {\n+    for (const module of PermissionsSeeds) {",
        "created_at": "2021-06-01T15:22:02Z",
        "body": "Done. aaefb9ab9e2d2e9afbabf94601de37f52f221d27"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 673658840,
        "path": "src/identity/services/registrations.service.ts",
        "in_reply_to_id": 643161381,
        "id": 643542092,
        "diff_hunk": "@@ -45,12 +47,20 @@ export class RegistrationsService {\n         businessTypes: registration.businessTypes,\n       });\n \n+      permissions = await queryRunner.manager.find(Permission);\n+      adminRole = await queryRunner.manager.save(AdminRole, {\n+        name: 'SuperAdmin',\n+        company,\n+        permissions,\n+      });",
        "created_at": "2021-06-01T23:03:45Z",
        "body": "Offline convo in Slack with Bruno we decided to leave for now."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 673660136,
        "path": "src/identity/services/registrations.service.ts",
        "in_reply_to_id": 643160046,
        "id": 643543344,
        "diff_hunk": "@@ -36,6 +36,8 @@ export class RegistrationsService {\n     await queryRunner.connect();\n     await queryRunner.startTransaction();",
        "created_at": "2021-06-01T23:06:58Z",
        "body": "It is tested, so it does work.\r\n"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 673668934,
        "path": "src/identity/services/registrations.service.ts",
        "in_reply_to_id": 643160046,
        "id": 643551116,
        "diff_hunk": "@@ -36,6 +36,8 @@ export class RegistrationsService {\n     await queryRunner.connect();\n     await queryRunner.startTransaction();",
        "created_at": "2021-06-01T23:29:21Z",
        "body": "Added the `queryRunner.commitTransaction`."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 674396603,
        "path": "src/identity/services/registrations.service.ts",
        "in_reply_to_id": 643161381,
        "id": 644107232,
        "diff_hunk": "@@ -45,12 +47,20 @@ export class RegistrationsService {\n         businessTypes: registration.businessTypes,\n       });\n \n+      permissions = await queryRunner.manager.find(Permission);\n+      adminRole = await queryRunner.manager.save(AdminRole, {\n+        name: 'SuperAdmin',\n+        company,\n+        permissions,\n+      });",
        "created_at": "2021-06-02T16:01:44Z",
        "body": "@t3hpr1m3 Do you know of any reason to keep both `POST /companies` and `POST /companies/register`?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 674481686,
        "path": "src/identity/services/registrations.service.ts",
        "in_reply_to_id": 643161381,
        "id": 644170757,
        "diff_hunk": "@@ -45,12 +47,20 @@ export class RegistrationsService {\n         businessTypes: registration.businessTypes,\n       });\n \n+      permissions = await queryRunner.manager.find(Permission);\n+      adminRole = await queryRunner.manager.save(AdminRole, {\n+        name: 'SuperAdmin',\n+        company,\n+        permissions,\n+      });",
        "created_at": "2021-06-02T17:19:55Z",
        "body": "I vote we chop and bring it back if needed, so we do not lose track of this and have the frontend creating companies without the proper business logic associated with it."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 675131453,
        "path": "src/identity/services/registrations.service.ts",
        "in_reply_to_id": 643161381,
        "id": 644682266,
        "diff_hunk": "@@ -45,12 +47,20 @@ export class RegistrationsService {\n         businessTypes: registration.businessTypes,\n       });\n \n+      permissions = await queryRunner.manager.find(Permission);\n+      adminRole = await queryRunner.manager.save(AdminRole, {\n+        name: 'SuperAdmin',\n+        company,\n+        permissions,\n+      });",
        "created_at": "2021-06-03T10:35:56Z",
        "body": "To give @t3hpr1m3 more context, the frontend got a bit disconnected from the backend after we started the refactoring so we can't confirm yet if we need this or not. I believe we don't and we will have a confirmation by the end of the sprint when everything gets back on track. But, up to you guys if you want to leave it for now or chop it."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 675488606,
        "path": "src/identity/services/registrations.service.ts",
        "in_reply_to_id": 643161381,
        "id": 644947931,
        "diff_hunk": "@@ -45,12 +47,20 @@ export class RegistrationsService {\n         businessTypes: registration.businessTypes,\n       });\n \n+      permissions = await queryRunner.manager.find(Permission);\n+      adminRole = await queryRunner.manager.save(AdminRole, {\n+        name: 'SuperAdmin',\n+        company,\n+        permissions,\n+      });",
        "created_at": "2021-06-03T16:27:17Z",
        "body": "I'd honestly rather leave it, because at some point we might need the ability to create a company administratively (ie. not via signup)."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 675491351,
        "path": "src/identity/services/registrations.service.ts",
        "in_reply_to_id": 643161381,
        "id": 644949232,
        "diff_hunk": "@@ -45,12 +47,20 @@ export class RegistrationsService {\n         businessTypes: registration.businessTypes,\n       });\n \n+      permissions = await queryRunner.manager.find(Permission);\n+      adminRole = await queryRunner.manager.save(AdminRole, {\n+        name: 'SuperAdmin',\n+        company,\n+        permissions,\n+      });",
        "created_at": "2021-06-03T16:29:07Z",
        "body": "Sure."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/63",
      "updated_at": "2021-05-27T21:22:10Z",
      "title": "[IMERC-158] Restructure application codebase.",
      "state": "closed",
      "number": 63,
      "merged_at": "2021-05-27T21:22:09Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ccced37a6bcaf9e3fe0d3731686025d0e409014a",
        "ref": "feature/IMERC-158-restructure"
      },
      "created_at": "2021-05-25T17:38:25Z",
      "closed_at": "2021-05-27T21:22:09Z",
      "body": "https://imercatus.backlog.com/view/IMERC-158\r\n\r\n- [x] Collect all related logic from users/companies/registrations into a\r\nnew `identity` module.\r\n- [x] Move unit tests to the `test` directory.\r\n\r\nThis is much easier to \"review\" in its entirety.  In essence, I took everything from the `auth`, `companies`, and `users` modules, and created a new combined `identity` module.  The new module should export everything that could possibly be needed by new modules yet to be written.\r\n\r\nAdded some organization to the newly created `identity` module, and adjusted all imports.  I did sprinkle a few `index.ts` files around (there's a separate task for this), just to avoid typing.  I'm not 100% tied to the organization, and I haven't applied it to other modules (`config` and `mail`).  Waiting for feedback from the group.\r\n\r\nI also removed a bunch of duplication from `app.module.ts`.\r\n\r\nLeft the unit tests completely unorganized, as I'd like some input from you guys.  I could create a top-level directory to mirror the module (`test/identity`), or just create subdirectories for each type of unit test (ex: `test/controllers`, `test/services`, etc).",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "8ffdcbaeb60beec125b1ff88d6c54cf2086bbfc9",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/62",
      "updated_at": "2021-05-26T19:44:41Z",
      "title": "[IMERC-127] map admin role with list of permissions",
      "state": "closed",
      "number": 62,
      "merged_at": "2021-05-26T19:44:41Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "b4e444fe9423000d888821a29a33a3f84df8271e",
        "ref": "IMERC-127-map-admin-role-with-permissions-main"
      },
      "created_at": "2021-05-20T22:22:32Z",
      "closed_at": "2021-05-26T19:44:41Z",
      "body": "[Map AdminRole with a list of Permission (with endpoints for CRUD)](https://imercatus.backlog.com/view/IMERC-127)\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "f492f9df0622cf6a0d9743d8b1de5b5d9580191f",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 666228944,
        "path": "src/services/admin-roles.service.ts",
        "id": 637487619,
        "diff_hunk": "@@ -0,0 +1,67 @@\n+import { Injectable } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+import {\n+  Connection,\n+  Repository,\n+  SelectQueryBuilder,\n+  UpdateQueryBuilder,\n+} from 'typeorm';\n+import { AdminRole } from '../models/entities/admin-role.entity';\n+import { Company } from '../companies/entities/company.entity';\n+\n+@Injectable()\n+export class AdminRolesService {\n+  constructor(\n+    @InjectRepository(AdminRole)\n+    private adminRoleRepository: Repository<AdminRole>,\n+    private connection: Connection,\n+  ) {}\n+\n+  async getAll(company: Company): Promise<AdminRole[]> {\n+    return this.selectWithinCompany(company).getMany();\n+  }\n+\n+  findOne(company: Company, id: number): Promise<AdminRole> {\n+    return this.selectWithinCompany(company)\n+      .andWhere('admin_role.id = :id', { id })\n+      .getOne();\n+  }\n+\n+  create(\n+    company: Company,\n+    createAdminRoleInput: Partial<AdminRole>,\n+  ): Promise<AdminRole> {\n+    const newAdminRole = {\n+      ...createAdminRoleInput,\n+      company,\n+    };\n+\n+    return this.adminRoleRepository.save(newAdminRole);\n+  }\n+\n+  update(\n+    company: Company,\n+    id: number,\n+    adminRoleAttributes: Partial<AdminRole>,\n+  ) {\n+    return this.updateWithinCompany(company)\n+      .set(adminRoleAttributes)\n+      .andWhere('id = :id', { id })\n+      .execute();\n+  }\n+\n+  selectWithinCompany(company: Company): SelectQueryBuilder<AdminRole> {",
        "created_at": "2021-05-23T05:04:15Z",
        "body": "This is boiler-plate, should we make a class that can introspect these?  I am thinking on the third case we do, this is the second."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 666261411,
        "path": "src/app.module.ts",
        "id": 637536658,
        "diff_hunk": "@@ -64,7 +75,13 @@ import { UnhandledExceptionsFilterProvider } from './shared/unhandled-exceptions\n     MailModule,\n     SharedModule,\n   ],\n-  controllers: [AppController, UsersController, CompaniesController],\n+  controllers: [\n+    AppController,\n+    UsersController,\n+    CompaniesController,\n+    AdminRolesController,\n+    FeaturesController,\n+  ],",
        "created_at": "2021-05-23T12:11:34Z",
        "body": "Looks like we don't need most of the things on this array (tested locally, but you can double check). This is related to the convo we had on Friday. For example, `UsersController` is already defined on the `controllers` array of `UsersModule` and, as we are importing this module on line 72, the controller gets registered.\r\n\r\nThis also applies to `TypeOrmModule.forFeature`. Most of the entities there are not needed. We only need the `controller` array and the `TypeOrmModule.forFeature` call for controllers and entities that are not part of any submodule.\r\n\r\n//cc @t3hpr1m3 "
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 666261411,
        "path": "src/companies/companies.service.ts",
        "id": 637537460,
        "diff_hunk": "@@ -32,4 +33,20 @@ export class CompaniesService {\n       return manager.findOne(Company, id);\n     });\n   }\n+\n+  async features(id: number): Promise<Feature[]> {\n+    const company = await this.companyRepository.findOne(id);\n+\n+    const features = await this.connection\n+      .getRepository(Feature)\n+      .createQueryBuilder('feature')\n+      .leftJoinAndSelect('feature.businessTypeFeatures', 'businessTypeFeature')\n+      .leftJoinAndSelect('feature.mod', 'mod')\n+      .where('businessTypeFeature.businessType IN (:...types)', {\n+        types: company.businessTypes,\n+      })\n+      .getMany();\n+\n+    return features as Feature[];\n+  }",
        "created_at": "2021-05-23T12:17:30Z",
        "body": "this looks duplicate with the `getAll` inside `featuresService` and it looks like this one is not being used"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 666261411,
        "path": "src/controllers/admin-roles.controller.ts",
        "id": 637537689,
        "diff_hunk": "@@ -0,0 +1,71 @@\n+import {\n+  Controller,\n+  Get,\n+  Param,\n+  Post,\n+  Body,\n+  UseInterceptors,\n+  UseGuards,\n+  Patch,\n+} from '@nestjs/common';\n+import { plainToClass } from 'class-transformer';\n+import { AdminRolesService } from '../services/admin-roles.service';\n+import { NotFoundInterceptor } from '../shared/interceptors';\n+import { AdminRoleDTO } from '../models/dto/admin-roles/admin-role.dto';\n+import { CreateAdminRoleDTO } from '../models/dto/admin-roles/create-admin-role.dto';\n+import { UpdateAdminRoleDTO } from '../models/dto/admin-roles/update-admin-role.dto';\n+import { AuthenticationGuard } from '../auth/authentication.guard';\n+import { EnsureValidCompany } from '../companies/ensure-valid-company.guard';\n+import { ScopedCompany } from '../companies/scoped-company.decorator';\n+import { Company } from '../companies/entities/company.entity';\n+\n+@Controller('companies/:companyId/admin_roles')",
        "created_at": "2021-05-23T12:19:30Z",
        "body": "I think `admin-roles` (i.e., kebab case) is more usual for APIs, no? //cc @t3hpr1m3 "
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 666261411,
        "path": "src/services/admin-roles.service.ts",
        "in_reply_to_id": 637487619,
        "id": 637539328,
        "diff_hunk": "@@ -0,0 +1,67 @@\n+import { Injectable } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+import {\n+  Connection,\n+  Repository,\n+  SelectQueryBuilder,\n+  UpdateQueryBuilder,\n+} from 'typeorm';\n+import { AdminRole } from '../models/entities/admin-role.entity';\n+import { Company } from '../companies/entities/company.entity';\n+\n+@Injectable()\n+export class AdminRolesService {\n+  constructor(\n+    @InjectRepository(AdminRole)\n+    private adminRoleRepository: Repository<AdminRole>,\n+    private connection: Connection,\n+  ) {}\n+\n+  async getAll(company: Company): Promise<AdminRole[]> {\n+    return this.selectWithinCompany(company).getMany();\n+  }\n+\n+  findOne(company: Company, id: number): Promise<AdminRole> {\n+    return this.selectWithinCompany(company)\n+      .andWhere('admin_role.id = :id', { id })\n+      .getOne();\n+  }\n+\n+  create(\n+    company: Company,\n+    createAdminRoleInput: Partial<AdminRole>,\n+  ): Promise<AdminRole> {\n+    const newAdminRole = {\n+      ...createAdminRoleInput,\n+      company,\n+    };\n+\n+    return this.adminRoleRepository.save(newAdminRole);\n+  }\n+\n+  update(\n+    company: Company,\n+    id: number,\n+    adminRoleAttributes: Partial<AdminRole>,\n+  ) {\n+    return this.updateWithinCompany(company)\n+      .set(adminRoleAttributes)\n+      .andWhere('id = :id', { id })\n+      .execute();\n+  }\n+\n+  selectWithinCompany(company: Company): SelectQueryBuilder<AdminRole> {",
        "created_at": "2021-05-23T12:31:30Z",
        "body": "What is the advantage of this `selectWithinCompany` approach when we could do the same query with something like:\r\n\r\n```ts\r\nthis.adminRoleRepository().find({ id, company })\r\n```\r\n\r\nFor example, on `UsersService`, I refactored `findOne` to be a one-liner like this:\r\n\r\n```ts\r\nfindOne(company: Company, id: number): Promise<User> {√è\r\n  return this.userRepository.findOneOrFail({ id, company });\r\n}\r\n```\r\n\r\nWhile before it was this:\r\n\r\n```ts\r\nfindOne(company: Company, id: number): Promise<User> {\r\n  return this.userRepository\r\n    .selectWithinCompany(company)\r\n    .andWhere('user.id = :id', { id })\r\n    .getOne();\r\n}\r\n```\r\n\r\nAnd all tests pass. So what I'm missing here? I can't see the value of this `selectWithinCompany` approach."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 666888197,
        "path": "src/controllers/admin-roles.controller.ts",
        "in_reply_to_id": 637537689,
        "id": 638060053,
        "diff_hunk": "@@ -0,0 +1,71 @@\n+import {\n+  Controller,\n+  Get,\n+  Param,\n+  Post,\n+  Body,\n+  UseInterceptors,\n+  UseGuards,\n+  Patch,\n+} from '@nestjs/common';\n+import { plainToClass } from 'class-transformer';\n+import { AdminRolesService } from '../services/admin-roles.service';\n+import { NotFoundInterceptor } from '../shared/interceptors';\n+import { AdminRoleDTO } from '../models/dto/admin-roles/admin-role.dto';\n+import { CreateAdminRoleDTO } from '../models/dto/admin-roles/create-admin-role.dto';\n+import { UpdateAdminRoleDTO } from '../models/dto/admin-roles/update-admin-role.dto';\n+import { AuthenticationGuard } from '../auth/authentication.guard';\n+import { EnsureValidCompany } from '../companies/ensure-valid-company.guard';\n+import { ScopedCompany } from '../companies/scoped-company.decorator';\n+import { Company } from '../companies/entities/company.entity';\n+\n+@Controller('companies/:companyId/admin_roles')",
        "created_at": "2021-05-24T15:38:05Z",
        "body": "@brunokrebs Yes.  Underscores are frowned upon in urls in general I believe."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 668414856,
        "path": "src/services/admin-roles.service.ts",
        "in_reply_to_id": 637487619,
        "id": 639240710,
        "diff_hunk": "@@ -0,0 +1,67 @@\n+import { Injectable } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+import {\n+  Connection,\n+  Repository,\n+  SelectQueryBuilder,\n+  UpdateQueryBuilder,\n+} from 'typeorm';\n+import { AdminRole } from '../models/entities/admin-role.entity';\n+import { Company } from '../companies/entities/company.entity';\n+\n+@Injectable()\n+export class AdminRolesService {\n+  constructor(\n+    @InjectRepository(AdminRole)\n+    private adminRoleRepository: Repository<AdminRole>,\n+    private connection: Connection,\n+  ) {}\n+\n+  async getAll(company: Company): Promise<AdminRole[]> {\n+    return this.selectWithinCompany(company).getMany();\n+  }\n+\n+  findOne(company: Company, id: number): Promise<AdminRole> {\n+    return this.selectWithinCompany(company)\n+      .andWhere('admin_role.id = :id', { id })\n+      .getOne();\n+  }\n+\n+  create(\n+    company: Company,\n+    createAdminRoleInput: Partial<AdminRole>,\n+  ): Promise<AdminRole> {\n+    const newAdminRole = {\n+      ...createAdminRoleInput,\n+      company,\n+    };\n+\n+    return this.adminRoleRepository.save(newAdminRole);\n+  }\n+\n+  update(\n+    company: Company,\n+    id: number,\n+    adminRoleAttributes: Partial<AdminRole>,\n+  ) {\n+    return this.updateWithinCompany(company)\n+      .set(adminRoleAttributes)\n+      .andWhere('id = :id', { id })\n+      .execute();\n+  }\n+\n+  selectWithinCompany(company: Company): SelectQueryBuilder<AdminRole> {",
        "created_at": "2021-05-25T22:08:12Z",
        "body": "I think the intent of the scope is to compose all sorts of queries within the scope within the entity's service class and it would serve as the base API for those queries."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 668415288,
        "path": "src/app.module.ts",
        "in_reply_to_id": 637536658,
        "id": 639241099,
        "diff_hunk": "@@ -64,7 +75,13 @@ import { UnhandledExceptionsFilterProvider } from './shared/unhandled-exceptions\n     MailModule,\n     SharedModule,\n   ],\n-  controllers: [AppController, UsersController, CompaniesController],\n+  controllers: [\n+    AppController,\n+    UsersController,\n+    CompaniesController,\n+    AdminRolesController,\n+    FeaturesController,\n+  ],",
        "created_at": "2021-05-25T22:08:57Z",
        "body": "Great, thanks for looking at that. Mind if we address in the refactor or in another PR that is not feature based?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 668415406,
        "path": "src/companies/companies.service.ts",
        "in_reply_to_id": 637537460,
        "id": 639241196,
        "diff_hunk": "@@ -32,4 +33,20 @@ export class CompaniesService {\n       return manager.findOne(Company, id);\n     });\n   }\n+\n+  async features(id: number): Promise<Feature[]> {\n+    const company = await this.companyRepository.findOne(id);\n+\n+    const features = await this.connection\n+      .getRepository(Feature)\n+      .createQueryBuilder('feature')\n+      .leftJoinAndSelect('feature.businessTypeFeatures', 'businessTypeFeature')\n+      .leftJoinAndSelect('feature.mod', 'mod')\n+      .where('businessTypeFeature.businessType IN (:...types)', {\n+        types: company.businessTypes,\n+      })\n+      .getMany();\n+\n+    return features as Feature[];\n+  }",
        "created_at": "2021-05-25T22:09:10Z",
        "body": "I chopped it. Nice catch."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 668415502,
        "path": "src/controllers/admin-roles.controller.ts",
        "in_reply_to_id": 637537689,
        "id": 639241266,
        "diff_hunk": "@@ -0,0 +1,71 @@\n+import {\n+  Controller,\n+  Get,\n+  Param,\n+  Post,\n+  Body,\n+  UseInterceptors,\n+  UseGuards,\n+  Patch,\n+} from '@nestjs/common';\n+import { plainToClass } from 'class-transformer';\n+import { AdminRolesService } from '../services/admin-roles.service';\n+import { NotFoundInterceptor } from '../shared/interceptors';\n+import { AdminRoleDTO } from '../models/dto/admin-roles/admin-role.dto';\n+import { CreateAdminRoleDTO } from '../models/dto/admin-roles/create-admin-role.dto';\n+import { UpdateAdminRoleDTO } from '../models/dto/admin-roles/update-admin-role.dto';\n+import { AuthenticationGuard } from '../auth/authentication.guard';\n+import { EnsureValidCompany } from '../companies/ensure-valid-company.guard';\n+import { ScopedCompany } from '../companies/scoped-company.decorator';\n+import { Company } from '../companies/entities/company.entity';\n+\n+@Controller('companies/:companyId/admin_roles')",
        "created_at": "2021-05-25T22:09:20Z",
        "body": "Agreed, done."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 669262244,
        "path": "src/services/admin-roles.service.ts",
        "in_reply_to_id": 637487619,
        "id": 639904626,
        "diff_hunk": "@@ -0,0 +1,67 @@\n+import { Injectable } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+import {\n+  Connection,\n+  Repository,\n+  SelectQueryBuilder,\n+  UpdateQueryBuilder,\n+} from 'typeorm';\n+import { AdminRole } from '../models/entities/admin-role.entity';\n+import { Company } from '../companies/entities/company.entity';\n+\n+@Injectable()\n+export class AdminRolesService {\n+  constructor(\n+    @InjectRepository(AdminRole)\n+    private adminRoleRepository: Repository<AdminRole>,\n+    private connection: Connection,\n+  ) {}\n+\n+  async getAll(company: Company): Promise<AdminRole[]> {\n+    return this.selectWithinCompany(company).getMany();\n+  }\n+\n+  findOne(company: Company, id: number): Promise<AdminRole> {\n+    return this.selectWithinCompany(company)\n+      .andWhere('admin_role.id = :id', { id })\n+      .getOne();\n+  }\n+\n+  create(\n+    company: Company,\n+    createAdminRoleInput: Partial<AdminRole>,\n+  ): Promise<AdminRole> {\n+    const newAdminRole = {\n+      ...createAdminRoleInput,\n+      company,\n+    };\n+\n+    return this.adminRoleRepository.save(newAdminRole);\n+  }\n+\n+  update(\n+    company: Company,\n+    id: number,\n+    adminRoleAttributes: Partial<AdminRole>,\n+  ) {\n+    return this.updateWithinCompany(company)\n+      .set(adminRoleAttributes)\n+      .andWhere('id = :id', { id })\n+      .execute();\n+  }\n+\n+  selectWithinCompany(company: Company): SelectQueryBuilder<AdminRole> {",
        "created_at": "2021-05-26T16:32:28Z",
        "body": "Does that help explain the purpose @brunokrebs?"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/61",
      "updated_at": "2021-05-26T16:58:32Z",
      "title": "[IMERC-100] Prevent signup after invite",
      "state": "closed",
      "number": 61,
      "merged_at": "2021-05-26T16:58:31Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c0fd5472aeb0257aa7e5b61bf73751f3dd012b69",
        "ref": "feature/IMERC-100-pending-invites"
      },
      "created_at": "2021-05-20T14:52:12Z",
      "closed_at": "2021-05-26T16:58:31Z",
      "body": "https://imercatus.backlog.com/view/IMERC-100\r\n\r\n- [x] Add check for duplicate email address\r\n- [x] Throw an error in both the registration service and controller if a duplicate email is encountered during signup.\r\n\r\nThis is based on IMERC-151, so will need to be merged after  https://github.com/iMercatus/imercata-backend/pull/56",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "547140d1f526d25ef7082fd52a654001e89758d3",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 664616180,
        "path": "src/companies/companies.module.ts",
        "id": 636272504,
        "diff_hunk": "@@ -3,11 +3,14 @@ import { TypeOrmModule } from '@nestjs/typeorm';\n import { CompaniesService } from './companies.service';\n import { CompaniesController } from './companies.controller';\n import { Company } from './entities/company.entity';\n+import { UsersService } from '../users/users.service';\n+import { UserRepository } from '../users/user.repository';",
        "created_at": "2021-05-20T16:38:23Z",
        "body": "I needed to add Users into the company module in my current PR too..."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 666260318,
        "path": "src/services/registrations.service.spec.ts",
        "id": 637535123,
        "diff_hunk": "@@ -40,57 +39,95 @@ describe('RegistrationsService', () => {\n     let registration: RegisterCompanyDTO;\n     let result: Company;\n \n-    beforeEach(async () => {\n-      company = companiesFactory.build();\n-      user = usersFactory.build();\n-      registration = {\n-        name: company.name,\n-        size: company.size,\n-        ein: company.ein,\n-        businessTypes: company.businessTypes,\n-        adminRoles: [],\n-        user: {\n+    describe('with a new user', () => {\n+      beforeEach(async () => {\n+        company = companiesFactory.build();\n+        user = usersFactory.build();\n+        registration = {\n+          name: company.name,\n+          size: company.size,\n+          ein: company.ein,\n+          businessTypes: company.businessTypes,\n+          user: {\n+            email: user.email,\n+            firstName: user.firstName,\n+            lastName: user.lastName,\n+            phone: user.phone,\n+          },\n+        };\n+        result = await service.create(registration, { sub: 'testing' });\n+      });\n+\n+      it('creates a company', async () => {\n+        const record = await connection.manager.findOne(Company, {\n+          name: company.name,\n+        });\n+        expect(record).toMatchObject({\n+          size: company.size,\n+          ein: company.ein,\n+          businessTypes: company.businessTypes,\n+        });\n+      });\n+\n+      it('creates a user', async () => {\n+        const record = await connection.manager.findOne(User, {\n+          email: user.email,\n+        });\n+        expect(record).toMatchObject({\n           email: user.email,\n           firstName: user.firstName,\n           lastName: user.lastName,\n           phone: user.phone,\n-        },\n-      };\n-      result = await service.create(registration, { sub: 'testing' });\n-    });\n-\n-    it('creates a company', async () => {\n-      const record = await connection.manager.findOne(Company, {\n-        name: company.name,\n+          onboardingStep: 1,",
        "created_at": "2021-05-23T11:59:37Z",
        "body": "isn't this step 4? I mean, the user will have gone through the whole registration flow, input their name, company type, company info, etc, and submitted the form. So I guess they will be on the last step already."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 666260389,
        "path": "src/services/registrations.service.spec.ts",
        "id": 637535227,
        "diff_hunk": "@@ -40,57 +39,95 @@ describe('RegistrationsService', () => {\n     let registration: RegisterCompanyDTO;\n     let result: Company;\n \n-    beforeEach(async () => {\n-      company = companiesFactory.build();\n-      user = usersFactory.build();\n-      registration = {\n-        name: company.name,\n-        size: company.size,\n-        ein: company.ein,\n-        businessTypes: company.businessTypes,\n-        adminRoles: [],\n-        user: {\n+    describe('with a new user', () => {\n+      beforeEach(async () => {\n+        company = companiesFactory.build();\n+        user = usersFactory.build();\n+        registration = {\n+          name: company.name,\n+          size: company.size,\n+          ein: company.ein,\n+          businessTypes: company.businessTypes,\n+          user: {\n+            email: user.email,\n+            firstName: user.firstName,\n+            lastName: user.lastName,\n+            phone: user.phone,\n+          },\n+        };\n+        result = await service.create(registration, { sub: 'testing' });\n+      });\n+\n+      it('creates a company', async () => {\n+        const record = await connection.manager.findOne(Company, {\n+          name: company.name,\n+        });\n+        expect(record).toMatchObject({\n+          size: company.size,\n+          ein: company.ein,\n+          businessTypes: company.businessTypes,\n+        });\n+      });\n+\n+      it('creates a user', async () => {\n+        const record = await connection.manager.findOne(User, {\n+          email: user.email,\n+        });\n+        expect(record).toMatchObject({\n           email: user.email,\n           firstName: user.firstName,\n           lastName: user.lastName,\n           phone: user.phone,\n-        },\n-      };\n-      result = await service.create(registration, { sub: 'testing' });\n-    });\n-\n-    it('creates a company', async () => {\n-      const record = await connection.manager.findOne(Company, {\n-        name: company.name,\n+          onboardingStep: 1,\n+          status: 'active',",
        "created_at": "2021-05-23T12:00:28Z",
        "body": "And here, instead of active, it looks to me that they would be in `pending` so the backoffice can validate their stuff and then active."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 666260720,
        "path": "src/companies/companies.controller.ts",
        "id": 637535719,
        "diff_hunk": "@@ -68,10 +69,15 @@ export class CompaniesController {\n \n   @Post('register')\n   @UseGuards(AuthenticationGuard)\n-  public register(\n+  public async register(\n     @Body() registerCompanyDTO: RegisterCompanyDTO,\n     @LoggedInUser() loggedInUser: UserProfile,\n   ): Promise<CompanyDTO> {\n+    if (await this.registrationsService.isDuplicate(registerCompanyDTO)) {\n+      throw new UnprocessableEntityException(\n+        'Email address has already been invited to an existing company.',\n+      );\n+    }",
        "created_at": "2021-05-23T12:04:14Z",
        "body": "noticed that you are calling `isDuplicate` twice, here and inside `registrationsService.create`. Is that on purpose? If not, I would leave this only inside `registrationsService.create`"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 666884291,
        "path": "src/companies/companies.controller.ts",
        "in_reply_to_id": 637535719,
        "id": 638057385,
        "diff_hunk": "@@ -68,10 +69,15 @@ export class CompaniesController {\n \n   @Post('register')\n   @UseGuards(AuthenticationGuard)\n-  public register(\n+  public async register(\n     @Body() registerCompanyDTO: RegisterCompanyDTO,\n     @LoggedInUser() loggedInUser: UserProfile,\n   ): Promise<CompanyDTO> {\n+    if (await this.registrationsService.isDuplicate(registerCompanyDTO)) {\n+      throw new UnprocessableEntityException(\n+        'Email address has already been invited to an existing company.',\n+      );\n+    }",
        "created_at": "2021-05-24T15:35:19Z",
        "body": "It is on purpose.  As it stands, the controller action can send back a meaningful error message for this non-exceptional condition.  Without the check in the controller, all it could do would be to react to a an exception, which doesn't give a lot of info on what exactly went wrong."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 666983808,
        "path": "src/companies/companies.controller.ts",
        "in_reply_to_id": 637535719,
        "id": 638130174,
        "diff_hunk": "@@ -68,10 +69,15 @@ export class CompaniesController {\n \n   @Post('register')\n   @UseGuards(AuthenticationGuard)\n-  public register(\n+  public async register(\n     @Body() registerCompanyDTO: RegisterCompanyDTO,\n     @LoggedInUser() loggedInUser: UserProfile,\n   ): Promise<CompanyDTO> {\n+    if (await this.registrationsService.isDuplicate(registerCompanyDTO)) {\n+      throw new UnprocessableEntityException(\n+        'Email address has already been invited to an existing company.',\n+      );\n+    }",
        "created_at": "2021-05-24T17:10:33Z",
        "body": "well, that's a bit weird... I mean, both are raising exceptions, so no matter which one raises it, the caller up in the stack should get it anyway and the result should be the same. I do see that here you are using `UnprocessableEntityException` and in the other one you are using `Error`. Is this the cause of the different behavior you see? If so, wouldn't make sense to make `registrationService.create` raise `UnprocessableEntityException` instead of `Error`?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 667992505,
        "path": "src/services/registrations.service.spec.ts",
        "in_reply_to_id": 637535227,
        "id": 638918433,
        "diff_hunk": "@@ -40,57 +39,95 @@ describe('RegistrationsService', () => {\n     let registration: RegisterCompanyDTO;\n     let result: Company;\n \n-    beforeEach(async () => {\n-      company = companiesFactory.build();\n-      user = usersFactory.build();\n-      registration = {\n-        name: company.name,\n-        size: company.size,\n-        ein: company.ein,\n-        businessTypes: company.businessTypes,\n-        adminRoles: [],\n-        user: {\n+    describe('with a new user', () => {\n+      beforeEach(async () => {\n+        company = companiesFactory.build();\n+        user = usersFactory.build();\n+        registration = {\n+          name: company.name,\n+          size: company.size,\n+          ein: company.ein,\n+          businessTypes: company.businessTypes,\n+          user: {\n+            email: user.email,\n+            firstName: user.firstName,\n+            lastName: user.lastName,\n+            phone: user.phone,\n+          },\n+        };\n+        result = await service.create(registration, { sub: 'testing' });\n+      });\n+\n+      it('creates a company', async () => {\n+        const record = await connection.manager.findOne(Company, {\n+          name: company.name,\n+        });\n+        expect(record).toMatchObject({\n+          size: company.size,\n+          ein: company.ein,\n+          businessTypes: company.businessTypes,\n+        });\n+      });\n+\n+      it('creates a user', async () => {\n+        const record = await connection.manager.findOne(User, {\n+          email: user.email,\n+        });\n+        expect(record).toMatchObject({\n           email: user.email,\n           firstName: user.firstName,\n           lastName: user.lastName,\n           phone: user.phone,\n-        },\n-      };\n-      result = await service.create(registration, { sub: 'testing' });\n-    });\n-\n-    it('creates a company', async () => {\n-      const record = await connection.manager.findOne(Company, {\n-        name: company.name,\n+          onboardingStep: 1,\n+          status: 'active',",
        "created_at": "2021-05-25T15:39:12Z",
        "body": "This is the registration service for signing up and entirely new company/initial user.  Their status needs to be `active` so they can immediately start using the system."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 667994760,
        "path": "src/services/registrations.service.spec.ts",
        "in_reply_to_id": 637535123,
        "id": 638920135,
        "diff_hunk": "@@ -40,57 +39,95 @@ describe('RegistrationsService', () => {\n     let registration: RegisterCompanyDTO;\n     let result: Company;\n \n-    beforeEach(async () => {\n-      company = companiesFactory.build();\n-      user = usersFactory.build();\n-      registration = {\n-        name: company.name,\n-        size: company.size,\n-        ein: company.ein,\n-        businessTypes: company.businessTypes,\n-        adminRoles: [],\n-        user: {\n+    describe('with a new user', () => {\n+      beforeEach(async () => {\n+        company = companiesFactory.build();\n+        user = usersFactory.build();\n+        registration = {\n+          name: company.name,\n+          size: company.size,\n+          ein: company.ein,\n+          businessTypes: company.businessTypes,\n+          user: {\n+            email: user.email,\n+            firstName: user.firstName,\n+            lastName: user.lastName,\n+            phone: user.phone,\n+          },\n+        };\n+        result = await service.create(registration, { sub: 'testing' });\n+      });\n+\n+      it('creates a company', async () => {\n+        const record = await connection.manager.findOne(Company, {\n+          name: company.name,\n+        });\n+        expect(record).toMatchObject({\n+          size: company.size,\n+          ein: company.ein,\n+          businessTypes: company.businessTypes,\n+        });\n+      });\n+\n+      it('creates a user', async () => {\n+        const record = await connection.manager.findOne(User, {\n+          email: user.email,\n+        });\n+        expect(record).toMatchObject({\n           email: user.email,\n           firstName: user.firstName,\n           lastName: user.lastName,\n           phone: user.phone,\n-        },\n-      };\n-      result = await service.create(registration, { sub: 'testing' });\n-    });\n-\n-    it('creates a company', async () => {\n-      const record = await connection.manager.findOne(Company, {\n-        name: company.name,\n+          onboardingStep: 1,",
        "created_at": "2021-05-25T15:41:10Z",
        "body": "I'm not sure what the usage for the `onboardingStep` value is for this initial user.  They must be created with a fully active user so they can immediately start managing the company.  If we want it to be 4 in the tests, I'm fine with that."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 667995557,
        "path": "src/services/registrations.service.spec.ts",
        "in_reply_to_id": 637535227,
        "id": 638920761,
        "diff_hunk": "@@ -40,57 +39,95 @@ describe('RegistrationsService', () => {\n     let registration: RegisterCompanyDTO;\n     let result: Company;\n \n-    beforeEach(async () => {\n-      company = companiesFactory.build();\n-      user = usersFactory.build();\n-      registration = {\n-        name: company.name,\n-        size: company.size,\n-        ein: company.ein,\n-        businessTypes: company.businessTypes,\n-        adminRoles: [],\n-        user: {\n+    describe('with a new user', () => {\n+      beforeEach(async () => {\n+        company = companiesFactory.build();\n+        user = usersFactory.build();\n+        registration = {\n+          name: company.name,\n+          size: company.size,\n+          ein: company.ein,\n+          businessTypes: company.businessTypes,\n+          user: {\n+            email: user.email,\n+            firstName: user.firstName,\n+            lastName: user.lastName,\n+            phone: user.phone,\n+          },\n+        };\n+        result = await service.create(registration, { sub: 'testing' });\n+      });\n+\n+      it('creates a company', async () => {\n+        const record = await connection.manager.findOne(Company, {\n+          name: company.name,\n+        });\n+        expect(record).toMatchObject({\n+          size: company.size,\n+          ein: company.ein,\n+          businessTypes: company.businessTypes,\n+        });\n+      });\n+\n+      it('creates a user', async () => {\n+        const record = await connection.manager.findOne(User, {\n+          email: user.email,\n+        });\n+        expect(record).toMatchObject({\n           email: user.email,\n           firstName: user.firstName,\n           lastName: user.lastName,\n           phone: user.phone,\n-        },\n-      };\n-      result = await service.create(registration, { sub: 'testing' });\n-    });\n-\n-    it('creates a company', async () => {\n-      const record = await connection.manager.findOne(Company, {\n-        name: company.name,\n+          onboardingStep: 1,\n+          status: 'active',",
        "created_at": "2021-05-25T15:41:52Z",
        "body": "well, I might be misunderstanding, but actually before being able to use it immediately, someone at the backoffice needs to grant them access... so it would still be pending. Even if it is for a brand new company @t3hpr1m3 \r\n![image](https://user-images.githubusercontent.com/15347252/119527277-8c15ad00-bd56-11eb-957d-02b63b0a8fed.png)\r\n"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 667997976,
        "path": "src/services/registrations.service.spec.ts",
        "in_reply_to_id": 637535227,
        "id": 638922631,
        "diff_hunk": "@@ -40,57 +39,95 @@ describe('RegistrationsService', () => {\n     let registration: RegisterCompanyDTO;\n     let result: Company;\n \n-    beforeEach(async () => {\n-      company = companiesFactory.build();\n-      user = usersFactory.build();\n-      registration = {\n-        name: company.name,\n-        size: company.size,\n-        ein: company.ein,\n-        businessTypes: company.businessTypes,\n-        adminRoles: [],\n-        user: {\n+    describe('with a new user', () => {\n+      beforeEach(async () => {\n+        company = companiesFactory.build();\n+        user = usersFactory.build();\n+        registration = {\n+          name: company.name,\n+          size: company.size,\n+          ein: company.ein,\n+          businessTypes: company.businessTypes,\n+          user: {\n+            email: user.email,\n+            firstName: user.firstName,\n+            lastName: user.lastName,\n+            phone: user.phone,\n+          },\n+        };\n+        result = await service.create(registration, { sub: 'testing' });\n+      });\n+\n+      it('creates a company', async () => {\n+        const record = await connection.manager.findOne(Company, {\n+          name: company.name,\n+        });\n+        expect(record).toMatchObject({\n+          size: company.size,\n+          ein: company.ein,\n+          businessTypes: company.businessTypes,\n+        });\n+      });\n+\n+      it('creates a user', async () => {\n+        const record = await connection.manager.findOne(User, {\n+          email: user.email,\n+        });\n+        expect(record).toMatchObject({\n           email: user.email,\n           firstName: user.firstName,\n           lastName: user.lastName,\n           phone: user.phone,\n-        },\n-      };\n-      result = await service.create(registration, { sub: 'testing' });\n-    });\n-\n-    it('creates a company', async () => {\n-      const record = await connection.manager.findOne(Company, {\n-        name: company.name,\n+          onboardingStep: 1,\n+          status: 'active',",
        "created_at": "2021-05-25T15:43:58Z",
        "body": "I wasn't aware of that.  I'll make an adjustment now."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 668001670,
        "path": "src/companies/companies.controller.ts",
        "in_reply_to_id": 637535719,
        "id": 638925458,
        "diff_hunk": "@@ -68,10 +69,15 @@ export class CompaniesController {\n \n   @Post('register')\n   @UseGuards(AuthenticationGuard)\n-  public register(\n+  public async register(\n     @Body() registerCompanyDTO: RegisterCompanyDTO,\n     @LoggedInUser() loggedInUser: UserProfile,\n   ): Promise<CompanyDTO> {\n+    if (await this.registrationsService.isDuplicate(registerCompanyDTO)) {\n+      throw new UnprocessableEntityException(\n+        'Email address has already been invited to an existing company.',\n+      );\n+    }",
        "created_at": "2021-05-25T15:47:08Z",
        "body": "That sort of breaks separation of concerns though, doesn't it?  Raising a transport related exception in a non-http service seems...wrong."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 668003086,
        "path": "src/companies/companies.controller.ts",
        "in_reply_to_id": 637535719,
        "id": 638926514,
        "diff_hunk": "@@ -68,10 +69,15 @@ export class CompaniesController {\n \n   @Post('register')\n   @UseGuards(AuthenticationGuard)\n-  public register(\n+  public async register(\n     @Body() registerCompanyDTO: RegisterCompanyDTO,\n     @LoggedInUser() loggedInUser: UserProfile,\n   ): Promise<CompanyDTO> {\n+    if (await this.registrationsService.isDuplicate(registerCompanyDTO)) {\n+      throw new UnprocessableEntityException(\n+        'Email address has already been invited to an existing company.',\n+      );\n+    }",
        "created_at": "2021-05-25T15:48:22Z",
        "body": "To me, a better solution to this problem would be to have our services return some sort of rich-result object.  Something with a `res` and `error` so we can cleanly return an error condition without raising an exception."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/60",
      "updated_at": "2021-05-20T16:25:58Z",
      "title": "[Snyk] Upgrade nodemailer from 6.5.0 to 6.6.0",
      "state": "closed",
      "number": 60,
      "merged_at": "2021-05-20T16:25:57Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ada6590a9879896336fa33023380188b81e759db",
        "ref": "snyk-upgrade-b6de19f8be9f1656bbbe7e100688adc4"
      },
      "created_at": "2021-05-19T19:28:52Z",
      "closed_at": "2021-05-20T16:25:57Z",
      "body": "<h3>Snyk has created this PR to upgrade nodemailer from 6.5.0 to 6.6.0.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=nodemailer&from_version=6.5.0&to_version=6.6.0&pr_id=7dde0d7e-d4f3-4ab7-af73-37a8b83e91bb&visibility=true&has_feature_flag=false)\nAs this is a private repository, Snyk-bot does not have access. Therefore, this PR has been created automatically, but appears to have been created by a real user.</br>\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **21 days ago**, on 2021-04-28.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>nodemailer</b></summary>\n    <ul>\n      <li>\n        <b>6.6.0</b> - <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases/tag/v6.6.0\">2021-04-28</a></br><p>v6.6.0</p>\n      </li>\n      <li>\n        <b>6.5.0</b> - <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases/tag/v6.5.0\">2021-02-26</a></br><p>v6.5.0</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/releases\">nodemailer GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>nodemailer</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/1750c0ff89ab79161f722b0cd35381cbc39fee46\">1750c0f</a> v6.6.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/0636d5821a60fe0e6b86e814e80edcfff343232a\">0636d58</a> Merge branch &#x27;master&#x27; of github.com:nodemailer/nodemailer</li>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/058d414de21fc3d5bc276e333b930a0ae3555ffd\">058d414</a> v6.6.0</li>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/fcb0d1f5918a89ca5e8ab880134fec07c4e92bc7\">fcb0d1f</a> test: üíç aws ses SDK v3 support</li>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/2ef39e35c3a9647afbda215eb648da59e63e600d\">2ef39e3</a> test: üíç aws ses connection verification</li>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/61075851839207b1ff541b77797ef7afe3c46c42\">6107585</a> fix: üêõ ses verify, add support for v3 API</li>\n      <li><a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/commit/bf57cf54887726479d5464d9dc0df2adb3ba533a\">bf57cf5</a> Fixes resolveContent with streams overriding data</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/nodemailer/nodemailer/compare/91108d787e6f4e6b9f4d1a82b418666ac76a6764...1750c0ff89ab79161f722b0cd35381cbc39fee46\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI3ZGRlMGQ3ZS1kNGYzLTRhYjctYWY3My0zN2E4YjgzZTkxYmIiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjdkZGUwZDdlLWQ0ZjMtNGFiNy1hZjczLTM3YThiODNlOTFiYiJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?pkg&#x3D;nodemailer&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"7dde0d7e-d4f3-4ab7-af73-37a8b83e91bb\",\"prPublicId\":\"7dde0d7e-d4f3-4ab7-af73-37a8b83e91bb\",\"dependencies\":[{\"name\":\"nodemailer\",\"from\":\"6.5.0\",\"to\":\"6.6.0\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatus/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"87e2f02e-ddbc-4bb7-b086-002440cb0cf2\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-04-28T09:23:07.034Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "94aaa620c73682368f4ff5bdcb6b340da4375ce4",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/59",
      "updated_at": "2021-05-19T15:50:34Z",
      "title": "[NO-TICKET] Fixes open connection on authorization spec",
      "state": "closed",
      "number": 59,
      "merged_at": "2021-05-19T15:50:33Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ddc56998ef065cd8e8ee3fb6508a8c8fceb6dfd5",
        "ref": "NO-TICKET/fix-worker-process-failed-to-exit-gracefully-2"
      },
      "created_at": "2021-05-18T17:04:37Z",
      "closed_at": "2021-05-19T15:50:33Z",
      "body": "Related: https://github.com/iMercatus/imercata-backend/pull/55",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "470d35a07774460febc6466852c090083192e28c",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/58",
      "updated_at": "2021-06-29T16:56:20Z",
      "title": "[IMERC-127] map admin role with list of permissions",
      "state": "closed",
      "number": 58,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9b7770da18faec159f3ecde3401e4df165a1a504",
        "ref": "IMERC-127-map-admin-role-with-permissions"
      },
      "created_at": "2021-05-18T00:44:08Z",
      "closed_at": "2021-05-20T22:23:02Z",
      "body": "[Map AdminRole with a list of Permission (with endpoints for CRUD)](https://imercatus.backlog.com/view/IMERC-127)\r\n\r\n ",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "547140d1f526d25ef7082fd52a654001e89758d3",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/57",
      "updated_at": "2021-06-29T16:56:22Z",
      "title": "[IMERC-127] map admin role with list of permissions",
      "state": "closed",
      "number": 57,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "34fe298a4a269cd26dc8ff25291ddf8633ee3f3c",
        "ref": "IMERC-127-map-admin-role-with-list-of-permissions"
      },
      "created_at": "2021-05-17T20:11:07Z",
      "closed_at": "2021-05-18T00:44:48Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "de45e614a68f7456403c0d8ed83a7a3097b53d8a",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/56",
      "updated_at": "2021-05-20T16:25:30Z",
      "title": "[IMERC-151] Add a company signup endpoint.",
      "state": "closed",
      "number": 56,
      "merged_at": "2021-05-20T16:25:30Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "bd1951d7c4cc87b0f04b591db7e587427ee4d64d",
        "ref": "feature/IMERC-151-signup"
      },
      "created_at": "2021-05-17T18:58:48Z",
      "closed_at": "2021-05-20T16:25:30Z",
      "body": "https://imercatus.backlog.com/view/IMERC-151\r\n\r\n- [x] create endpoint to handle registration requests\r\n- [x] add DTO's to hold registration information\r\n- [x] move all database logic to a single transaction\r\n\r\nThis PR fills the missing link between Auth0 signup and company creation in the BE.  This is where any default roles will eventually be assigned.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "94aaa620c73682368f4ff5bdcb6b340da4375ce4",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 662625198,
        "path": "src/companies/dto/register-company.dto.ts",
        "id": 634786160,
        "diff_hunk": "@@ -0,0 +1,26 @@\n+/* eslint-disable max-classes-per-file */\n+import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\n+import { plainToClass, Transform, Type } from 'class-transformer';\n+import { ValidateNested } from 'class-validator';\n+import { CompanyDTO } from './company.dto';\n+import { UserDTO } from '../../users/dto/user.dto';\n+\n+class UserFields extends PickType(UserDTO, [\n+  'email',\n+  'firstName',\n+  'lastName',\n+  'phone',\n+] as const) {}\n+\n+export class RegisterCompanyDTO extends OmitType(CompanyDTO, [\n+  'id',\n+  'createdAt',\n+  'updatedAt',\n+  'users',\n+] as const) {\n+  @ApiProperty()\n+  @Type(() => Object)\n+  @Transform(({ value }) => plainToClass(UserFields, value))",
        "created_at": "2021-05-18T22:15:03Z",
        "body": "What is going here?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 663186613,
        "path": "src/companies/dto/register-company.dto.ts",
        "in_reply_to_id": 634786160,
        "id": 635227221,
        "diff_hunk": "@@ -0,0 +1,26 @@\n+/* eslint-disable max-classes-per-file */\n+import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\n+import { plainToClass, Transform, Type } from 'class-transformer';\n+import { ValidateNested } from 'class-validator';\n+import { CompanyDTO } from './company.dto';\n+import { UserDTO } from '../../users/dto/user.dto';\n+\n+class UserFields extends PickType(UserDTO, [\n+  'email',\n+  'firstName',\n+  'lastName',\n+  'phone',\n+] as const) {}\n+\n+export class RegisterCompanyDTO extends OmitType(CompanyDTO, [\n+  'id',\n+  'createdAt',\n+  'updatedAt',\n+  'users',\n+] as const) {\n+  @ApiProperty()\n+  @Type(() => Object)\n+  @Transform(({ value }) => plainToClass(UserFields, value))",
        "created_at": "2021-05-19T13:15:33Z",
        "body": "In order for the user data to be validated on input, the `class-validator` package requires that it be an instance of an actual class.  This just takes the raw JSON assigned and converts it using `plainToClass`."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 663394108,
        "path": "src/companies/dto/register-company.dto.ts",
        "in_reply_to_id": 634786160,
        "id": 635379933,
        "diff_hunk": "@@ -0,0 +1,26 @@\n+/* eslint-disable max-classes-per-file */\n+import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\n+import { plainToClass, Transform, Type } from 'class-transformer';\n+import { ValidateNested } from 'class-validator';\n+import { CompanyDTO } from './company.dto';\n+import { UserDTO } from '../../users/dto/user.dto';\n+\n+class UserFields extends PickType(UserDTO, [\n+  'email',\n+  'firstName',\n+  'lastName',\n+  'phone',\n+] as const) {}\n+\n+export class RegisterCompanyDTO extends OmitType(CompanyDTO, [\n+  'id',\n+  'createdAt',\n+  'updatedAt',\n+  'users',\n+] as const) {\n+  @ApiProperty()\n+  @Type(() => Object)\n+  @Transform(({ value }) => plainToClass(UserFields, value))",
        "created_at": "2021-05-19T15:58:23Z",
        "body": "Does `@Type(() => UserFields)` do the trick for that? We did that on `InvitationsDTO`:\r\n\r\n```\r\nexport class InvitationsDTO {\r\n  @IsArray()\r\n  @ValidateNested({ each: true })\r\n  @Type(() => InviteUserDTO)\r\n  invitations: InviteUserDTO[];\r\n}\r\n```\r\n\r\nAnd the nested validation kicked in."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 663439747,
        "path": "src/companies/dto/register-company.dto.ts",
        "in_reply_to_id": 634786160,
        "id": 635414511,
        "diff_hunk": "@@ -0,0 +1,26 @@\n+/* eslint-disable max-classes-per-file */\n+import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\n+import { plainToClass, Transform, Type } from 'class-transformer';\n+import { ValidateNested } from 'class-validator';\n+import { CompanyDTO } from './company.dto';\n+import { UserDTO } from '../../users/dto/user.dto';\n+\n+class UserFields extends PickType(UserDTO, [\n+  'email',\n+  'firstName',\n+  'lastName',\n+  'phone',\n+] as const) {}\n+\n+export class RegisterCompanyDTO extends OmitType(CompanyDTO, [\n+  'id',\n+  'createdAt',\n+  'updatedAt',\n+  'users',\n+] as const) {\n+  @ApiProperty()\n+  @Type(() => Object)\n+  @Transform(({ value }) => plainToClass(UserFields, value))",
        "created_at": "2021-05-19T16:43:23Z",
        "body": "Possibly.  I can throw that at it and see what happens.  The example above was taken straight from the docs."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 664477606,
        "path": "src/companies/dto/register-company.dto.ts",
        "in_reply_to_id": 634786160,
        "id": 636173053,
        "diff_hunk": "@@ -0,0 +1,26 @@\n+/* eslint-disable max-classes-per-file */\n+import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\n+import { plainToClass, Transform, Type } from 'class-transformer';\n+import { ValidateNested } from 'class-validator';\n+import { CompanyDTO } from './company.dto';\n+import { UserDTO } from '../../users/dto/user.dto';\n+\n+class UserFields extends PickType(UserDTO, [\n+  'email',\n+  'firstName',\n+  'lastName',\n+  'phone',\n+] as const) {}\n+\n+export class RegisterCompanyDTO extends OmitType(CompanyDTO, [\n+  'id',\n+  'createdAt',\n+  'updatedAt',\n+  'users',\n+] as const) {\n+  @ApiProperty()\n+  @Type(() => Object)\n+  @Transform(({ value }) => plainToClass(UserFields, value))",
        "created_at": "2021-05-20T14:43:27Z",
        "body": "Worked.  Much better."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/55",
      "updated_at": "2021-05-18T16:10:46Z",
      "title": "[NO-TICKET] Fixes Jest warnings of worker process failing to exit gracefully",
      "state": "closed",
      "number": 55,
      "merged_at": "2021-05-18T16:10:45Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c6c1b9506ef0362e06a06d503938d7ac7f658a68",
        "ref": "NO-TICKET/fix-worker-process-failed-to-exit-gracefully"
      },
      "created_at": "2021-05-14T19:52:33Z",
      "closed_at": "2021-05-18T16:10:45Z",
      "body": "f37602d5ec0158fdb9d7939a2202273296e2a4a6 introduced this warning from Jest:\r\n\r\n> A worker process has failed to exit gracefully and has been force exited. This is likely caused by tests leaking due to improper teardown. Try running with --detectOpenHandles to find leaks.\r\n\r\nThis solution is to close the db connection from outside the application in an `afterAll`.\r\n\r\nRelated:\r\n\r\nhttps://github.com/facebook/jest/issues/9473\r\n\r\n**Before**\r\n\r\n```\r\nnpm run test\r\nA worker process has failed to exit gracefully and has been force exited. This is likely caused by tests leaking due to improper teardown. Try running with --detectOpenHandles to find leaks.\r\n\r\nTest Suites: 11 passed, 11 total\r\nTests:       25 passed, 25 total\r\nSnapshots:   0 total\r\nTime:        9.341 s, estimated 10 s\r\nRan all test suites.\r\n```\r\n\r\n**After**\r\n\r\n```\r\nnpm run test\r\n\r\nTest Suites: 11 passed, 11 total\r\nTests:       25 passed, 25 total\r\nSnapshots:   0 total\r\nTime:        9.341 s, estimated 10 s\r\nRan all test suites.\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "89d3991e1738c68501519a3a5e1a9566239d9120",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 660956768,
        "path": "src/app.controller.spec.ts",
        "id": 633523028,
        "diff_hunk": "@@ -18,4 +20,9 @@ describe('AppController', () => {\n       expect(appController.getHello()).toEqual(helloWorld);\n     });\n   });\n+\n+  afterAll(() => {\n+    const connection = app.get(Connection);\n+    connection.close();\n+  });",
        "created_at": "2021-05-17T13:20:02Z",
        "body": "Actually, I think a simple `app.close();` would probably be a better choice, since its recommended [in the docs](https://docs.nestjs.com/fundamentals/testing#end-to-end-testing) when tearing down an INestApplication (the example is for e2e testing, but fundamentally its the same).  Also, that's how we're currently tearing down apps in our own [e2e](https://github.com/iMercatus/imercata-backend/blob/main/test/companies.e2e-spec.ts#L33) [tests](https://github.com/iMercatus/imercata-backend/blob/main/test/users.e2e-spec.ts#L50)."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 660956768,
        "path": "src/users/entities/user.entity.spec.ts",
        "id": 633524404,
        "diff_hunk": "@@ -45,4 +45,9 @@ describe('User', () => {\n       expect(u.invitedBy.id).toEqual(admin.id);\n     });\n   });\n+\n+  afterAll(() => {\n+    const connection = app.get(Connection);",
        "created_at": "2021-05-17T13:21:48Z",
        "body": "Same as above.  I'm sure closing the connection will resolve the orphaned resources, but could eventually miss other things, since we're not tearing down the entire `app` object."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 661144038,
        "path": "src/users/entities/user.entity.spec.ts",
        "in_reply_to_id": 633524404,
        "id": 633660527,
        "diff_hunk": "@@ -45,4 +45,9 @@ describe('User', () => {\n       expect(u.invitedBy.id).toEqual(admin.id);\n     });\n   });\n+\n+  afterAll(() => {\n+    const connection = app.get(Connection);",
        "created_at": "2021-05-17T15:59:52Z",
        "body": "[Works perfect](https://github.com/iMercatus/imercata-backend/pull/55/commits/4a6d42eea86ce2d4ea6aa6902ff7de2414416e86) and is proper. Thanks. "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 661144264,
        "path": "src/app.controller.spec.ts",
        "in_reply_to_id": 633523028,
        "id": 633660673,
        "diff_hunk": "@@ -18,4 +20,9 @@ describe('AppController', () => {\n       expect(appController.getHello()).toEqual(helloWorld);\n     });\n   });\n+\n+  afterAll(() => {\n+    const connection = app.get(Connection);\n+    connection.close();\n+  });",
        "created_at": "2021-05-17T16:00:04Z",
        "body": "[Done](https://github.com/iMercatus/imercata-backend/pull/55/commits/4a6d42eea86ce2d4ea6aa6902ff7de2414416e86)."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 661302107,
        "path": "src/app.controller.spec.ts",
        "id": 633784695,
        "diff_hunk": "@@ -18,4 +19,8 @@ describe('AppController', () => {\n       expect(appController.getHello()).toEqual(helloWorld);\n     });\n   });\n+\n+  afterAll(() => {\n+    app.close();",
        "created_at": "2021-05-17T18:53:59Z",
        "body": "I'm fairly certain `app.close()` returns a promise.  You'll probably want to add an await here or use the `done` callback."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 661302107,
        "path": "src/users/entities/user.entity.spec.ts",
        "id": 633784773,
        "diff_hunk": "@@ -45,4 +45,8 @@ describe('User', () => {\n       expect(u.invitedBy.id).toEqual(admin.id);\n     });\n   });\n+\n+  afterAll(() => {\n+    app.close();",
        "created_at": "2021-05-17T18:54:08Z",
        "body": "Same as above."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 661359304,
        "path": "src/app.controller.spec.ts",
        "in_reply_to_id": 633784695,
        "id": 633821846,
        "diff_hunk": "@@ -18,4 +19,8 @@ describe('AppController', () => {\n       expect(appController.getHello()).toEqual(helloWorld);\n     });\n   });\n+\n+  afterAll(() => {\n+    app.close();",
        "created_at": "2021-05-17T19:54:14Z",
        "body": "Thanks, fixed."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/54",
      "updated_at": "2021-05-18T00:29:04Z",
      "title": "[IMERC-126] Map Module, Feature, Permission (no endpoints)",
      "state": "closed",
      "number": 54,
      "merged_at": "2021-05-18T00:29:03Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "3e183686d30b8a8651b5c818614ab62644e0a495",
        "ref": "IMERC-126-map-module-feature-permission-no-endpoints-refactor"
      },
      "created_at": "2021-05-14T00:32:50Z",
      "closed_at": "2021-05-18T00:29:03Z",
      "body": "[IMERC-126 [backend] Map Module, Feature, Permission (no endpoints)](https://imercatus.backlog.com/board/IMERC?selectedIssueKey=IMERC-126&milestone=49489)\r\n\r\nhttps://miro.com/app/board/o9J_lOr57Sw=/?moveToWidget=3074457358103057341&cot=14\r\n\r\nIntroduces a top-level `src/models/` directory that contains `src/models/entities`, the intent is also keep `src/models/dto` and `src/models/serializers` etc there. \r\n\r\nI am open to practical suggestions to simplifying the data model!\r\n\r\n**Some relevant schema:**\r\n\r\n![erd](https://user-images.githubusercontent.com/43570/118313475-9eb2fb00-b4a7-11eb-8a52-e174c4441a59.png)\r\n\r\n```\r\nimercata_test=# \\d mods\r\n                                        Table \"public.mods\"\r\n   Column   |            Type             | Collation | Nullable |             Default\r\n------------+-----------------------------+-----------+----------+----------------------------------\r\n id         | integer                     |           | not null | nextval('mods_id_seq'::regclass)\r\n name       | character varying(100)      |           | not null |\r\n created_at | timestamp without time zone |           | not null | CURRENT_TIMESTAMP\r\n updated_at | timestamp without time zone |           | not null | CURRENT_TIMESTAMP\r\nIndexes:\r\n    \"PK_5e0ced6abe92940577832c70cd4\" PRIMARY KEY, btree (id)\r\nReferenced by:\r\n    TABLE \"features\" CONSTRAINT \"FK_FEATURES_MOD_ID\" FOREIGN KEY (mod_id) REFERENCES mods(id) ON DELETE CASCADE\r\n\r\nimercata_test=# \\d features\r\n                                        Table \"public.features\"\r\n   Column   |            Type             | Collation | Nullable |               Default\r\n------------+-----------------------------+-----------+----------+--------------------------------------\r\n id         | integer                     |           | not null | nextval('features_id_seq'::regclass)\r\n name       | character varying(100)      |           | not null |\r\n mod_id     | integer                     |           | not null |\r\n created_at | timestamp without time zone |           | not null | CURRENT_TIMESTAMP\r\n updated_at | timestamp without time zone |           | not null | CURRENT_TIMESTAMP\r\nIndexes:\r\n    \"PK_5c1e336df2f4a7051e5bf08a941\" PRIMARY KEY, btree (id)\r\n    \"IDX_FEATURES_MOD_ID\" btree (mod_id)\r\nForeign-key constraints:\r\n    \"FK_FEATURES_MOD_ID\" FOREIGN KEY (mod_id) REFERENCES mods(id) ON DELETE CASCADE\r\nReferenced by:\r\n    TABLE \"permissions\" CONSTRAINT \"FK_PERMISSIONS_FEATURE_ID\" FOREIGN KEY (feature_id) REFERENCES features(id) ON DELETE CASCADE\r\n\r\nimercata_test=# \\d permissions\r\n                                         Table \"public.permissions\"\r\n    Column    |            Type             | Collation | Nullable |                 Default\r\n--------------+-----------------------------+-----------+----------+-----------------------------------------\r\n id           | integer                     |           | not null | nextval('permissions_id_seq'::regclass)\r\n access_level | character varying(100)      |           |          |\r\n feature_id   | integer                     |           | not null |\r\n created_at   | timestamp without time zone |           | not null | CURRENT_TIMESTAMP\r\n updated_at   | timestamp without time zone |           | not null | CURRENT_TIMESTAMP\r\nIndexes:\r\n    \"PK_920331560282b8bd21bb02290df\" PRIMARY KEY, btree (id)\r\n    \"IDX_PERMISSIONS_FEATURE_ID\" btree (feature_id)\r\nForeign-key constraints:\r\n    \"FK_PERMISSIONS_FEATURE_ID\" FOREIGN KEY (feature_id) REFERENCES features(id) ON DELETE CASCADE\r\nReferenced by:\r\n    TABLE \"admin_roles_permissions\" CONSTRAINT \"FK_ADMIN_ROLES_PERMISSIONS_PERMISSION_ID\" FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE\r\n\r\nimercata_test=# \\d admin_roles_permissions\r\n                                          Table \"public.admin_roles_permissions\"\r\n    Column     |            Type             | Collation | Nullable |                       Default\r\n---------------+-----------------------------+-----------+----------+-----------------------------------------------------\r\n id            | integer                     |           | not null | nextval('admin_roles_permissions_id_seq'::regclass)\r\n created_at    | timestamp without time zone |           | not null | CURRENT_TIMESTAMP\r\n updated_at    | timestamp without time zone |           | not null | CURRENT_TIMESTAMP\r\n permission_id | integer                     |           | not null |\r\n admin_role_id | integer                     |           | not null |\r\nIndexes:\r\n    \"PK_896735b89ee2d55747aa11d391a\" PRIMARY KEY, btree (id)\r\n    \"IDX_ADMIN_ROLES_PERMISSIONS_PERMISSION_ID\" btree (permission_id)\r\n    \"IDX_ADMIN_ROLES_PERMISSIONS_ROLE_ID\" btree (admin_role_id)\r\nForeign-key constraints:\r\n    \"FK_ADMIN_ROLES_PERMISSIONS_PERMISSION_ID\" FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE\r\n    \"FK_ADMIN_ROLES_PERMISSIONS_ROLE_ID\" FOREIGN KEY (admin_role_id) REFERENCES admin_roles(id) ON DELETE CASCADE\r\n\r\nimercata_test=# \\d admin_roles\r\n                                        Table \"public.admin_roles\"\r\n   Column   |            Type             | Collation | Nullable |                 Default\r\n------------+-----------------------------+-----------+----------+-----------------------------------------\r\n id         | integer                     |           | not null | nextval('admin_roles_id_seq'::regclass)\r\n name       | character varying(100)      |           | not null |\r\n company_id | integer                     |           | not null |\r\n created_at | timestamp without time zone |           | not null | CURRENT_TIMESTAMP\r\n updated_at | timestamp without time zone |           | not null | CURRENT_TIMESTAMP\r\nIndexes:\r\n    \"PK_091baca34754e848b9f8c4e7be9\" PRIMARY KEY, btree (id)\r\n    \"IDX_ADMIN_ROLES_COMPANY_ID\" btree (company_id)\r\nForeign-key constraints:\r\n    \"FK_ADMIN_ROLES_COMPANY_ID\" FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE\r\nReferenced by:\r\n    TABLE \"admin_roles_permissions\" CONSTRAINT \"FK_ADMIN_ROLES_PERMISSIONS_ROLE_ID\" FOREIGN KEY (admin_role_id) REFERENCES admin_roles(id) ON DELETE CASCADE\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "89d3991e1738c68501519a3a5e1a9566239d9120",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 659530200,
        "path": "src/services/authorization.spec.ts",
        "id": 632287463,
        "diff_hunk": "@@ -0,0 +1,166 @@\n+import { INestApplication } from '@nestjs/common';\n+import { getRepository, Repository } from 'typeorm';\n+import { initTestingModule } from '../../test/utils/app-testing-module';\n+import { TestDBManager } from '../../test/utils/test-db-manager';\n+import { Company } from '../companies/entities/company.entity';\n+import { Feature } from '../models/entities/feature.entity';\n+import { Mod } from '../models/entities/mod.entity';\n+import { Permission, AccessLevels } from '../models/entities/permission.entity';\n+import { AdminRole } from '../models/entities/admin-role.entity';\n+import featuresFactory from '../../test/factories/features.factory';\n+import modsFactory from '../../test/factories/mods.factory';\n+import permissionsFactory from '../../test/factories/permissions.factory';\n+import adminRolesFactory from '../../test/factories/admin-roles.factory';\n+import companiesFactory from '../companies/companies.factory';\n+import { User } from '../users/entities/user.entity';\n+import usersFactory from '../users/users.factory';\n+\n+jest.useFakeTimers();\n+\n+describe('Authorization relationships', () => {",
        "created_at": "2021-05-14T05:16:55Z",
        "body": "I made one large relationship integration spec, in order to reduce the scope of files and LOC. This was very helpful in the development process. I am open to deleting if we think it is testing `TyoeORM` too exclusively. "
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 661021150,
        "path": "src/migrations/1620938815479-AddAdminRoleToUsers.ts",
        "id": 633569908,
        "diff_hunk": "@@ -0,0 +1,42 @@\n+import {\n+  MigrationInterface,\n+  QueryRunner,\n+  TableColumn,\n+  TableIndex,\n+  TableForeignKey,\n+} from 'typeorm';\n+\n+export class AddAdminRoleToUsers1620938815479 implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.addColumns('users', [\n+      new TableColumn({\n+        name: 'admin_role_id',\n+        type: 'int',\n+        isNullable: true,\n+      }),\n+    ]);\n+    await queryRunner.createForeignKey(\n+      'users',\n+      new TableForeignKey({\n+        name: 'FK_USERS_ADMIN_ROLE_ID',\n+        columnNames: ['admin_role_id'],\n+        referencedTableName: 'admin_roles',\n+        referencedColumnNames: ['id'],\n+        onDelete: 'CASCADE',\n+      }),\n+    );\n+    await queryRunner.createIndex(\n+      'users',\n+      new TableIndex({\n+        name: 'IDX_USERS_ADMIN_ROLE_ID',\n+        columnNames: ['admin_role_id'],\n+      }),\n+    );\n+  }\n+\n+  public async down(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.dropForeignKey('users', 'FK_USERS_ADMIN_ROLE_ID');\n+    await queryRunner.dropIndex('users', 'IDX_USERS_ADMIN_ROLE_ID');\n+    await queryRunner.dropColumn('users', 'admin_role_id');",
        "created_at": "2021-05-17T14:15:37Z",
        "body": "why does the other scripts don't have `dropIndex` and `dropForeignKey`?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 661021150,
        "path": "src/migrations/1620938815479-AddAdminRoleToUsers.ts",
        "in_reply_to_id": 633569908,
        "id": 633570779,
        "diff_hunk": "@@ -0,0 +1,42 @@\n+import {\n+  MigrationInterface,\n+  QueryRunner,\n+  TableColumn,\n+  TableIndex,\n+  TableForeignKey,\n+} from 'typeorm';\n+\n+export class AddAdminRoleToUsers1620938815479 implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.addColumns('users', [\n+      new TableColumn({\n+        name: 'admin_role_id',\n+        type: 'int',\n+        isNullable: true,\n+      }),\n+    ]);\n+    await queryRunner.createForeignKey(\n+      'users',\n+      new TableForeignKey({\n+        name: 'FK_USERS_ADMIN_ROLE_ID',\n+        columnNames: ['admin_role_id'],\n+        referencedTableName: 'admin_roles',\n+        referencedColumnNames: ['id'],\n+        onDelete: 'CASCADE',\n+      }),\n+    );\n+    await queryRunner.createIndex(\n+      'users',\n+      new TableIndex({\n+        name: 'IDX_USERS_ADMIN_ROLE_ID',\n+        columnNames: ['admin_role_id'],\n+      }),\n+    );\n+  }\n+\n+  public async down(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.dropForeignKey('users', 'FK_USERS_ADMIN_ROLE_ID');\n+    await queryRunner.dropIndex('users', 'IDX_USERS_ADMIN_ROLE_ID');\n+    await queryRunner.dropColumn('users', 'admin_role_id');",
        "created_at": "2021-05-17T14:16:33Z",
        "body": "oh, because they are `dropTable`? if so, just \"resolve\" this üôÇ"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 661021150,
        "path": "src/models/entities/permission.entity.ts",
        "id": 633571690,
        "diff_hunk": "@@ -0,0 +1,43 @@\n+import { Column, Entity, ManyToOne, ManyToMany, JoinTable } from 'typeorm';\n+import { IsEnum } from 'class-validator';\n+import { BaseEntity } from '../../shared/base.entity';\n+/* eslint-disable import/no-cycle */",
        "created_at": "2021-05-17T14:17:40Z",
        "body": "why don't you disable this rule once for all? it is starting to get repeated over and over through the code"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 661021150,
        "path": "src/services/authorization.spec.ts",
        "id": 633573546,
        "diff_hunk": "@@ -0,0 +1,182 @@\n+import { INestApplication } from '@nestjs/common';\n+import { getRepository, Repository } from 'typeorm';\n+import { initTestingModule } from '../../test/utils/app-testing-module';\n+import { TestDBManager } from '../../test/utils/test-db-manager';\n+import { Company } from '../companies/entities/company.entity';\n+import { Feature } from '../models/entities/feature.entity';\n+import { Mod } from '../models/entities/mod.entity';\n+import { Permission, AccessLevels } from '../models/entities/permission.entity';\n+import { AdminRole } from '../models/entities/admin-role.entity';\n+import featuresFactory from '../../test/factories/features.factory';\n+import modsFactory from '../../test/factories/mods.factory';\n+import permissionsFactory from '../../test/factories/permissions.factory';\n+import adminRolesFactory from '../../test/factories/admin-roles.factory';\n+import companiesFactory from '../companies/companies.factory';\n+import { User } from '../users/entities/user.entity';\n+import usersFactory from '../users/users.factory';\n+\n+jest.useFakeTimers();\n+\n+describe('Authorization relationships', () => {\n+  let app: INestApplication;\n+  let dbManager: TestDBManager;\n+  let featuresRepo: Repository<Feature>;\n+  let usersRepo: Repository<User>;\n+  let adminRolesRepo: Repository<AdminRole>;\n+  let permissionsRepo: Repository<Permission>;\n+  let modsRepo: Repository<Mod>;\n+\n+  let mod: Mod;\n+  let feature: Feature;\n+  let permission: Permission;\n+  let adminRole: AdminRole;\n+  let adminRoles: AdminRole[];\n+  let company: Company;\n+  let user: User;\n+\n+  beforeAll(async () => {\n+    app = await initTestingModule();\n+    dbManager = new TestDBManager(app);\n+    featuresRepo = getRepository(Feature);\n+    usersRepo = getRepository(User);\n+    adminRolesRepo = getRepository(AdminRole);\n+    permissionsRepo = getRepository(Permission);\n+    modsRepo = getRepository(Mod);\n+  });\n+\n+  beforeEach(async () => {\n+    await dbManager.prepareDatabase();\n+\n+    mod = await modsFactory.create({ name: 'Company Management' });\n+    feature = await featuresFactory.create(\n+      { name: 'Company Personnel' },\n+      { associations: { mod } },\n+    );\n+    company = await companiesFactory.create({});\n+    adminRole = await adminRolesFactory.create(\n+      {},\n+      { associations: { company } },\n+    );\n+    adminRoles = [adminRole];\n+    user = await usersFactory.create(\n+      {},\n+      { associations: { company, adminRole } },\n+    );\n+    permission = await permissionsFactory.create(\n+      { accessLevel: AccessLevels.EDIT },\n+      { associations: { feature, adminRoles } },\n+    );\n+  });\n+\n+  afterEach(async () => {\n+    await dbManager.clearDatabase();\n+  });\n+\n+  describe('User', () => {\n+    it('has one admin role', async () => {\n+      const u = await usersRepo.findOne(user.id, { relations: ['adminRole'] });\n+      expect(u.adminRole.id).toEqual(adminRoles[0].id);\n+    });\n+  });\n+\n+  describe('AdminRole', () => {\n+    it('has one company', async () => {\n+      const a = await adminRolesRepo.findOne(adminRole.id);\n+      expect(a.company.id).toEqual(company.id);\n+    });\n+\n+    it('has many permissions', async () => {\n+      const a = await adminRolesRepo.findOne(adminRole.id, {\n+        relations: ['permissions'],\n+      });\n+      expect(a.permissions).toContainEqual(\n+        expect.objectContaining({\n+          id: permission.id,\n+          accessLevel: AccessLevels.EDIT,\n+        }),\n+      );\n+    });\n+\n+    fit('has many users', async () => {",
        "created_at": "2021-05-17T14:19:45Z",
        "body": "I think you want to remove this f (`fit`)?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 661021150,
        "path": "src/services/authorization.spec.ts",
        "in_reply_to_id": 632287463,
        "id": 633578178,
        "diff_hunk": "@@ -0,0 +1,166 @@\n+import { INestApplication } from '@nestjs/common';\n+import { getRepository, Repository } from 'typeorm';\n+import { initTestingModule } from '../../test/utils/app-testing-module';\n+import { TestDBManager } from '../../test/utils/test-db-manager';\n+import { Company } from '../companies/entities/company.entity';\n+import { Feature } from '../models/entities/feature.entity';\n+import { Mod } from '../models/entities/mod.entity';\n+import { Permission, AccessLevels } from '../models/entities/permission.entity';\n+import { AdminRole } from '../models/entities/admin-role.entity';\n+import featuresFactory from '../../test/factories/features.factory';\n+import modsFactory from '../../test/factories/mods.factory';\n+import permissionsFactory from '../../test/factories/permissions.factory';\n+import adminRolesFactory from '../../test/factories/admin-roles.factory';\n+import companiesFactory from '../companies/companies.factory';\n+import { User } from '../users/entities/user.entity';\n+import usersFactory from '../users/users.factory';\n+\n+jest.useFakeTimers();\n+\n+describe('Authorization relationships', () => {",
        "created_at": "2021-05-17T14:24:54Z",
        "body": "I think this kind of test is important. Like I read the other day, even if the library in question is heavily tested, we need to rule out library misuse."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 661021150,
        "path": "src/users/users.factory.ts",
        "id": 633578848,
        "diff_hunk": "@@ -2,6 +2,7 @@ import { Factory } from 'fishery';\n import { getRepository, Repository } from 'typeorm';\n import { Company } from '../companies/entities/company.entity';\n import companiesFactory from '../companies/companies.factory';\n+// import adminRolesFactory from '../../test/factories/admin-roles.factory';",
        "created_at": "2021-05-17T14:25:37Z",
        "body": "‚úÇÔ∏è"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 661124267,
        "path": "src/services/authorization.spec.ts",
        "in_reply_to_id": 633573546,
        "id": 633645849,
        "diff_hunk": "@@ -0,0 +1,182 @@\n+import { INestApplication } from '@nestjs/common';\n+import { getRepository, Repository } from 'typeorm';\n+import { initTestingModule } from '../../test/utils/app-testing-module';\n+import { TestDBManager } from '../../test/utils/test-db-manager';\n+import { Company } from '../companies/entities/company.entity';\n+import { Feature } from '../models/entities/feature.entity';\n+import { Mod } from '../models/entities/mod.entity';\n+import { Permission, AccessLevels } from '../models/entities/permission.entity';\n+import { AdminRole } from '../models/entities/admin-role.entity';\n+import featuresFactory from '../../test/factories/features.factory';\n+import modsFactory from '../../test/factories/mods.factory';\n+import permissionsFactory from '../../test/factories/permissions.factory';\n+import adminRolesFactory from '../../test/factories/admin-roles.factory';\n+import companiesFactory from '../companies/companies.factory';\n+import { User } from '../users/entities/user.entity';\n+import usersFactory from '../users/users.factory';\n+\n+jest.useFakeTimers();\n+\n+describe('Authorization relationships', () => {\n+  let app: INestApplication;\n+  let dbManager: TestDBManager;\n+  let featuresRepo: Repository<Feature>;\n+  let usersRepo: Repository<User>;\n+  let adminRolesRepo: Repository<AdminRole>;\n+  let permissionsRepo: Repository<Permission>;\n+  let modsRepo: Repository<Mod>;\n+\n+  let mod: Mod;\n+  let feature: Feature;\n+  let permission: Permission;\n+  let adminRole: AdminRole;\n+  let adminRoles: AdminRole[];\n+  let company: Company;\n+  let user: User;\n+\n+  beforeAll(async () => {\n+    app = await initTestingModule();\n+    dbManager = new TestDBManager(app);\n+    featuresRepo = getRepository(Feature);\n+    usersRepo = getRepository(User);\n+    adminRolesRepo = getRepository(AdminRole);\n+    permissionsRepo = getRepository(Permission);\n+    modsRepo = getRepository(Mod);\n+  });\n+\n+  beforeEach(async () => {\n+    await dbManager.prepareDatabase();\n+\n+    mod = await modsFactory.create({ name: 'Company Management' });\n+    feature = await featuresFactory.create(\n+      { name: 'Company Personnel' },\n+      { associations: { mod } },\n+    );\n+    company = await companiesFactory.create({});\n+    adminRole = await adminRolesFactory.create(\n+      {},\n+      { associations: { company } },\n+    );\n+    adminRoles = [adminRole];\n+    user = await usersFactory.create(\n+      {},\n+      { associations: { company, adminRole } },\n+    );\n+    permission = await permissionsFactory.create(\n+      { accessLevel: AccessLevels.EDIT },\n+      { associations: { feature, adminRoles } },\n+    );\n+  });\n+\n+  afterEach(async () => {\n+    await dbManager.clearDatabase();\n+  });\n+\n+  describe('User', () => {\n+    it('has one admin role', async () => {\n+      const u = await usersRepo.findOne(user.id, { relations: ['adminRole'] });\n+      expect(u.adminRole.id).toEqual(adminRoles[0].id);\n+    });\n+  });\n+\n+  describe('AdminRole', () => {\n+    it('has one company', async () => {\n+      const a = await adminRolesRepo.findOne(adminRole.id);\n+      expect(a.company.id).toEqual(company.id);\n+    });\n+\n+    it('has many permissions', async () => {\n+      const a = await adminRolesRepo.findOne(adminRole.id, {\n+        relations: ['permissions'],\n+      });\n+      expect(a.permissions).toContainEqual(\n+        expect.objectContaining({\n+          id: permission.id,\n+          accessLevel: AccessLevels.EDIT,\n+        }),\n+      );\n+    });\n+\n+    fit('has many users', async () => {",
        "created_at": "2021-05-17T15:42:05Z",
        "body": "Derp. Thanks, done."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 661132950,
        "path": "src/models/entities/permission.entity.ts",
        "in_reply_to_id": 633571690,
        "id": 633652216,
        "diff_hunk": "@@ -0,0 +1,43 @@\n+import { Column, Entity, ManyToOne, ManyToMany, JoinTable } from 'typeorm';\n+import { IsEnum } from 'class-validator';\n+import { BaseEntity } from '../../shared/base.entity';\n+/* eslint-disable import/no-cycle */",
        "created_at": "2021-05-17T15:49:44Z",
        "body": "Done."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 661310233,
        "path": "src/app.module.ts",
        "id": 633790120,
        "diff_hunk": "@@ -9,6 +9,10 @@ import configuration from './config/configuration';\n import validation from './config/validation';\n import { UsersModule } from './users/users.module';\n import { UsersController } from './users/users.controller';\n+import { AdminRole } from './models/entities/admin-role.entity';\n+import { Permission } from './models/entities/permission.entity';\n+import { Mod } from './models/entities/mod.entity';\n+import { Feature } from './models/entities/feature.entity';",
        "created_at": "2021-05-17T19:02:30Z",
        "body": "There are 2 more things I think could be done to help clean this up even further:\r\n\r\n1. Add an `index.ts` file to the `./models/entities/` directory (and `/models/dto`, etc).\r\n2. Setup aliases for the top-level directories, so we can reference them consistently (such as `@/models` for `/src/models`)."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 661355586,
        "path": "src/app.module.ts",
        "in_reply_to_id": 633790120,
        "id": 633818996,
        "diff_hunk": "@@ -9,6 +9,10 @@ import configuration from './config/configuration';\n import validation from './config/validation';\n import { UsersModule } from './users/users.module';\n import { UsersController } from './users/users.controller';\n+import { AdminRole } from './models/entities/admin-role.entity';\n+import { Permission } from './models/entities/permission.entity';\n+import { Mod } from './models/entities/mod.entity';\n+import { Feature } from './models/entities/feature.entity';",
        "created_at": "2021-05-17T19:49:13Z",
        "body": "We decided on an individual story for this in our call.\r\n"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/53",
      "updated_at": "2021-05-13T18:11:53Z",
      "title": "[no-issue] - Add and configure a REPL.",
      "state": "closed",
      "number": 53,
      "merged_at": "2021-05-13T18:11:52Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "6b83787d025d9bc073d2e61bd0a6fc9d3e65f9fd",
        "ref": "no-issue/repl"
      },
      "created_at": "2021-05-13T16:13:47Z",
      "closed_at": "2021-05-13T18:11:52Z",
      "body": "Its a bit \"some assembly required\", but basically you have access to the root `app` object (an instance of our NestJS application).\r\n\r\nSo you can do things like:\r\n```typescript\r\n> const usersService = app.get('UsersService');\r\n```\r\n\r\nI don't have any more examples at the moment, but I'm sure we can find a use for it.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "0a0c27a9b9ab01faaa43b43f48e9fdf5164d9528",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "xiang",
        "html_url": "https://github.com/xiang"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/52",
      "updated_at": "2021-05-13T02:49:39Z",
      "title": "pull base image from ECR",
      "state": "closed",
      "number": 52,
      "merged_at": "2021-05-13T02:49:39Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e2f72a7035d8b206846e8c6c5cf736845a79f44b",
        "ref": "IMERC-150"
      },
      "created_at": "2021-05-12T22:59:49Z",
      "closed_at": "2021-05-13T02:49:39Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "eed609e6d4d24a9211ba9a75f4c717fe9bd3af79",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/51",
      "updated_at": "2021-05-12T20:00:50Z",
      "title": "Ensure unit test config uses the globals-setup intending for Jest",
      "state": "closed",
      "number": 51,
      "merged_at": "2021-05-12T20:00:29Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "af841f0ce577969181eab84cf337c14b37b5f0c1",
        "ref": "no-ticket/ensure-unit-jest-globals-setup"
      },
      "created_at": "2021-05-12T18:54:55Z",
      "closed_at": "2021-05-12T20:00:29Z",
      "body": "### Steps to reproduce\r\n\r\n1. Change schema\r\n2. Run unit tests only\r\n\r\n### Expected result\r\n\r\nTemplated databases contain the schema changes\r\n\r\n### Actual result\r\n\r\nTemplated databases contain the old schema\r\n\r\n### Reason\r\n\r\n`test/utils/setup-globals.ts` is not getting called for unit tests.\r\n\r\n\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9adb0b2bbc8fe1aa98e6ee19f78272dff73d25c8",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/50",
      "updated_at": "2021-05-12T19:47:03Z",
      "title": "[IMERC-140] Add invitedBy to users.",
      "state": "closed",
      "number": 50,
      "merged_at": "2021-05-12T19:37:03Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "6c1fbc99b20447dd2904d9057c5ac4c940b62f35",
        "ref": "feature/IMERC-140-users-invited-by"
      },
      "created_at": "2021-05-11T18:02:22Z",
      "closed_at": "2021-05-12T19:37:03Z",
      "body": "https://imercatus.backlog.com/view/IMERC-140\r\n\r\n- [x] Add column to hold inviting user's id\r\n- [x] Add bi-directional relationship\r\n- [x] Inject inviting user when creating the invitation records",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9adb0b2bbc8fe1aa98e6ee19f78272dff73d25c8",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/49",
      "updated_at": "2021-06-29T16:56:26Z",
      "title": "[NO-TICKET] Sprint 3 Wrap",
      "state": "closed",
      "number": 49,
      "merged_at": "2021-05-11T17:08:23Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "f37602d5ec0158fdb9d7939a2202273296e2a4a6",
        "ref": "NO-TICKET/sprint-3-wrap"
      },
      "created_at": "2021-05-10T16:16:35Z",
      "closed_at": "2021-05-11T17:08:23Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "53f0590985d8bdd7216a0ac8faa699fb3225dfa7",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/48",
      "updated_at": "2021-06-29T16:56:35Z",
      "title": "[IMERC-126] Map Module, Feature, Permission (no endpoints)",
      "state": "closed",
      "number": 48,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "fc1b137cea4707505aa184004d75c228eb30072d",
        "ref": "IMERC-126-map-module-feature-permission-no-endpoints"
      },
      "created_at": "2021-05-06T23:23:29Z",
      "closed_at": "2021-05-14T03:05:02Z",
      "body": "[IMERC-126 [backend] Map Module, Feature, Permission (no endpoints)](https://imercatus.backlog.com/board/IMERC?selectedIssueKey=IMERC-126&milestone=49489)\r\n\r\nhttps://miro.com/app/board/o9J_lOr57Sw=/?moveToWidget=3074457358103057341&cot=14",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "eed609e6d4d24a9211ba9a75f4c717fe9bd3af79",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "xiang",
        "html_url": "https://github.com/xiang"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/47",
      "updated_at": "2021-05-06T22:04:59Z",
      "title": "use newer image",
      "state": "closed",
      "number": 47,
      "merged_at": "2021-05-06T22:04:58Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "362fcd0e18010521a639dd8aa0504a220f7332a6",
        "ref": "sfortner/snyk"
      },
      "created_at": "2021-05-06T20:34:05Z",
      "closed_at": "2021-05-06T22:04:59Z",
      "body": "snyk is complaining about debian version",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "3f0fe09467bd478d5b7b140e7a482729a89649b4",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/46",
      "updated_at": "2021-08-16T14:12:28Z",
      "title": "[Snyk] Upgrade pg from 8.5.1 to 8.6.0",
      "state": "closed",
      "number": 46,
      "merged_at": "2021-05-05T14:43:49Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5e1a070716f7f68f712fe27baab67ebc02f194ef",
        "ref": "snyk-upgrade-2ca4616fcea8573b29a8484eaad2d5e7"
      },
      "created_at": "2021-05-05T02:20:13Z",
      "closed_at": "2021-05-05T14:43:49Z",
      "body": "<h3>Snyk has created this PR to upgrade pg from 8.5.1 to 8.6.0.</h3>\n\nAs this is a private repository, Snyk-bot does not have access. Therefore, this PR has been created automatically, but appears to have been created by a real user.</br>\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatusscott/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **21 days ago**, on 2021-04-13.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>pg</b></summary>\n    <ul>\n      <li>\n        <b>8.6.0</b> - <a href=\"https://snyk.io/redirect/github/brianc/node-postgres/releases/tag/pg%408.6.0\">2021-04-13</a></br><p>pg@8.6.0</p>\n      </li>\n      <li>\n        <b>8.5.1</b> - <a href=\"https://snyk.io/redirect/github/brianc/node-postgres/releases/tag/pg%408.5.1\">2020-11-13</a></br><p>pg@8.5.1</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/brianc/node-postgres/releases\">pg GitHub release notes</a>\n  </details>\n</details>\n\n\n<details>\n  <summary><b>Commit messages</b></summary>\n  </br>\n  <details>\n    <summary>Package name: <b>pg</b></summary>\n    <ul>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/d45947938263bec30a1e3252452f04177b785f66\">d459479</a> Publish</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/3115be68902a75834c72a0b72834ff0028b39db6\">3115be6</a> Update changelog</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/8faf8a093722de5be176407bda0e356074a61c60\">8faf8a0</a> fix(pg-cursor): EventEmitter memory leak (#2501)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/d99b5741f82e0ddc109e0ffd08d4cf674c20fd52\">d99b574</a> pg-query-stream: remove through dependency (#2518)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/6121bd3bb0e0e8ef8ec8ad5d02f59fef86b2f992\">6121bd3</a> Add ParameterDescription message to pg-protocol (#2464)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/3dc79b605c9802e67a4263c95e6d4442c1c07ff1\">3dc79b6</a> util in connection not used (#2507)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/4b229275cfe41ca17b7d69bd39f91ada0068a5d0\">4b22927</a> pg: Re-export DatabaseError from &#x27;pg-protocol&#x27; (#2445)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/45fa27ea4ae9a9a9cf78b50b325d8da871b1c796\">45fa27e</a> [pg-protocol] use literals instead of const enum (#2490)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/69af1cc9340a3b25eaabfeb7f4dbce1a34b955f5\">69af1cc</a> Remove dead badge from readme</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/61dfda7439212fbb6637036c3005c7906cd1025b\">61dfda7</a> Update SPONSORS.md</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/2a7c614583f7b9eea7704de1982b11a0534b12e8\">2a7c614</a> Adding pg to peerDependencies (#2471)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/5a41a568624bae71c03d35726bb3fc4084e0dd80\">5a41a56</a> Add missing metadata to package.jsons (#2487)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/25f658f227a1bcbe759423678a7ab4ba8e067994\">25f658f</a> Fix README to separate sponsors onto separate lines (#2459)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/4cb73ebc2c04cd039881a015d623436f26058608\">4cb73eb</a> Bump ini from 1.3.5 to 1.3.8 (#2430)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/b4f61ad4c0250f0dbeb5a748d3e1c0d37e99527c\">b4f61ad</a> update license copyright year (#2450)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/4bc55834b93f945e3b60378db121e739e0950f92\">4bc5583</a> Fix typo (#2442)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/fae2c988700ca98c46a91313b4977dc751cf0b26\">fae2c98</a> Fix typo (#2444)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/3f3f1a77c3a87e42df64c5baaa7d42193b0d8529\">3f3f1a7</a> docs(README.md): add link to documentation repo (#2434)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/daeafe82b4e4053de69ad75ddacde3c572e38402\">daeafe8</a> Make tests pass in github codespaces (#2437)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/a109e8c6d24ab057843ff40385650b4a6f74d015\">a109e8c</a> Add more SASL validation and fix tests (#2436)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/afb3bf3d4363d0696f843a008a78576434496eee\">afb3bf3</a> Document sslmode connection string parameter (#2421)</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/54b87523e29ea53379d7b9a26e45f83886f371af\">54b8752</a> Update changelog for pg-query-stream</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/fa4549af4fc8d1ffdc121c696faa72fc02459f4b\">fa4549a</a> Publish</li>\n      <li><a href=\"https://snyk.io/redirect/github/brianc/node-postgres/commit/5de36c7f7f8776d7e80a0492528f475db550f96e\">5de36c7</a> Update sponsors &amp; readme</li>\n    </ul>\n\n   <a href=\"https://snyk.io/redirect/github/brianc/node-postgres/compare/0b9bb349dcb10f6473737001062082b65efc74be...d45947938263bec30a1e3252452f04177b785f66\">Compare</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIxYmUwOGJmMC1mODBmLTRmOTQtOWRhMC0yYmNkZTk3YWVkODgiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjFiZTA4YmYwLWY4MGYtNGY5NC05ZGEwLTJiY2RlOTdhZWQ4OCJ9fQ==\" width=\"0\" height=\"0\"/><img src=\"https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=pg&from_version=8.5.1&to_version=8.6.0&pr_id=1be08bf0-f80f-4f94-9da0-2bcde97aed88&visibility=false&has_feature_flag=false\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatusscott/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatusscott/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatusscott/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatusscott/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?pkg&#x3D;pg&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"1be08bf0-f80f-4f94-9da0-2bcde97aed88\",\"prPublicId\":\"1be08bf0-f80f-4f94-9da0-2bcde97aed88\",\"dependencies\":[{\"name\":\"pg\",\"from\":\"8.5.1\",\"to\":\"8.6.0\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatusscott/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"87e2f02e-ddbc-4bb7-b086-002440cb0cf2\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-04-13T16:03:59.771Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "458139681c9117e5907ea8ac5498446771509224",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/45",
      "updated_at": "2021-05-05T12:22:53Z",
      "title": "[IMERC-75] Add index route for users.",
      "state": "closed",
      "number": 45,
      "merged_at": "2021-05-05T12:22:52Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "588db882eadd5d3175ee54a0b52c3aa406d6ee8a",
        "ref": "feature/IMERC-75-users-index"
      },
      "created_at": "2021-05-04T18:41:03Z",
      "closed_at": "2021-05-05T12:22:52Z",
      "body": "https://imercatus.backlog.com/view/IMERC-75\r\n\r\n- [x] Add service method to retrieve all users\r\n- [x] Add controller method to return all users\r\n\r\nNo roles or projects included (as they don't exist yet), so not sure if this satisfies the story or not.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "458139681c9117e5907ea8ac5498446771509224",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 651574074,
        "path": "test/users.e2e-spec.ts",
        "id": 626034938,
        "diff_hunk": "@@ -44,6 +44,37 @@ describe('UsersController (e2e)', () => {\n     await app.close();\n   });\n \n+  describe('Listing users', () => {\n+    let result: request.Test;\n+    let user: User;\n+\n+    beforeEach(async () => {\n+      company = await companiesFactory.create();\n+      user = await usersFactory.create({}, { associations: { company } });\n+\n+      result = request(http)\n+        .get(`/companies/${company.id}/users`)\n+        .set('Accept', 'application/json')\n+        .set('Authorization', `Bearer ${accessToken}`);\n+    });\n+\n+    it('should return 200', (done) => result.expect(200, done));\n+\n+    it('should respond with an array of users', (done) =>\n+      result.end((err, res) => {\n+        expect(res.body).toHaveLength(1);\n+        expect(res.body[0]).toMatchObject({\n+          id: user.id,\n+          firstName: user.firstName,\n+          lastName: user.lastName,\n+          email: user.email,\n+          phone: user.phone,\n+          onboardingStep: user.onboardingStep,",
        "created_at": "2021-05-04T19:07:42Z",
        "body": "Test for `status`? It has been merged upstream into `main`."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/44",
      "updated_at": "2021-05-05T18:34:17Z",
      "title": "[IMERC-96] Fetch user invitation, [IMERC-98] Create user from sign up",
      "state": "closed",
      "number": 44,
      "merged_at": "2021-05-05T18:34:17Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9f4cdfc9a67a1c084215c18aa08e57b439b92085",
        "ref": "IMERC-96-BE-fetch-user-invitation"
      },
      "created_at": "2021-05-04T17:55:36Z",
      "closed_at": "2021-05-05T18:34:17Z",
      "body": "[IMERC-96 BE - Fetch user invitation](https://imercatus.backlog.com/view/IMERC-96)\r\n[IMERC-98 BE - Create user from sign up](https://imercatus.backlog.com/view/IMERC-98)\r\n\r\nI ended up not wanting an entity callback to auto generate a user token on insert, I think it is correct to only add populate this field when an invitation is created. I think this can be the responsibility of the User service. Open to feedback on that.\r\n\r\nOther than that, this PR assumes we do a `PATCH` with the user id fetched by the client when they used the user invitation `GET` endpoint. So `IMERC-98` does not require a new endpoint. So:\r\n\r\n1. super admin sends the invite\r\n2. the new user gets the link with the token\r\n3. they click\r\n4. server fetches the token, identify the user\r\n5. user gets redirected to Auth0 to create their creds\r\n6. then gets redirected back to the our sign up flow to complete the personal details\r\n7. `PATCH` the user using leveraging the update user DTO\r\n\r\nOnce the frontend client has the user ID it can step into vanilla REST...\r\n\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "1cea5c59b8e9d5e3d7dc8de150cd330ea0650dde",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/43",
      "updated_at": "2021-05-04T12:57:28Z",
      "title": "[NO-TICKET] Awaiting table cleanup",
      "state": "closed",
      "number": 43,
      "merged_at": "2021-05-04T12:57:28Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c974dfe39dba2951252c71d25dce1e06efa514a4",
        "ref": "NO-TICKET/awaiting-db-cleanup"
      },
      "created_at": "2021-05-04T12:20:18Z",
      "closed_at": "2021-05-04T12:57:28Z",
      "body": "Without the `await`, tables were not being cleaned up. ",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e78b85e830b3736c591157b532fce68d240b0129",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/42",
      "updated_at": "2021-05-04T17:21:52Z",
      "title": "[IMERC-125] Send invitation email",
      "state": "closed",
      "number": 42,
      "merged_at": "2021-05-04T17:21:51Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "761a63b52d706f983eb0f38b1d8746bad2de23c3",
        "ref": "IMERC-125-send-invitation-email"
      },
      "created_at": "2021-04-30T16:43:47Z",
      "closed_at": "2021-05-04T17:21:51Z",
      "body": "[BE - send invitation email](https://imercatus.backlog.com/view/IMERC-125)\r\n\r\n**Implementation notes:**\r\n\r\n- Uses [Juice](https://github.com/Automattic/juice) for inlining CSS and images. Supported [selectors](https://www.campaignmonitor.com/css/).\r\n- [Tables for layout](https://templates.mailchimp.com/development/html/).\r\n- Support two type of Mail config to match the `nodemailer` `sendMail` function's signature: options, these are merged into the `nodemailer` transports, and defaults, a top-level config available in `nodemailer`.\r\n- Adds a `User` status field with a default of pending.\r\n- Checks that user's status is pending in order to send invitation email.\r\n\r\nNote:\r\n\r\nOnce https://github.com/iMercatus/imercata-backend/pull/38 is merged, we will update the company data here. Also, once have user roles, we will update the template data context to use those. For now there are placeholders for those items.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "efcf9250487e8e96ac3dc00e9c0ee4a724a30de9",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 651124540,
        "path": "src/mail/mail.service.ts",
        "id": 625697874,
        "diff_hunk": "@@ -11,11 +12,13 @@ export class MailService {\n \n   constructor(\n     private readonly configService: ConfigService,\n-    @Inject('Transport') public transportAuth: any,\n+    @Inject('Transport') public options: any,\n   ) {\n     const mailConfig = configService.get<MailConfig>('mail');\n \n-    this.transport = nodemailer.createTransport(transportAuth, mailConfig);\n+    Object.assign(options, mailConfig.options);",
        "created_at": "2021-05-04T11:16:44Z",
        "body": "Should this be reversed?  This seems to make it impossible to override the defaults for a single call (like overriding `debug`)."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 651124540,
        "path": "src/migrations/1620072579263-AddStatusToUsers.ts",
        "id": 625698850,
        "diff_hunk": "@@ -0,0 +1,20 @@\n+import { MigrationInterface, QueryRunner, TableColumn } from 'typeorm';\n+import { Status } from '../users/entities/user.entity';\n+\n+export class AddStatusToUsers1620072579263 implements MigrationInterface {",
        "created_at": "2021-05-04T11:18:40Z",
        "body": "The migration looks fine, but you might want to rename the file/migration (if the users -> company migration is newer)."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 651124540,
        "path": "src/users/entities/user.entity.ts",
        "id": 625700005,
        "diff_hunk": "@@ -9,6 +9,10 @@ import {\n } from 'class-validator';\n import { BaseEntity } from '../../shared/base.entity';\n \n+export enum Status {",
        "created_at": "2021-05-04T11:21:00Z",
        "body": "Should we rename this to `UserStatus`?  Worried about confusion later."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 651124540,
        "path": "src/templates/users/invitation.hbs.json",
        "id": 625715343,
        "diff_hunk": "@@ -0,0 +1,9 @@\n+{\n+  \"title\": \"[iMercata] Account details\",\n+  \"userEmail\": \"courtney.arnes@squirrelpipeline.com\",\n+  \"userFirstName\": \"Aragorn\",\n+  \"userDefaultProjectRole\": \"Project Planner\",\n+  \"companyName\": \"Squirrel Pipeline\",\n+  \"companyAdminEmail\": \"sandra.malres@squirrelpipeline.com\",\n+  \"userInvitationUrl\": \"https://imercata.com/users/invitation/l3ski02l\"\n+}",
        "created_at": "2021-05-04T11:49:40Z",
        "body": "Does this file serve a purpose?  I did some brief reading through the nodemailer/nodemailer-express-handlebars docs and didn't find anything."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 651280008,
        "path": "src/mail/mail.service.ts",
        "in_reply_to_id": 625697874,
        "id": 625813058,
        "diff_hunk": "@@ -11,11 +12,13 @@ export class MailService {\n \n   constructor(\n     private readonly configService: ConfigService,\n-    @Inject('Transport') public transportAuth: any,\n+    @Inject('Transport') public options: any,\n   ) {\n     const mailConfig = configService.get<MailConfig>('mail');\n \n-    this.transport = nodemailer.createTransport(transportAuth, mailConfig);\n+    Object.assign(options, mailConfig.options);",
        "created_at": "2021-05-04T14:07:31Z",
        "body": "The intent was that `debug` gets overridden via configs and the options, which is really the transport is handled via injection. The name of options just matches what `nodemailer` calls them, options is mainly the transport."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 651280513,
        "path": "src/users/entities/user.entity.ts",
        "in_reply_to_id": 625700005,
        "id": 625813428,
        "diff_hunk": "@@ -9,6 +9,10 @@ import {\n } from 'class-validator';\n import { BaseEntity } from '../../shared/base.entity';\n \n+export enum Status {",
        "created_at": "2021-05-04T14:07:57Z",
        "body": "Good idea, will do. Thanks."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 651284024,
        "path": "src/templates/users/invitation.hbs.json",
        "in_reply_to_id": 625715343,
        "id": 625816007,
        "diff_hunk": "@@ -0,0 +1,9 @@\n+{\n+  \"title\": \"[iMercata] Account details\",\n+  \"userEmail\": \"courtney.arnes@squirrelpipeline.com\",\n+  \"userFirstName\": \"Aragorn\",\n+  \"userDefaultProjectRole\": \"Project Planner\",\n+  \"companyName\": \"Squirrel Pipeline\",\n+  \"companyAdminEmail\": \"sandra.malres@squirrelpipeline.com\",\n+  \"userInvitationUrl\": \"https://imercata.com/users/invitation/l3ski02l\"\n+}",
        "created_at": "2021-05-04T14:11:05Z",
        "body": "This helps with live rendering, I used it with live template rendering like this: https://github.com/chaliy/vscode-handlebars-preview"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 651301517,
        "path": "src/templates/users/invitation.hbs.json",
        "in_reply_to_id": 625715343,
        "id": 625828484,
        "diff_hunk": "@@ -0,0 +1,9 @@\n+{\n+  \"title\": \"[iMercata] Account details\",\n+  \"userEmail\": \"courtney.arnes@squirrelpipeline.com\",\n+  \"userFirstName\": \"Aragorn\",\n+  \"userDefaultProjectRole\": \"Project Planner\",\n+  \"companyName\": \"Squirrel Pipeline\",\n+  \"companyAdminEmail\": \"sandra.malres@squirrelpipeline.com\",\n+  \"userInvitationUrl\": \"https://imercata.com/users/invitation/l3ski02l\"\n+}",
        "created_at": "2021-05-04T14:26:05Z",
        "body": "üëç "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 651452351,
        "path": "src/migrations/1620072579263-AddStatusToUsers.ts",
        "in_reply_to_id": 625698850,
        "id": 625940728,
        "diff_hunk": "@@ -0,0 +1,20 @@\n+import { MigrationInterface, QueryRunner, TableColumn } from 'typeorm';\n+import { Status } from '../users/entities/user.entity';\n+\n+export class AddStatusToUsers1620072579263 implements MigrationInterface {",
        "created_at": "2021-05-04T16:45:48Z",
        "body": "I rebased on main and then drop/created the test db fresh, this ordering is confirmed to work."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/41",
      "updated_at": "2021-04-29T20:27:59Z",
      "title": "[IMERC-97] Handling the unhandled",
      "state": "closed",
      "number": 41,
      "merged_at": "2021-04-29T20:27:58Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "926b01a137f74d343685ebd01268236c0df7e50c",
        "ref": "IMERC-97/unhandled-exceptions"
      },
      "created_at": "2021-04-29T12:48:40Z",
      "closed_at": "2021-04-29T20:27:58Z",
      "body": "Adding a global exception handled to (try to) handle previously unhandled exceptions.\r\n\r\n## Motivation\r\n\r\nWhile doing some tests, realised that a malformed token would shutdown the system. So, I added this `UnhandledExceptionsFilter` element to the stack and added a e2e test to prevent this particular situation from happening again.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "dfd7eabe4601d4d9c6430a7b1eb0115ae31f1d85",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 648601042,
        "path": "src/shared/unhandled-exceptions.filter.ts",
        "id": 623354554,
        "diff_hunk": "@@ -0,0 +1,49 @@\n+import {\n+  ArgumentsHost,\n+  Catch,\n+  HttpException,\n+  HttpStatus,\n+} from '@nestjs/common';\n+import { APP_FILTER, BaseExceptionFilter } from '@nestjs/core';\n+\n+@Catch()\n+export class UnhandledExceptionsFilter extends BaseExceptionFilter {\n+  // eslint-disable-next-line class-methods-use-this\n+  catch(exception: unknown, host: ArgumentsHost) {\n+    // TODO Offload log data about exceptions caught here\n+    // to something like Datadog or CloudWatch Logs.\n+\n+    const ctx = host.switchToHttp();\n+    const response = ctx.getResponse();\n+    const request = ctx.getRequest();\n+\n+    const status =\n+      exception instanceof HttpException\n+        ? exception.getStatus()",
        "created_at": "2021-04-29T19:51:51Z",
        "body": "I am trying to understand what could be found/handled here other than `HttpStatus.INTERNAL_SERVER_ERROR`. "
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 648604787,
        "path": "src/shared/unhandled-exceptions.filter.ts",
        "in_reply_to_id": 623354554,
        "id": 623357514,
        "diff_hunk": "@@ -0,0 +1,49 @@\n+import {\n+  ArgumentsHost,\n+  Catch,\n+  HttpException,\n+  HttpStatus,\n+} from '@nestjs/common';\n+import { APP_FILTER, BaseExceptionFilter } from '@nestjs/core';\n+\n+@Catch()\n+export class UnhandledExceptionsFilter extends BaseExceptionFilter {\n+  // eslint-disable-next-line class-methods-use-this\n+  catch(exception: unknown, host: ArgumentsHost) {\n+    // TODO Offload log data about exceptions caught here\n+    // to something like Datadog or CloudWatch Logs.\n+\n+    const ctx = host.switchToHttp();\n+    const response = ctx.getResponse();\n+    const request = ctx.getRequest();\n+\n+    const status =\n+      exception instanceof HttpException\n+        ? exception.getStatus()",
        "created_at": "2021-04-29T19:56:35Z",
        "body": "Anything that raises an exception and that is no caught before. For example, something like `throw new TypeError()` on some service layer that the endpoint forgets to properly treat."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/40",
      "updated_at": "2021-04-29T21:41:36Z",
      "title": "[IMERC-89] Create user invitation endpoint",
      "state": "closed",
      "number": 40,
      "merged_at": "2021-04-29T21:41:35Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "1a288c3cf9ff261ab1ee27800b7a921eebfa1f60",
        "ref": "IMERC-89-create-user-invitation-endpoint"
      },
      "created_at": "2021-04-28T21:13:59Z",
      "closed_at": "2021-04-29T21:41:35Z",
      "body": "[IMERC-89 BE - create user invitation endpoint](https://imercatus.backlog.com/view/IMERC-89)\r\n\r\nNote: Invitations are an array of objects, because shortly we will add in default project and admin roles once we know what they look like on the backend in Sprint 4.\r\n\r\n**Request**\r\n```\r\ncurl -X 'POST' \\\r\n  'http://[::1]:3000/users/invite' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"invitations\": [\r\n    {\r\n      \"email\": \"bob.smith@example.com\",\r\n    },\r\n    {\r\n      \"email\": \"foo@example.com\"\r\n    }\r\n  ]\r\n}'\r\n```\r\n\r\n**Response**\r\n\r\nI went with a consistent response as the rest of the`User` resource verbs:\r\n\r\n```\r\n    [\r\n      {\r\n        id: 1082,\r\n        createdAt: '2021-04-28T22:27:23.749Z',\r\n        updatedAt: '2021-04-28T22:27:23.749Z',\r\n        firstName: null,\r\n        lastName: null,\r\n        email: 'bob.smith@example.com',\r\n        phone: null,\r\n        onboardingStep: 1,\r\n        sub: null\r\n      },\r\n      {\r\n        id: 1083,\r\n        createdAt: '2021-04-28T22:27:23.749Z',\r\n        updatedAt: '2021-04-28T22:27:23.749Z',\r\n        firstName: null,\r\n        lastName: null,\r\n        email: 'foo@example.com',\r\n        phone: null,\r\n        onboardingStep: 1,\r\n        sub: null\r\n      }\r\n    ]\r\n```\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "dfd7eabe4601d4d9c6430a7b1eb0115ae31f1d85",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 648166915,
        "path": "src/migrations/1619557498756-ChangeUserColumns.ts",
        "id": 623022995,
        "diff_hunk": "@@ -0,0 +1,128 @@\n+import { MigrationInterface, QueryRunner, TableColumn } from 'typeorm';\n+\n+export class ChangeUserColumns1619557498756 implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.changeColumn(\n+      'users',\n+      'first_name',\n+      new TableColumn({\n+        name: 'first_name',\n+        type: 'varchar',\n+        isNullable: true,\n+        length: '100',\n+      }),\n+    );\n+    await queryRunner.changeColumn(\n+      'users',\n+      'last_name',\n+      new TableColumn({\n+        name: 'last_name',\n+        type: 'varchar',\n+        isNullable: true,\n+        length: '100',\n+      }),\n+    );\n+    await queryRunner.changeColumn(\n+      'users',\n+      'email',\n+      new TableColumn({\n+        name: 'email',\n+        type: 'varchar',\n+        isNullable: true,",
        "created_at": "2021-04-29T12:53:31Z",
        "body": "why is email nullable? I might find the answer below (and forget to delete this comment)"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 648166915,
        "path": "src/users/entities/user.entity.ts",
        "id": 623026618,
        "diff_hunk": "@@ -56,7 +56,7 @@ export class User extends BaseEntity {\n   @IsIn([1, 2, 3, 4])\n   @ApiProperty({\n     type: 'number',\n-    enum: [1, 2, 3, 4],\n+    enum: [0, 1, 2, 3, 4],",
        "created_at": "2021-04-29T12:58:06Z",
        "body": "Why do we need 0? It looks to me that:\r\n\r\n- `1`: user didn't put his name and phone number yet (so he is at the very first step)\r\n- `2`: user didn't select company type yet\r\n- ...\r\n- `4`: user is ready to see the dashboard\r\n\r\nSo, for invitations, I feel like they are all gonna be `1` by default, no?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 648166915,
        "path": "src/users/dto/invite-user.dto.ts",
        "id": 623027716,
        "diff_hunk": "@@ -0,0 +1,4 @@\n+import { PickType } from '@nestjs/swagger';\n+import { User } from '../entities/user.entity';\n+\n+export class InviteUserDTO extends PickType(User, ['email'] as const) {}",
        "created_at": "2021-04-29T12:59:16Z",
        "body": "out of curiosity, anyone knows why do they use `as const` on the docs? while testing, it looked to me that it is not needed."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 648166915,
        "path": "src/users/users.service.ts",
        "id": 623032604,
        "diff_hunk": "@@ -26,4 +26,15 @@ export class UsersService {\n   update(id: number, userAttributes: Partial<User>) {\n     return this.userRepository.update(id, userAttributes);\n   }\n+\n+  async createUsersByInvitations(invitations): Promise<User[]> {\n+    const result = await this.userRepository\n+      .createQueryBuilder()\n+      .insert()\n+      .values(invitations)\n+      .returning('*')\n+      .execute();\n+\n+    return plainToClass(User, result.generatedMaps);",
        "created_at": "2021-04-29T13:05:29Z",
        "body": "is this really needed? I mean, in runtime, isn't the result of `generatedMaps` in the structure we need? If that is the case, we could safely use `as User[]`:\r\n\r\n```ts\r\nreturn result.generatedMaps as User[];\r\n```"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 648166915,
        "path": "test/users.e2e-spec.ts",
        "id": 623038291,
        "diff_hunk": "@@ -228,4 +230,79 @@ describe('UsersController (e2e)', () => {\n         }));\n     });\n   });\n+\n+  describe('Creating users by invitations', () => {\n+    let result: request.Test;\n+    let user: User;\n+    let invitationsDTO: InvitationsDTO;\n+    let inviteUserDTO: InviteUserDTO;\n+\n+    beforeEach(async () => {\n+      user = await usersFactory.create();\n+    });\n+\n+    describe('with valid arguments', () => {\n+      beforeEach(() => {\n+        inviteUserDTO = { email: user.email };",
        "created_at": "2021-04-29T13:12:29Z",
        "body": "what does it mean to invite an already-existing user? Is this the result we should send (`HTTP 201`)? I think we might have talked about this and the idea was just to validate the format of the emails, but I'm wondering about what we talked in the past related to unique email addresses.\r\n\r\nRight now I feel like we should validate against duplicates and send something like `duplicateEmails: [\"a@b.c\", \"b@b.c\"]`. Thoughts?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 648166915,
        "path": "test/users.e2e-spec.ts",
        "id": 623039972,
        "diff_hunk": "@@ -228,4 +230,79 @@ describe('UsersController (e2e)', () => {\n         }));\n     });\n   });\n+\n+  describe('Creating users by invitations', () => {\n+    let result: request.Test;\n+    let user: User;\n+    let invitationsDTO: InvitationsDTO;\n+    let inviteUserDTO: InviteUserDTO;\n+\n+    beforeEach(async () => {\n+      user = await usersFactory.create();\n+    });\n+\n+    describe('with valid arguments', () => {\n+      beforeEach(() => {\n+        inviteUserDTO = { email: user.email };\n+        invitationsDTO = {\n+          invitations: [inviteUserDTO, { email: 'foo@example.com' }],\n+        };\n+        result = request(http)\n+          .post(`/users/invite`)\n+          .send(invitationsDTO)\n+          .set('Accept', 'application/json')\n+          .set('Content-Type', 'application/json')\n+          .set('Authorization', `Bearer ${accessToken}`);\n+      });\n+\n+      it('should return 201 (Created)', () => result.expect(201));\n+\n+      it('should respond with the new user', (done) =>\n+        result.end((err, res) => {\n+          expect(res.body.length).toBe(2);\n+\n+          const createdUser = res.body[0];\n+          expect(createdUser).toMatchObject({\n+            firstName: null,\n+            lastName: null,\n+            email: inviteUserDTO.email,\n+            phone: null,\n+            onboardingStep: 0,\n+            sub: null,\n+          });",
        "created_at": "2021-04-29T13:14:27Z",
        "body": "yeah, I feel like we do need to check for duplicates... otherwise we might end up with a bunch of `a@b.c` just because the user forgot that he already invited this particular person. Or, even worse, the frontend didn't properly informed the user that the first attempt to invite the users worked and the current user hits \"invite\" again"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 648214113,
        "path": "src/users/entities/user.entity.ts",
        "in_reply_to_id": 623026618,
        "id": 623058393,
        "diff_hunk": "@@ -56,7 +56,7 @@ export class User extends BaseEntity {\n   @IsIn([1, 2, 3, 4])\n   @ApiProperty({\n     type: 'number',\n-    enum: [1, 2, 3, 4],\n+    enum: [0, 1, 2, 3, 4],",
        "created_at": "2021-04-29T13:35:44Z",
        "body": "I was thinking it represented they had not reached the point to enter name and phone. I can go with the above too, that was my original thinking."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 648223385,
        "path": "src/migrations/1619557498756-ChangeUserColumns.ts",
        "in_reply_to_id": 623022995,
        "id": 623065461,
        "diff_hunk": "@@ -0,0 +1,128 @@\n+import { MigrationInterface, QueryRunner, TableColumn } from 'typeorm';\n+\n+export class ChangeUserColumns1619557498756 implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.changeColumn(\n+      'users',\n+      'first_name',\n+      new TableColumn({\n+        name: 'first_name',\n+        type: 'varchar',\n+        isNullable: true,\n+        length: '100',\n+      }),\n+    );\n+    await queryRunner.changeColumn(\n+      'users',\n+      'last_name',\n+      new TableColumn({\n+        name: 'last_name',\n+        type: 'varchar',\n+        isNullable: true,\n+        length: '100',\n+      }),\n+    );\n+    await queryRunner.changeColumn(\n+      'users',\n+      'email',\n+      new TableColumn({\n+        name: 'email',\n+        type: 'varchar',\n+        isNullable: true,",
        "created_at": "2021-04-29T13:43:35Z",
        "body": "That was in error, fixed."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 648223982,
        "path": "src/users/users.service.ts",
        "in_reply_to_id": 623032604,
        "id": 623065894,
        "diff_hunk": "@@ -26,4 +26,15 @@ export class UsersService {\n   update(id: number, userAttributes: Partial<User>) {\n     return this.userRepository.update(id, userAttributes);\n   }\n+\n+  async createUsersByInvitations(invitations): Promise<User[]> {\n+    const result = await this.userRepository\n+      .createQueryBuilder()\n+      .insert()\n+      .values(invitations)\n+      .returning('*')\n+      .execute();\n+\n+    return plainToClass(User, result.generatedMaps);",
        "created_at": "2021-04-29T13:44:07Z",
        "body": "Much nicer, fixed."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 648305477,
        "path": "test/users.e2e-spec.ts",
        "in_reply_to_id": 623038291,
        "id": 623127014,
        "diff_hunk": "@@ -228,4 +230,79 @@ describe('UsersController (e2e)', () => {\n         }));\n     });\n   });\n+\n+  describe('Creating users by invitations', () => {\n+    let result: request.Test;\n+    let user: User;\n+    let invitationsDTO: InvitationsDTO;\n+    let inviteUserDTO: InviteUserDTO;\n+\n+    beforeEach(async () => {\n+      user = await usersFactory.create();\n+    });\n+\n+    describe('with valid arguments', () => {\n+      beforeEach(() => {\n+        inviteUserDTO = { email: user.email };",
        "created_at": "2021-04-29T14:50:05Z",
        "body": "Agreed, working on this. I already added a unique constraint for email to the table this morning."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 648366141,
        "path": "test/users.e2e-spec.ts",
        "in_reply_to_id": 623039972,
        "id": 623172548,
        "diff_hunk": "@@ -228,4 +230,79 @@ describe('UsersController (e2e)', () => {\n         }));\n     });\n   });\n+\n+  describe('Creating users by invitations', () => {\n+    let result: request.Test;\n+    let user: User;\n+    let invitationsDTO: InvitationsDTO;\n+    let inviteUserDTO: InviteUserDTO;\n+\n+    beforeEach(async () => {\n+      user = await usersFactory.create();\n+    });\n+\n+    describe('with valid arguments', () => {\n+      beforeEach(() => {\n+        inviteUserDTO = { email: user.email };\n+        invitationsDTO = {\n+          invitations: [inviteUserDTO, { email: 'foo@example.com' }],\n+        };\n+        result = request(http)\n+          .post(`/users/invite`)\n+          .send(invitationsDTO)\n+          .set('Accept', 'application/json')\n+          .set('Content-Type', 'application/json')\n+          .set('Authorization', `Bearer ${accessToken}`);\n+      });\n+\n+      it('should return 201 (Created)', () => result.expect(201));\n+\n+      it('should respond with the new user', (done) =>\n+        result.end((err, res) => {\n+          expect(res.body.length).toBe(2);\n+\n+          const createdUser = res.body[0];\n+          expect(createdUser).toMatchObject({\n+            firstName: null,\n+            lastName: null,\n+            email: inviteUserDTO.email,\n+            phone: null,\n+            onboardingStep: 0,\n+            sub: null,\n+          });",
        "created_at": "2021-04-29T15:41:18Z",
        "body": "see above"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 648371184,
        "path": "test/users.e2e-spec.ts",
        "in_reply_to_id": 623038291,
        "id": 623176189,
        "diff_hunk": "@@ -228,4 +230,79 @@ describe('UsersController (e2e)', () => {\n         }));\n     });\n   });\n+\n+  describe('Creating users by invitations', () => {\n+    let result: request.Test;\n+    let user: User;\n+    let invitationsDTO: InvitationsDTO;\n+    let inviteUserDTO: InviteUserDTO;\n+\n+    beforeEach(async () => {\n+      user = await usersFactory.create();\n+    });\n+\n+    describe('with valid arguments', () => {\n+      beforeEach(() => {\n+        inviteUserDTO = { email: user.email };",
        "created_at": "2021-04-29T15:45:43Z",
        "body": "I have added a unique constraint and changed the insert to be an upsert via `ON CONFLICT` and we now do nothing when that happens.\r\n\r\nSo now it is impossible for duplicates to enter the system, my thinking on resending the email, is that that the sending logic is based on the state of the user record and will be encapsulated at email time. This means that if a user is signed up, the email is not re-sent.\r\n\r\nLastly, I want to handle different casing (e.g. the frontend sends duplicate emails with some uppercase letters the second time around) but have to run, for now, will do when I get back. Let me know your thoughts on the changes."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 648452331,
        "path": "test/users.e2e-spec.ts",
        "in_reply_to_id": 623038291,
        "id": 623237522,
        "diff_hunk": "@@ -228,4 +230,79 @@ describe('UsersController (e2e)', () => {\n         }));\n     });\n   });\n+\n+  describe('Creating users by invitations', () => {\n+    let result: request.Test;\n+    let user: User;\n+    let invitationsDTO: InvitationsDTO;\n+    let inviteUserDTO: InviteUserDTO;\n+\n+    beforeEach(async () => {\n+      user = await usersFactory.create();\n+    });\n+\n+    describe('with valid arguments', () => {\n+      beforeEach(() => {\n+        inviteUserDTO = { email: user.email };",
        "created_at": "2021-04-29T17:06:20Z",
        "body": "One clarification @brunokrebs, after talking with Josh I went the route of all-or-nothing. The reasoning was we can send validation errors per-record with this style of DTO, and secondly the backend and the client-side do not have to handle delta/differences figuring what got inserted and what did not, they just retro."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 648554595,
        "path": "src/users/dto/invite-user.dto.ts",
        "in_reply_to_id": 623027716,
        "id": 623316942,
        "diff_hunk": "@@ -0,0 +1,4 @@\n+import { PickType } from '@nestjs/swagger';\n+import { User } from '../entities/user.entity';\n+\n+export class InviteUserDTO extends PickType(User, ['email'] as const) {}",
        "created_at": "2021-04-29T19:04:58Z",
        "body": "I am not sure, now that you say it seems odd."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/39",
      "updated_at": "2021-05-03T14:35:54Z",
      "title": "[IMERC-115] Clear test database",
      "state": "closed",
      "number": 39,
      "merged_at": "2021-05-03T14:35:53Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "4f7487d9ea87842199d38d238aedd1841a0d8150",
        "ref": "feature/IMERC-115-test-harness"
      },
      "created_at": "2021-04-28T17:01:08Z",
      "closed_at": "2021-05-03T14:35:53Z",
      "body": "[IMERC-115](https://imercatus.backlog.com/view/IMERC-115)\r\n\r\n- [x] Add method for clearing all database tables during testing\r\n- [x] Utilize this method in all existing e2e tests\r\n- [x] Use a separate database per suite\r\n\r\nTo run our tests in parallel (and maintain the ability to clean the database between tests), this PR introduces a per-test-suite database.  There is a `globalSetup` function that runs as part of Jest initialization that creates empty test databases, using the `TYPEORM_DATABASE` as a template.  Essentially, this means that migrations still need to be applied to the `TYPEORM_DATABASE` as normal, but no data will ever be written to it.  Instead, each Jest worker will utilize its own database to run tests.  So far, performance/startup don't seem to have taken a hit.\r\n\r\nIn addition, a `TestDBManager` utility class has been added to provide an easy way to clean the database between tests.  It follows a very simplistic approach.  Doesn't do anything \"automatically\", but does provide functions suitable for dropping straight into a `beforeEach` or `afterEach`:\r\n\r\n```typescript\r\nimport { TestDBManager } from './utils/test-db-manager';\r\n// ...\r\n\r\ndescribe('SomeController', () => {\r\n  let app: INestApplication;\r\n  let dbManager: TestDBManager;\r\n\r\n  beforeAll(async () => {\r\n    app = await initTestingModule();\r\n    dbManager = new TestDBManager(app);\r\n  });\r\n  // ...\r\n  beforeEach(async (done) => {\r\n    await dbManager.prepareDatabase();\r\n    return done();\r\n  });\r\n\r\n  afterEach(async (done) => {\r\n    await dbManager.clearDatabase();\r\n    return done();\r\n  });\r\n  // ...\r\n}\r\n```\r\n\r\nEventually we may want something a bit more \"integrated\", but I think this solves the problem for now.\r\n\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "12a4944f9e55d5f81660dfa5552673adcb267498",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 647337029,
        "path": "test/utils/app-testing-module.ts",
        "id": 622392575,
        "diff_hunk": "@@ -23,3 +24,10 @@ export async function initTestingModule(): Promise<INestApplication> {\n   await app.init();\n   return app;\n }\n+\n+export async function prepareDatabase(): Promise<void> {\n+  const connection = getConnection();\n+  await connection.query('DELETE FROM companies;');",
        "created_at": "2021-04-28T17:27:30Z",
        "body": "Thoughts on using`TRUNCATE` + `RESTART IDENTITY`? I might be obsessing, but I like to remove the cruft that builds up on the table `IDENTITY` growing over time. Also, IIRC `TRUNCATE` offers a slight performance boost, as it doesn't scan every record before removing it.\r\n"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 649651531,
        "path": "test/utils/app-testing-module.ts",
        "in_reply_to_id": 622392575,
        "id": 624253811,
        "diff_hunk": "@@ -23,3 +24,10 @@ export async function initTestingModule(): Promise<INestApplication> {\n   await app.init();\n   return app;\n }\n+\n+export async function prepareDatabase(): Promise<void> {\n+  const connection = getConnection();\n+  await connection.query('DELETE FROM companies;');",
        "created_at": "2021-04-30T22:18:11Z",
        "body": "I did, in fact, migrate to `TRUNCATE TABLE xxxx RESTART IDENTITY CASCADE`."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/38",
      "updated_at": "2021-05-04T11:11:46Z",
      "title": "[IMERC-116] Nest users under companies",
      "state": "closed",
      "number": 38,
      "merged_at": "2021-05-04T11:11:45Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "909e4b45e5e84f0ab3c80f8007228a79514140cd",
        "ref": "feature/IMERC-116-users-belong-to-companies"
      },
      "created_at": "2021-04-27T21:59:56Z",
      "closed_at": "2021-05-04T11:11:45Z",
      "body": "https://imercatus.backlog.com/view/IMERC-116\r\n\r\n- [x] Alter routes so users are nested within companies\r\n- [x] Add relationships to database/entities\r\n- [x] Add scoping to UsersService/Repository\r\n- [x] Add decorator for passing company directly to controller methods\r\n- [x] Add guard to ensure requests that include an invalid companyId receive a 404\r\n\r\nSo, this is technically complete.  I'm not 100% satisfied with the API for scoping, but this will work until we come up with something better.\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "b2de941ddb507d5bfc2d1cf57cb3582305f57f2a",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 647313194,
        "path": "src/config/configuration.ts",
        "id": 622373382,
        "diff_hunk": "@@ -38,6 +39,7 @@ export default (): Config => ({\n     username: process.env.TYPEORM_USERNAME,\n     password: process.env.TYPEORM_PASSWORD,\n     database: process.env.TYPEORM_DATABASE,\n+    logging: process.env.TYPEORM_LOGGING === 'true',",
        "created_at": "2021-04-28T17:01:50Z",
        "body": "ü•á "
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 647663499,
        "path": "src/companies/ensure-valid-company.guard.ts",
        "id": 622584488,
        "diff_hunk": "@@ -0,0 +1,27 @@\n+import {\n+  CanActivate,\n+  ExecutionContext,\n+  Injectable,\n+  NotFoundException,\n+} from '@nestjs/common';\n+import { CompaniesService } from './companies.service';\n+\n+@Injectable()\n+export class EnsureValidCompany implements CanActivate {\n+  constructor(private readonly companiesService: CompaniesService) {}\n+\n+  async canActivate(context: ExecutionContext): Promise<boolean> {\n+    const request = context.switchToHttp().getRequest();\n+    const { companyId } = request.params;\n+\n+    const company = await this.companiesService.findOne(companyId);\n+\n+    if (!company) {\n+      throw new NotFoundException(`Company not found: ${companyId}.`);\n+    }\n+\n+    request.company = company;\n+\n+    return Promise.resolve(true);",
        "created_at": "2021-04-28T21:41:21Z",
        "body": "`return true` would suffice"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 647663499,
        "path": "src/migrations/1619094126463-AddUsersToCompanies.ts",
        "id": 622586820,
        "diff_hunk": "@@ -0,0 +1,36 @@\n+import {\n+  MigrationInterface,\n+  QueryRunner,\n+  TableColumn,\n+  TableForeignKey,\n+} from 'typeorm';\n+\n+export class AddUsersToCompanies1619094126463 implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.addColumns('users', [\n+      new TableColumn({\n+        name: 'company_id',\n+        type: 'int',\n+      }),\n+    ]);\n+\n+    await queryRunner.createForeignKey(\n+      'users',\n+      new TableForeignKey({\n+        columnNames: ['company_id'],\n+        referencedTableName: 'companies',\n+        referencedColumnNames: ['id'],\n+        onDelete: 'CASCADE',\n+      }),\n+    );",
        "created_at": "2021-04-28T21:45:27Z",
        "body": "do we want to add indexes for all foreign keys? I think it might make sense."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 647663499,
        "path": "src/users/entities/user.entity.ts",
        "id": 622587770,
        "diff_hunk": "@@ -8,6 +8,8 @@ import {\n   MaxLength,\n } from 'class-validator';\n import { BaseEntity } from '../../shared/base.entity';\n+/* eslint-disable import/no-cycle */",
        "created_at": "2021-04-28T21:47:12Z",
        "body": "We will, most likely, have to deactivate this rule often in this project. Do we want to turn it off for good?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 647663499,
        "path": "src/users/users.controller.ts",
        "id": 622593242,
        "diff_hunk": "@@ -14,39 +14,49 @@ import { UpdateUserDTO } from './dto/update-user.dto';\n import { LoggedInUser, UserProfile } from './logged-in-user.decorator';\n import { AuthenticationGuard } from '../auth/authentication.guard';\n import { NotFoundInterceptor } from '../shared/interceptors';\n+import { EnsureValidCompany } from '../companies/ensure-valid-company.guard';\n+import { ScopedCompany } from '../companies/scoped-company.decorator';\n+import { Company } from '../companies/entities/company.entity';\n \n-@Controller('users')\n-@UseGuards(AuthenticationGuard)\n+@Controller('companies/:companyId/users')\n+@UseGuards(AuthenticationGuard, EnsureValidCompany)\n export class UsersController {\n   constructor(private readonly usersService: UsersService) {}\n \n   @Post()\n   async create(\n+    @ScopedCompany() company: Company,\n     @Body() registerUserDTO: CreateUserDTO,\n     @LoggedInUser() loggedInUser: UserProfile,\n   ) {\n-    return this.usersService.create({\n+    return this.usersService.create(company, {\n       ...registerUserDTO,\n       sub: loggedInUser.sub,\n     });\n   }\n \n   @Get('/profile')\n   @UseInterceptors(NotFoundInterceptor)\n-  async getProfile(@LoggedInUser() loggedInUser: UserProfile) {\n-    const userProfile = await this.usersService.findBySub(loggedInUser.sub);\n+  async getProfile(\n+    @ScopedCompany() company: Company,\n+    @LoggedInUser() loggedInUser: UserProfile,\n+  ) {\n+    const userProfile = await this.usersService.findBySub(\n+      company,\n+      loggedInUser.sub,\n+    );\n     return userProfile || null;\n   }\n \n   @Get(':id')\n-  @UseInterceptors(NotFoundInterceptor)\n-  async findOne(@Param('id') id: number) {\n-    const user = await this.usersService.findOne(id);\n+  async findOne(@ScopedCompany() company: Company, @Param('id') id: number) {",
        "created_at": "2021-04-28T21:57:17Z",
        "body": "isn't `@UseInterceptors(NotFoundInterceptor)` needed?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 647663499,
        "path": "src/users/users.factory.ts",
        "id": 622594521,
        "diff_hunk": "@@ -20,5 +33,6 @@ export default Factory.define<User>(({ sequence, onCreate }) => {\n     sub: 'auth0|45678',\n     createdAt: new Date(),\n     updatedAt: new Date(),\n+    company,\n   };\n });",
        "created_at": "2021-04-28T21:59:36Z",
        "body": "are we using factories outside `test/`? if not, would it make sense to move there? It looks a bit out of place to me leaving them here."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 647663499,
        "path": "src/users/users.module.ts",
        "id": 622599824,
        "diff_hunk": "@@ -2,13 +2,15 @@ import { Module } from '@nestjs/common';\n import { TypeOrmModule } from '@nestjs/typeorm';\n import { UsersService } from './users.service';\n import { UsersController } from './users.controller';\n-import { User } from './entities/user.entity';\n+import { CompaniesService } from '../companies/companies.service';\n+import { UsersRepository } from './users.repository';\n+import { Company } from '../companies/entities/company.entity';\n import { MailModule } from '../mail/mail.module';\n \n @Module({\n   controllers: [UsersController],\n-  providers: [UsersService],\n+  providers: [UsersService, CompaniesService],\n   exports: [UsersService],\n-  imports: [TypeOrmModule.forFeature([User]), MailModule],\n+  imports: [TypeOrmModule.forFeature([UsersRepository, Company]), MailModule],",
        "created_at": "2021-04-28T22:10:08Z",
        "body": "what is the difference between using `User` and `UserRepo` here? Also, do we want to update `app.module.ts` to use the same approach (i.e., the `*Repo` instead of `Entity`)?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 647663499,
        "path": "src/users/users.repository.ts",
        "id": 622600196,
        "diff_hunk": "@@ -0,0 +1,24 @@\n+import {\n+  EntityRepository,\n+  Repository,\n+  SelectQueryBuilder,\n+  UpdateQueryBuilder,\n+} from 'typeorm';\n+import { User } from './entities/user.entity';\n+import { Company } from '../companies/entities/company.entity';\n+\n+@EntityRepository(User)\n+export class UsersRepository extends Repository<User> {\n+  selectWithinCompany(company: Company): SelectQueryBuilder<User> {\n+    return this.createQueryBuilder()\n+      .select('user')\n+      .from(User, 'user')\n+      .where('user.company_id = :companyId', { companyId: company.id });\n+  }\n+\n+  updateWithinCompany(company: Company): UpdateQueryBuilder<User> {\n+    return this.createQueryBuilder()\n+      .update(User)\n+      .where('company_id = :companyId', { companyId: company.id });\n+  }\n+}",
        "created_at": "2021-04-28T22:10:52Z",
        "body": "I don't follow, can you enlighten me on how `CompanyScope` works?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 650403708,
        "path": "src/users/entities/user.entity.ts",
        "in_reply_to_id": 622587770,
        "id": 625125901,
        "diff_hunk": "@@ -8,6 +8,8 @@ import {\n   MaxLength,\n } from 'class-validator';\n import { BaseEntity } from '../../shared/base.entity';\n+/* eslint-disable import/no-cycle */",
        "created_at": "2021-05-03T14:28:49Z",
        "body": "I don't personally feel it adds any value.  Circular references are almost never an accident, and are almost always the only way to setup entity relations."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 650457658,
        "path": "src/users/users.module.ts",
        "in_reply_to_id": 622599824,
        "id": 625166257,
        "diff_hunk": "@@ -2,13 +2,15 @@ import { Module } from '@nestjs/common';\n import { TypeOrmModule } from '@nestjs/typeorm';\n import { UsersService } from './users.service';\n import { UsersController } from './users.controller';\n-import { User } from './entities/user.entity';\n+import { CompaniesService } from '../companies/companies.service';\n+import { UsersRepository } from './users.repository';\n+import { Company } from '../companies/entities/company.entity';\n import { MailModule } from '../mail/mail.module';\n \n @Module({\n   controllers: [UsersController],\n-  providers: [UsersService],\n+  providers: [UsersService, CompaniesService],\n   exports: [UsersService],\n-  imports: [TypeOrmModule.forFeature([User]), MailModule],\n+  imports: [TypeOrmModule.forFeature([UsersRepository, Company]), MailModule],",
        "created_at": "2021-05-03T15:25:53Z",
        "body": "Passing in `UsersRepository` instead of `User` causes typeorm to use our custom repository (and also the `User` entity represented by the repo.  I'm updating app.module.ts to reflect this."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 650680495,
        "path": "src/users/users.factory.ts",
        "in_reply_to_id": 622594521,
        "id": 625334785,
        "diff_hunk": "@@ -20,5 +33,6 @@ export default Factory.define<User>(({ sequence, onCreate }) => {\n     sub: 'auth0|45678',\n     createdAt: new Date(),\n     updatedAt: new Date(),\n+    company,\n   };\n });",
        "created_at": "2021-05-03T20:05:49Z",
        "body": "Currently, no.  But I'm adding tests as part of another story that is using them in `users.service.spec.ts`"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/37",
      "updated_at": "2021-04-27T16:21:31Z",
      "title": "Refactor user e2e test to be DRY per expectation group",
      "state": "closed",
      "number": 37,
      "merged_at": "2021-04-27T16:21:30Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "a46badf132676567c5f34cfc24849b19ca2c9e6e",
        "ref": "no-ticket-refactor-user-e2e"
      },
      "created_at": "2021-04-27T16:11:49Z",
      "closed_at": "2021-04-27T16:21:30Z",
      "body": "This PR updates the user e2e tests to use describe before and after blocked per group of expectations, while also using the updated version of DTOs and factories.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "081a4c18bee4e8e9c8bf5f550fc71a8c493bf528",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/36",
      "updated_at": "2021-04-27T17:18:32Z",
      "title": "[IMERC-97] Caching token responses",
      "state": "closed",
      "number": 36,
      "merged_at": "2021-04-27T17:18:31Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "a370a5c024d5afb72486620132cab5838bbaedbd",
        "ref": "IMERC-97/user-profile-and-token-caching"
      },
      "created_at": "2021-04-27T12:39:27Z",
      "closed_at": "2021-04-27T17:18:31Z",
      "body": "[IMERC-97](https://imercatus.backlog.com/view/IMERC-97)\r\n\r\nAfter switching to access tokens, E2E tests started making [Auth0 raise 429 Too Many Requests](https://auth0.com/docs/policies/rate-limit-policy#api-endpoint-limits). This made me realise that, if the frontend started issuing a good number of requests, we would end up reaching out to Auth0 way too many times to validate the very same token over and over. Therefore, to help with E2E tests and also with this last situation described, I added a cache.\r\n\r\nApart from that, I'm also creating a utility to bootstrap E2E environments.\r\n\r\n> Note: I created a test that is specifically validating that the integration with Auth0 works (i.e., access tokens are validated and user profiles are fetched). Therefore, switching the other E2E tests (e.g., `UsersControlller` and `CompaniesController`) might be a good idea.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "d7a7bc6101c496ccdf13ac6ded79d6857229004a",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 645806842,
        "path": "src/shared/cache.provider.ts",
        "id": 621171051,
        "diff_hunk": "@@ -0,0 +1,11 @@\n+import { CACHE_MANAGER, Inject, Injectable } from '@nestjs/common';\n+import { Cache } from 'cache-manager';\n+\n+@Injectable()\n+export class CacheProvider {\n+  constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}\n+\n+  getCacheManager() {\n+    return this.cacheManager;\n+  }\n+}",
        "created_at": "2021-04-27T12:43:24Z",
        "body": "Couldn't find a way to inject `@Inject(CACHE_MANAGER) private cacheManager: Cache` on `UserInfoMiddleware` in a timely manner, so opted to go this way. Happy to change if someone knows a more straightforward way."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 645808136,
        "path": "src/users/users.controller.ts",
        "id": 621172083,
        "diff_hunk": "@@ -30,8 +32,10 @@ export class UsersController {\n   }\n \n   @Get('/profile')\n-  getProfile(@LoggedInUser() loggedInUser: UserProfile) {\n-    return this.usersService.findBySub(loggedInUser.sub);\n+  @UseInterceptors(NotFoundInterceptor)",
        "created_at": "2021-04-27T12:44:40Z",
        "body": "I feel like this should be a global configuration. Just saying because, if we opt to do that, we can do it in another PR."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 646091763,
        "path": "src/shared/cache.provider.ts",
        "in_reply_to_id": 621171051,
        "id": 621375065,
        "diff_hunk": "@@ -0,0 +1,11 @@\n+import { CACHE_MANAGER, Inject, Injectable } from '@nestjs/common';\n+import { Cache } from 'cache-manager';\n+\n+@Injectable()\n+export class CacheProvider {\n+  constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}\n+\n+  getCacheManager() {\n+    return this.cacheManager;\n+  }\n+}",
        "created_at": "2021-04-27T16:16:26Z",
        "body": "I think I was in that section of the docs this morning.  We can merge this now, but I'll definitely circle back."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 646093569,
        "path": "test/utils/app-testing-module.ts",
        "id": 621377108,
        "diff_hunk": "@@ -0,0 +1,25 @@\n+import {\n+  ClassSerializerInterceptor,\n+  INestApplication,\n+  ValidationPipe,\n+} from '@nestjs/common';\n+import { Reflector } from '@nestjs/core';\n+import { Test, TestingModule } from '@nestjs/testing';\n+import AppModule from '../../src/app.module';\n+\n+export async function initTestingModule(): Promise<INestApplication> {\n+  const module: TestingModule = await Test.createTestingModule({\n+    imports: [AppModule],\n+  }).compile();\n+\n+  const app = module.createNestApplication();\n+  app.useGlobalPipes(\n+    new ValidationPipe({\n+      whitelist: true,\n+      forbidUnknownValues: true,\n+    }),\n+  );\n+  app.useGlobalInterceptors(new ClassSerializerInterceptor(app.get(Reflector)));\n+  await app.init();\n+  return app;\n+}",
        "created_at": "2021-04-27T16:18:16Z",
        "body": "Thank you for this!  I've had this on my todo list for a week or so.  üëç "
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/35",
      "updated_at": "2021-04-26T20:59:26Z",
      "title": "[no-ticket] database cleaning fixes",
      "state": "closed",
      "number": 35,
      "merged_at": "2021-04-26T20:59:25Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e08af3db3669c51e0e6e1a9ca592bb22603807da",
        "ref": "no-ticket/database-cleaning-fixes"
      },
      "created_at": "2021-04-26T19:59:14Z",
      "closed_at": "2021-04-26T20:59:25Z",
      "body": "This just takes care of the few remaining todo items from the other database cleaning PR.  Merged it before I saw the comments.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "bec4c6ad6937a7bc8684619113dc7d6526748258",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/34",
      "updated_at": "2021-04-26T17:35:58Z",
      "title": "[IMERC-97] Switching to access tokens",
      "state": "closed",
      "number": 34,
      "merged_at": "2021-04-26T17:15:31Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "133f035248c914cacc00138ccba73e9cc56051cf",
        "ref": "IMERC-97/access-tokens"
      },
      "created_at": "2021-04-26T17:13:29Z",
      "closed_at": "2021-04-26T17:15:31Z",
      "body": "[Auth0 integration adjustments](https://imercatus.backlog.com/view/IMERC-97)\r\n\r\nFew reasons that motivated me to submit this PR:\r\n1. The Next.js library to integrate with Auth0 didn't work well with this idea of sharing ID tokens with the backend. Some workaround was needed there.\r\n2. As [Vittorio Bertocci explains here](https://auth0.com/docs/videos/learn-identity-series/calling-an-api#wistia_yw6hmdhnft?time=2126), using ID tokens to communicate with backends causes more discussions/misalignment than needed, so he encourages simply using access tokens.\r\n3. If we ever expose the API to third-party applications, we will need to support access tokens anyway.\r\n\r\nThat said, looks like a no-brainer to me, and here is the PR to switch that. There will be another PR for the frontend as well.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c6bbc62614d899e3844e51d6553fc44783152359",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/33",
      "updated_at": "2021-04-26T20:05:01Z",
      "title": "[DONT MERGE] WIP experimenting with DTO creation",
      "state": "closed",
      "number": 33,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "37bc9a1aebeee1ce4ddcc64b3c54ed014134b916",
        "ref": "feature/IMERC-114-fishery-bk-3"
      },
      "created_at": "2021-04-26T16:01:00Z",
      "closed_at": "2021-04-26T20:04:58Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e750f066aa87fb83c8ee178f630de77c0e026323",
        "ref": "feature/IMERC-114-fishery-original"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/32",
      "updated_at": "2021-04-26T19:46:59Z",
      "title": "[no-ticket] Improve database cleanup in test",
      "state": "closed",
      "number": 32,
      "merged_at": "2021-04-26T19:45:55Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "4c4bb61ab1aa77410ff84d08d2b796b9fd6627ab",
        "ref": "no-ticket/database-cleaning"
      },
      "created_at": "2021-04-22T16:40:26Z",
      "closed_at": "2021-04-26T19:45:55Z",
      "body": "First of all, the ultimate issue was the way dotenv was utilized (by me).  When `dotenv` is loading a file (`.env.test` in this case), any environment variables already set are ignored.  Due to the order of imports, dotenv was being invoked after importing some of `NestJS`, which also loads `dotenv` for development.\r\n\r\nThe end result was that `dotenv` was loading properly, but ignoring all of the _test_ environment variables because they were already set by NestJS.\r\n\r\nRather than fix this issue (which ultimately felt a bit hackish anyway), this PR wraps the _script_ in a call to dotenv, so the `test:migrate` command becomes `dotenv -e .env.test npm run migrate`.\r\n\r\nThe next change this PR introduces is utilizing our existing NestJS app module to determine the entities to be cleaned.  When running the script prior, it appears (at least in my environment) that the list of entities returned by TypeORM is empty, so no cleaning takes place.  This PR leverages our existing app module to get the list of entities.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "884d5cf31cd11c83016beb344af85ca1dc5bce3e",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 643483602,
        "path": "package.json",
        "id": 619358367,
        "diff_hunk": "@@ -14,11 +14,13 @@\n     \"start:dev\": \"nest start --watch\",\n     \"start:prod\": \"node dist/src/main\",\n     \"lint\": \"eslint \\\"**/*.{ts,js}\\\"\",\n-    \"test:prepare\": \"bin/clear-test-db.ts\",\n     \"test\": \"jest\",\n     \"test:watch\": \"jest --watch\",\n     \"test:cov\": \"jest --coverage\",\n-    \"test:e2e\": \"npm run test:prepare && jest --config ./test/jest-e2e.json\",\n+    \"test:e2e\": \"npm run test:truncate && jest --config ./test/jest-e2e.json\",\n+    \"test:migrate\": \"dotenv -e .env.test npm run migrate\",\n+    \"test:truncate\": \"dotenv -e .env.test bin/clear-test-db.ts\",\n+    \"test:typeorm\": \"dotenv -e .env.test npm run typeorm\",",
        "created_at": "2021-04-23T16:41:42Z",
        "body": "I see one potential issue here for other devs, I have seen if another `dotenv` executable (like Python or Ruby) is on their system it can get called instead. Now that I think about it, it may be an issue with `asdf` and the need to reshim.\r\n\r\nThe other idea is to `npx` prefix `dotenv -e .env.test` like `npx dotenv -e .env.test`."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 643486016,
        "path": "bin/clear-test-db.ts",
        "id": 619360104,
        "diff_hunk": "@@ -1,33 +1,44 @@\n #!/usr/bin/env ts-node\n-/* eslint-disable no-await-in-loop */\n-/* eslint-disable no-console */\n+import { NestFactory } from '@nestjs/core';\n+import { INestApplicationContext, Logger } from '@nestjs/common';\n+import { Connection, EntityMetadata } from 'typeorm';\n+import AppModule from '../src/app.module';\n \n-import { createConnection } from 'typeorm';\n-import * as path from 'path';\n-import { config as dotenvConfig } from 'dotenv';\n+// Ensure we're working in the test environment (avoid truncating prod/dev)\n+if (process.env.NODE_ENV !== 'test') {\n+  throw new Error(`NODE_ENV (${process.env.NODE_ENV}) is not 'test', exiting`);\n+}\n \n-dotenvConfig({ path: path.resolve(process.cwd(), '.env.test') });\n+let app: INestApplicationContext;\n \n-if (process.env.NODE_ENV !== 'test') {\n-  console.log(`NODE_ENV (${process.env.NODE_ENV}) is not 'test', exiting`);\n-  process.exit(1);\n+async function truncateTable(e: EntityMetadata) {\n+  const connection: Connection = app.get(Connection);\n+\n+  Logger.log(`Truncating ${e.tableName}`);",
        "created_at": "2021-04-23T16:44:46Z",
        "body": "Tag the `Logger` statement so the user know from where it is coming from? e.g. https://github.com/iMercatus/imercata-backend/blob/main/src/main.ts#L27"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 643512080,
        "path": "package.json",
        "in_reply_to_id": 619358367,
        "id": 619380561,
        "diff_hunk": "@@ -14,11 +14,13 @@\n     \"start:dev\": \"nest start --watch\",\n     \"start:prod\": \"node dist/src/main\",\n     \"lint\": \"eslint \\\"**/*.{ts,js}\\\"\",\n-    \"test:prepare\": \"bin/clear-test-db.ts\",\n     \"test\": \"jest\",\n     \"test:watch\": \"jest --watch\",\n     \"test:cov\": \"jest --coverage\",\n-    \"test:e2e\": \"npm run test:prepare && jest --config ./test/jest-e2e.json\",\n+    \"test:e2e\": \"npm run test:truncate && jest --config ./test/jest-e2e.json\",\n+    \"test:migrate\": \"dotenv -e .env.test npm run migrate\",\n+    \"test:truncate\": \"dotenv -e .env.test bin/clear-test-db.ts\",\n+    \"test:typeorm\": \"dotenv -e .env.test npm run typeorm\",",
        "created_at": "2021-04-23T17:18:06Z",
        "body": "This I can do.  Should have included it in the first place."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/31",
      "updated_at": "2021-08-23T15:57:14Z",
      "title": "[IMERC-68] Small amendments",
      "state": "closed",
      "number": 31,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "a34bfc84f1abf3be213410de0564343665a2f04e",
        "ref": "feature/IMERC-68-setup-email-service-aws-ses-bk"
      },
      "created_at": "2021-04-22T14:36:25Z",
      "closed_at": "2021-04-22T17:39:53Z",
      "body": "Small amendments related to the PR review that most-likely can be merged üòÑ \r\n\r\nNotes:\r\n- for whatever reason, `npm run format` still brings changes to the project, like on the `src/companies/companies.module.ts` file.\r\n- added a small test for the new `aws` config properties\r\n- small comment related to my other comment about docs and env vars",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5734a6792266acd508fc5ae5e1f821fc47c798c3",
        "ref": "feature/IMERC-68-setup-email-service-aws-ses"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/30",
      "updated_at": "2021-04-26T21:03:18Z",
      "title": "[IMERC-114] Add Fishery for testing",
      "state": "closed",
      "number": 30,
      "merged_at": "2021-04-26T21:03:17Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e8a893a0b8124826565c70c0143086e8d6a96234",
        "ref": "feature/IMERC-114-fishery"
      },
      "created_at": "2021-04-22T11:26:33Z",
      "closed_at": "2021-04-26T21:03:17Z",
      "body": "https://imercatus.backlog.com/view/IMERC-114\r\n- [x] add Fishery package\r\n- [x] Add factories for existing entities\r\n- [x] Migrate tests to utilize factories instead of ad-hoc entity generation\r\n\r\nAlso needed to do a bit of refactoring to various parts of our User implementation to allow for easier factory use.\r\n\r\n[Defining factories](https://github.com/thoughtbot/fishery) is simple.  For instance, our User factory:\r\n```typescript\r\nexport default Factory.define<User>(({ sequence, onCreate }) => {\r\n  onCreate(async (user) => {\r\n    const usersRepo: Repository<User> = getRepository(User);\r\n    const createUserDTO = CreateUserDTO.fromEntity(user);\r\n    const u: User = usersRepo.create(createUserDTO);\r\n    await usersRepo.save(u);\r\n    return u;\r\n  });\r\n\r\n  return {\r\n    id: sequence,\r\n    firstName: 'Joe',\r\n    lastName: 'User',\r\n    email: `user${sequence}@example.com`,\r\n    phone: '+49 1111 2222',\r\n    onboardingStep: 1,\r\n    sub: 'auth0|45678',\r\n    createdAt: new Date(),\r\n    updatedAt: new Date(),\r\n  };\r\n});\r\n```\r\n\r\nThe usage is fairly straightforward, but slightly inconsistent.  For instance, building an unpersisted user:\r\n\r\n```typescript\r\nimport usersFactory from './users.factory.ts';\r\n\r\nconst user = usersFactory.build();\r\n```\r\n\r\nCreating a persisted user returns a `Promise`:\r\n```typescript\r\nimport usersFactory from './users.factory.ts';\r\nconst user = await usersFactory.create();\r\n```\r\n\r\nBoth `.create` and `.build` accept a set of attributes to override those defined in the factory:\r\n\r\n```typescript\r\nconst user = usersFactory.build({ firstName: 'John' });\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "bb55885300367218bb0db039d21326f1c0da4961",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 642299308,
        "path": "src/companies/companies.factory.ts",
        "id": 618472266,
        "diff_hunk": "@@ -0,0 +1,24 @@\n+import { Factory } from 'fishery';\n+import { getRepository, Repository } from 'typeorm';\n+import { BusinessType, Company } from './entities/company.entity';\n+import { CreateCompanyDTO } from './dto/create-company.dto';\n+\n+export default Factory.define<Company>(({ sequence, onCreate }) => {\n+  onCreate(async (company) => {\n+    const companiesRepo: Repository<Company> = getRepository(Company);\n+    const createCompanyDTO = CreateCompanyDTO.fromEntity(company);\n+    const c: Company = companiesRepo.create(createCompanyDTO);\n+    await companiesRepo.save(c);\n+    return c;\n+  });\n+\n+  return {\n+    id: sequence,\n+    name: `Test Company ${sequence}`,\n+    size: 10,\n+    ein: Math.floor(100000000 + Math.random() * 900000000).toString(),",
        "created_at": "2021-04-22T14:48:47Z",
        "body": "didn't like `chance.js`?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 642299308,
        "path": "src/users/dto/create-user.dto.ts",
        "id": 618477026,
        "diff_hunk": "@@ -1,10 +1,34 @@\n import { PickType } from '@nestjs/swagger';\n import { User } from '../entities/user.entity';\n \n-export class CreateUserDto extends PickType(User, [\n+export class CreateUserDTO extends PickType(User, [\n   'firstName',\n   'lastName',\n   'email',\n   'phone',\n   'onboardingStep',\n-] as const) {}\n+  'sub',\n+] as const) {\n+  public static from(dto: Partial<CreateUserDTO>): CreateUserDTO {\n+    const it = new CreateUserDTO();\n+    it.firstName = dto.firstName;\n+    it.lastName = dto.lastName;\n+    it.email = dto.email;\n+    it.phone = dto.phone;\n+    it.onboardingStep = dto.onboardingStep;\n+    it.sub = dto.sub;\n+\n+    return it;\n+  }\n+\n+  public static fromEntity(entity: User): CreateUserDTO {\n+    return this.from({\n+      firstName: entity.firstName,\n+      lastName: entity.lastName,\n+      email: entity.email,\n+      phone: entity.phone,\n+      onboardingStep: entity.onboardingStep,\n+      sub: entity.sub,\n+    });\n+  }",
        "created_at": "2021-04-22T14:54:08Z",
        "body": "there is something bugging me about all these `from` and `fromEntity` methods... apart from being verbose, repetitive, and boilerplaty, I feel like we don't need them... but I will have to pull this PR and do some experimenting with it first to give a more proper feedback (or to accept that they are in fact needed)"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 642299308,
        "path": "test/utils/index.ts",
        "id": 618485871,
        "diff_hunk": "@@ -24,3 +25,20 @@ export async function getIdToken(): Promise<string> {\n \n   return response.body.id_token;\n }\n+\n+// Similar to the above, but returns the entire UserProfile\n+export async function getUserProfile(): Promise<UserProfile> {\n+  const idToken = await getIdToken();\n+\n+  const base64Url = idToken.split('.')[1];\n+  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n+  const jsonPayload = decodeURIComponent(\n+    Buffer.from(base64, 'base64')\n+      .toString('binary')\n+      .split('')\n+      .map((c) => `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`)\n+      .join(''),\n+  );\n+\n+  return JSON.parse(jsonPayload);\n+}",
        "created_at": "2021-04-22T15:04:04Z",
        "body": "if we don't want to maintain that, we can use this https://www.npmjs.com/package/jsonwebtoken#jwtdecodetoken--options which would give us a one-liner or similar"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 642331698,
        "path": "src/users/dto/create-user.dto.ts",
        "in_reply_to_id": 618477026,
        "id": 618495646,
        "diff_hunk": "@@ -1,10 +1,34 @@\n import { PickType } from '@nestjs/swagger';\n import { User } from '../entities/user.entity';\n \n-export class CreateUserDto extends PickType(User, [\n+export class CreateUserDTO extends PickType(User, [\n   'firstName',\n   'lastName',\n   'email',\n   'phone',\n   'onboardingStep',\n-] as const) {}\n+  'sub',\n+] as const) {\n+  public static from(dto: Partial<CreateUserDTO>): CreateUserDTO {\n+    const it = new CreateUserDTO();\n+    it.firstName = dto.firstName;\n+    it.lastName = dto.lastName;\n+    it.email = dto.email;\n+    it.phone = dto.phone;\n+    it.onboardingStep = dto.onboardingStep;\n+    it.sub = dto.sub;\n+\n+    return it;\n+  }\n+\n+  public static fromEntity(entity: User): CreateUserDTO {\n+    return this.from({\n+      firstName: entity.firstName,\n+      lastName: entity.lastName,\n+      email: entity.email,\n+      phone: entity.phone,\n+      onboardingStep: entity.onboardingStep,\n+      sub: entity.sub,\n+    });\n+  }",
        "created_at": "2021-04-22T15:15:20Z",
        "body": "Same here.  I'm still playing around with some ways to handle this through decorators or inheritance/extends.  They're definitely \"needed\", in that we need to convert from entities to DTO's and vice-versa all over the place, but it does get tedious (even though you write them once) to deal with them in every entity."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 642332789,
        "path": "src/companies/companies.factory.ts",
        "in_reply_to_id": 618472266,
        "id": 618496424,
        "diff_hunk": "@@ -0,0 +1,24 @@\n+import { Factory } from 'fishery';\n+import { getRepository, Repository } from 'typeorm';\n+import { BusinessType, Company } from './entities/company.entity';\n+import { CreateCompanyDTO } from './dto/create-company.dto';\n+\n+export default Factory.define<Company>(({ sequence, onCreate }) => {\n+  onCreate(async (company) => {\n+    const companiesRepo: Repository<Company> = getRepository(Company);\n+    const createCompanyDTO = CreateCompanyDTO.fromEntity(company);\n+    const c: Company = companiesRepo.create(createCompanyDTO);\n+    await companiesRepo.save(c);\n+    return c;\n+  });\n+\n+  return {\n+    id: sequence,\n+    name: `Test Company ${sequence}`,\n+    size: 10,\n+    ein: Math.floor(100000000 + Math.random() * 900000000).toString(),",
        "created_at": "2021-04-22T15:16:15Z",
        "body": "I'm not a fan of libraries where there's more work in adding it to the project than it saves.  If you'd rather use chance.js, I'm happy to pull it in."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 642334171,
        "path": "test/utils/index.ts",
        "in_reply_to_id": 618485871,
        "id": 618497458,
        "diff_hunk": "@@ -24,3 +25,20 @@ export async function getIdToken(): Promise<string> {\n \n   return response.body.id_token;\n }\n+\n+// Similar to the above, but returns the entire UserProfile\n+export async function getUserProfile(): Promise<UserProfile> {\n+  const idToken = await getIdToken();\n+\n+  const base64Url = idToken.split('.')[1];\n+  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n+  const jsonPayload = decodeURIComponent(\n+    Buffer.from(base64, 'base64')\n+      .toString('binary')\n+      .split('')\n+      .map((c) => `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`)\n+      .join(''),\n+  );\n+\n+  return JSON.parse(jsonPayload);\n+}",
        "created_at": "2021-04-22T15:17:26Z",
        "body": "Derp.  I forgot we already had jsonwebtoken in the project (via express-jwt).  I'll switch this over."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 642386773,
        "path": "src/companies/companies.factory.ts",
        "in_reply_to_id": 618472266,
        "id": 618536167,
        "diff_hunk": "@@ -0,0 +1,24 @@\n+import { Factory } from 'fishery';\n+import { getRepository, Repository } from 'typeorm';\n+import { BusinessType, Company } from './entities/company.entity';\n+import { CreateCompanyDTO } from './dto/create-company.dto';\n+\n+export default Factory.define<Company>(({ sequence, onCreate }) => {\n+  onCreate(async (company) => {\n+    const companiesRepo: Repository<Company> = getRepository(Company);\n+    const createCompanyDTO = CreateCompanyDTO.fromEntity(company);\n+    const c: Company = companiesRepo.create(createCompanyDTO);\n+    await companiesRepo.save(c);\n+    return c;\n+  });\n+\n+  return {\n+    id: sequence,\n+    name: `Test Company ${sequence}`,\n+    size: 10,\n+    ein: Math.floor(100000000 + Math.random() * 900000000).toString(),",
        "created_at": "2021-04-22T16:04:28Z",
        "body": "> I'm not a fan of libraries where there's more work in adding it to the project than it saves\r\n\r\nI think no one is, but I don't follow. Is it hard to use it? It looks like one command to install, one command to import, and then you can create random/mock data for all kind of things. But no, I'm not in a position to ask or enforce libraries, just recommend :)"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 642444598,
        "path": "src/companies/companies.factory.ts",
        "in_reply_to_id": 618472266,
        "id": 618573258,
        "diff_hunk": "@@ -0,0 +1,24 @@\n+import { Factory } from 'fishery';\n+import { getRepository, Repository } from 'typeorm';\n+import { BusinessType, Company } from './entities/company.entity';\n+import { CreateCompanyDTO } from './dto/create-company.dto';\n+\n+export default Factory.define<Company>(({ sequence, onCreate }) => {\n+  onCreate(async (company) => {\n+    const companiesRepo: Repository<Company> = getRepository(Company);\n+    const createCompanyDTO = CreateCompanyDTO.fromEntity(company);\n+    const c: Company = companiesRepo.create(createCompanyDTO);\n+    await companiesRepo.save(c);\n+    return c;\n+  });\n+\n+  return {\n+    id: sequence,\n+    name: `Test Company ${sequence}`,\n+    size: 10,\n+    ein: Math.floor(100000000 + Math.random() * 900000000).toString(),",
        "created_at": "2021-04-22T16:44:48Z",
        "body": "I get what you mean.  I guess what I was saying is that it took longer for me to go to the `chance.js` project page and find the instructions in the README than it did to write that one-liner.  If we start using more random logic, then I think a library might be a good idea, but I'm not sure what it would \"save\" us here."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 642450571,
        "path": "src/companies/companies.factory.ts",
        "in_reply_to_id": 618472266,
        "id": 618578277,
        "diff_hunk": "@@ -0,0 +1,24 @@\n+import { Factory } from 'fishery';\n+import { getRepository, Repository } from 'typeorm';\n+import { BusinessType, Company } from './entities/company.entity';\n+import { CreateCompanyDTO } from './dto/create-company.dto';\n+\n+export default Factory.define<Company>(({ sequence, onCreate }) => {\n+  onCreate(async (company) => {\n+    const companiesRepo: Repository<Company> = getRepository(Company);\n+    const createCompanyDTO = CreateCompanyDTO.fromEntity(company);\n+    const c: Company = companiesRepo.create(createCompanyDTO);\n+    await companiesRepo.save(c);\n+    return c;\n+  });\n+\n+  return {\n+    id: sequence,\n+    name: `Test Company ${sequence}`,\n+    size: 10,\n+    ein: Math.floor(100000000 + Math.random() * 900000000).toString(),",
        "created_at": "2021-04-22T16:50:08Z",
        "body": "I see, yeah, makes sense, let's not add stuff that we don't need until we need. Sounds good."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 645018553,
        "path": "test/utils/index.ts",
        "in_reply_to_id": 618485871,
        "id": 620568297,
        "diff_hunk": "@@ -24,3 +25,20 @@ export async function getIdToken(): Promise<string> {\n \n   return response.body.id_token;\n }\n+\n+// Similar to the above, but returns the entire UserProfile\n+export async function getUserProfile(): Promise<UserProfile> {\n+  const idToken = await getIdToken();\n+\n+  const base64Url = idToken.split('.')[1];\n+  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n+  const jsonPayload = decodeURIComponent(\n+    Buffer.from(base64, 'base64')\n+      .toString('binary')\n+      .split('')\n+      .map((c) => `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`)\n+      .join(''),\n+  );\n+\n+  return JSON.parse(jsonPayload);\n+}",
        "created_at": "2021-04-26T18:59:20Z",
        "body": "Migrated to using `jwt.decode`."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 645020446,
        "path": "package.json",
        "id": 620569911,
        "diff_hunk": "@@ -30,11 +30,14 @@\n     \"@nestjs/platform-express\": \"^7.6.13\",\n     \"@nestjs/swagger\": \"^4.8.0\",\n     \"@nestjs/typeorm\": \"^7.1.5\",\n+    \"@types/jsonwebtoken\": \"^8.5.1\",",
        "created_at": "2021-04-26T19:01:41Z",
        "body": "you will have to remove that when resolving conflicts"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 645020446,
        "path": "package.json",
        "id": 620569971,
        "diff_hunk": "@@ -30,11 +30,14 @@\n     \"@nestjs/platform-express\": \"^7.6.13\",\n     \"@nestjs/swagger\": \"^4.8.0\",\n     \"@nestjs/typeorm\": \"^7.1.5\",\n+    \"@types/jsonwebtoken\": \"^8.5.1\",\n     \"class-transformer\": \"^0.4.0\",\n     \"class-validator\": \"^0.13.1\",\n     \"dotenv\": \"^8.2.0\",\n     \"express-jwt\": \"^6.0.0\",\n+    \"fishery\": \"^1.2.0\",\n     \"joi\": \"^17.4.0\",\n+    \"jsonwebtoken\": \"^8.5.1\",",
        "created_at": "2021-04-26T19:01:46Z",
        "body": "and that"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 645020446,
        "path": "src/main.ts",
        "id": 620573951,
        "diff_hunk": "@@ -23,6 +27,7 @@ async function bootstrap() {\n       forbidUnknownValues: true,\n     }),\n   );\n+  app.useGlobalInterceptors(new ClassSerializerInterceptor(app.get(Reflector)));",
        "created_at": "2021-04-26T19:07:47Z",
        "body": "superb"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 645020446,
        "path": "src/main.ts",
        "in_reply_to_id": 620573951,
        "id": 620576011,
        "diff_hunk": "@@ -23,6 +27,7 @@ async function bootstrap() {\n       forbidUnknownValues: true,\n     }),\n   );\n+  app.useGlobalInterceptors(new ClassSerializerInterceptor(app.get(Reflector)));",
        "created_at": "2021-04-26T19:11:03Z",
        "body": "saw this issue that, apparently, is still open (although marked as closed): https://github.com/nestjs/nest/issues/2237\r\n\r\nwill that bite us in the future (if the issue really exists)?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 645020446,
        "path": "src/shared/entity.utils.ts",
        "id": 620576341,
        "diff_hunk": "@@ -0,0 +1,29 @@\n+import {\n+  plainToClass,\n+  ClassConstructor,\n+  ClassTransformOptions,\n+} from 'class-transformer';\n+\n+const convertDefaults: ClassTransformOptions = {\n+  excludeExtraneousValues: true,\n+};\n+\n+export function convertTo<T, V>(\n+  dtoType: ClassConstructor<T>,\n+  obj: V[],\n+  options?: ClassTransformOptions,\n+): T[];\n+\n+export function convertTo<T, V>(\n+  dtoType: ClassConstructor<T>,\n+  obj: V,\n+  options?: ClassTransformOptions,\n+): T;\n+\n+export function convertTo<T, V>(\n+  dtoType: ClassConstructor<T>,\n+  obj: V | V[],\n+  options?: ClassTransformOptions,\n+): T | T[] {\n+  return plainToClass(dtoType, obj, { ...convertDefaults, ...options });\n+}",
        "created_at": "2021-04-26T19:11:35Z",
        "body": "I guess that is not needed anymore?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 645020446,
        "path": "test/users.e2e-spec.ts",
        "id": 620577575,
        "diff_hunk": "@@ -1,64 +1,71 @@\n import { Test, TestingModule } from '@nestjs/testing';\n-import { INestApplication } from '@nestjs/common';\n+import { Reflector } from '@nestjs/core';\n+import {\n+  ClassSerializerInterceptor,\n+  INestApplication,\n+  ValidationPipe,\n+} from '@nestjs/common';\n import * as request from 'supertest';\n import { getRepository, Repository } from 'typeorm';\n import AppModule from '../src/app.module';\n import { User } from '../src/users/entities/user.entity';\n-import { CreateUserDto } from '../src/users/dto/create-user.dto';\n-import { UpdateUserDto } from '../src/users/dto/update-user.dto';\n-import { getIdToken } from './utils';\n+import { getIdToken, getUserProfile } from './utils';\n+import usersFactory from '../src/users/users.factory';\n \n describe('AppController (e2e)', () => {\n   let app: INestApplication;\n   let http: any;\n-  let user: User;\n   let usersRepo: Repository<User>;\n-  let createUserDto: CreateUserDto;\n-  let updateUserDto: UpdateUserDto;\n   let idToken: string;\n+  let userSub: string;\n \n   beforeAll(async () => {\n     const module: TestingModule = await Test.createTestingModule({\n       imports: [AppModule],\n     }).compile();\n \n     app = module.createNestApplication();\n+    app.useGlobalPipes(\n+      new ValidationPipe({\n+        whitelist: true,\n+        forbidUnknownValues: true,\n+      }),\n+    );\n+    app.useGlobalInterceptors(\n+      new ClassSerializerInterceptor(app.get(Reflector)),\n+    );\n     await app.init();\n \n     http = app.getHttpServer();\n \n-    createUserDto = new CreateUserDto();\n-    createUserDto.firstName = 'Bob';\n-    createUserDto.lastName = 'Smith';\n-    createUserDto.email = 'jim@foo.com';\n-    createUserDto.phone = '+1(604)555-5555';\n-    createUserDto.onboardingStep = 1;\n+    idToken = await getIdToken();\n+    userSub = (await getUserProfile()).sub;\n \n     usersRepo = getRepository(User);\n-    user = usersRepo.create({\n-      ...createUserDto,\n-      sub: 'auth0|456789',\n-    });\n-    await usersRepo.save(user);\n+  });\n \n-    idToken = await getIdToken();\n+  beforeEach(async () => {\n+    await usersRepo.query('DELETE FROM users;');\n   });\n \n   it('POST /users (201)', (done) => {\n+    const createUserDTO = usersFactory.build({ sub: userSub });",
        "created_at": "2021-04-26T19:13:29Z",
        "body": "as mentioned, `sub` is not provided on requests, it is populated by the `@IdToken()` decoration (or, on a more recent version, `@LoggedInUser()`)"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 645020446,
        "path": "src/users/dto/create-user.dto.ts",
        "id": 620578297,
        "diff_hunk": "@@ -1,10 +1,11 @@\n import { PickType } from '@nestjs/swagger';\n import { User } from '../entities/user.entity';\n \n-export class CreateUserDto extends PickType(User, [\n+export class CreateUserDTO extends PickType(User, [\n   'firstName',\n   'lastName',\n   'email',\n   'phone',\n   'onboardingStep',\n+  'sub',",
        "created_at": "2021-04-26T19:14:31Z",
        "body": "hmmm, why expose that? This property shouldn't be informed by anyone calling the API, but populated based on access-token/user-profile"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 645020446,
        "path": "src/users/dto/register-user.dto.ts",
        "id": 620578709,
        "diff_hunk": "@@ -0,0 +1,6 @@\n+import { OmitType } from '@nestjs/swagger';\n+import { CreateUserDTO } from './create-user.dto';\n+\n+export class RegisterUserDTO extends OmitType(CreateUserDTO, [\n+  'sub',",
        "created_at": "2021-04-26T19:15:05Z",
        "body": "yup, but as it should be omitted everywhere, this shouldn't be here either"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 645040094,
        "path": "package.json",
        "in_reply_to_id": 620569911,
        "id": 620586143,
        "diff_hunk": "@@ -30,11 +30,14 @@\n     \"@nestjs/platform-express\": \"^7.6.13\",\n     \"@nestjs/swagger\": \"^4.8.0\",\n     \"@nestjs/typeorm\": \"^7.1.5\",\n+    \"@types/jsonwebtoken\": \"^8.5.1\",",
        "created_at": "2021-04-26T19:26:38Z",
        "body": "Removed."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 645041599,
        "path": "src/main.ts",
        "in_reply_to_id": 620573951,
        "id": 620587447,
        "diff_hunk": "@@ -23,6 +27,7 @@ async function bootstrap() {\n       forbidUnknownValues: true,\n     }),\n   );\n+  app.useGlobalInterceptors(new ClassSerializerInterceptor(app.get(Reflector)));",
        "created_at": "2021-04-26T19:28:34Z",
        "body": "Its possible, but if we're manually converting and returning DTO's, it shouldn't matter.  I included the `ClassSerializer` interceptor to hopefully catch any endpoints where we don't manually convert."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/29",
      "updated_at": "2021-04-22T20:45:51Z",
      "title": "Feature: IMERC-68 BE - add email service ",
      "state": "closed",
      "number": 29,
      "merged_at": "2021-04-22T20:45:50Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "f7877a55af79cbef8b0b49d2bca27b75dd3b3f5c",
        "ref": "feature/IMERC-68-setup-email-service-aws-ses"
      },
      "created_at": "2021-04-21T21:40:55Z",
      "closed_at": "2021-04-22T20:45:50Z",
      "body": "https://imercatus.backlog.com/view/IMERC-68\r\n\r\n- [x] Authenticates using AWS creds with SES\r\n- [x] Supports templates with layouts\r\n- [x] Injects stub transport for tests\r\n- [x] Injects [ethereal](https://ethereal.email/) for an option for development convenience\r\n\r\nNote: If the `NODE_ENV=production` SES is injected, else Ethereal is. Tests manually inject a test stub for a transport.\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "4c10e566e31f9408e2206819160a049a5eedda6a",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 642086564,
        "path": "src/mail/transport-ethereal.ts",
        "id": 618318475,
        "diff_hunk": "@@ -0,0 +1,24 @@\n+import { ConfigService } from '@nestjs/config';\n+\n+import * as nodemailer from 'nodemailer';\n+import { EtherealConfig } from '../config/configuration';\n+\n+export const TransportEthereal = {\n+  provide: 'Transport',\n+  useFactory: (configService: ConfigService) => {\n+    const ethereal = configService.get<EtherealConfig>('ethereal');\n+\n+    const transport = nodemailer.createTransport({\n+      host: 'smtp.ethereal.email',\n+      port: 587,",
        "created_at": "2021-04-22T11:32:16Z",
        "body": "Should we pull these values out and add them to `EtherealConfig` with some sane defaults?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 642086564,
        "path": "src/mail/transport-ses.ts",
        "id": 618318773,
        "diff_hunk": "@@ -0,0 +1,26 @@\n+import { ConfigService } from '@nestjs/config';\n+\n+import * as nodemailer from 'nodemailer';\n+import * as ses from 'nodemailer-ses-transport';\n+import { AwsConfig } from '../config/configuration';\n+\n+export const TransportSes = {\n+  provide: 'Transport',\n+  useFactory: (configService: ConfigService) => {\n+    const aws = configService.get<AwsConfig>('aws');\n+\n+    const transport = nodemailer.createTransport(\n+      ses({\n+        accessKeyId: aws.accessKeyId,\n+        secretAccessKey: aws.secretAccessKey,\n+        region: aws.defaultRegion,\n+      }),\n+      {\n+        from: '\"iMercata Team\" <noreply@imercata.com>',",
        "created_at": "2021-04-22T11:32:45Z",
        "body": "Same as the above.  Maybe move this email to `ConfigService`?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 642086564,
        "path": "src/templates/layout/template.hbs",
        "id": 618319120,
        "diff_hunk": "@@ -0,0 +1,15 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n+<html>\n+\n+<head>\n+  <meta charset=\"utf-8\">\n+  <title>iMercata App</title>",
        "created_at": "2021-04-22T11:33:23Z",
        "body": "This should probably be a placeholder as well."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 642191241,
        "path": ".env.test.example",
        "id": 618394251,
        "diff_hunk": "@@ -21,4 +21,8 @@ AUTH0_TENANT=https://imercata-dev.us.auth0.com\n AUTH0_ENDUSER=bruno.krebs@imercatus.com\n AUTH0_ENDUSER_PASSWORD=myPassword!2123\n AUTH0_CLIENT_ID=ibtB...3EGdn\n-AUTH0_CLIENT_SECRET=X__MDVUI...4R_vDkITdFUN\n\\ No newline at end of file\n+AUTH0_CLIENT_SECRET=X__MDVUI...4R_vDkITdFUN\n+\n+# Email testing with Ethereal service\n+ETHEREAL_USER=\n+ETHEREAL_PASS=",
        "created_at": "2021-04-22T13:20:34Z",
        "body": "I wonder if we will need some sort of more granular documentation on how to get a dev and local test envs up & running. I mean, right now, I just see that there is this `ETHEREAL_USER` env var being defined here and that it is used once on `src/config/configuration.ts`, but I have no idea what do I have to do next.\r\n\r\nOk, ok, this might not be the best example because it is freaking easy to go to https://ethereal.email/ and create my creds. In fact, the example above `AUTH0_*` would be a better one. Right now, no one knows how to configure Auth0 but me.\r\n\r\nSo I wonder what should we do:\r\n1. let people figure out by themselves (bad and cumbersome)\r\n2. share some 1Password vault or similar (as Jody mentioned once) with env vars for dev/test\r\n3. add a task to our Definition of Done (which does not exist yet) to doc every new env var properly\r\n\r\nThoughts, @alkema @t3hpr1m3?\r\n\r\n\r\n\r\n"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 642205512,
        "path": "src/templates/layout/template.hbs",
        "in_reply_to_id": 618319120,
        "id": 618404405,
        "diff_hunk": "@@ -0,0 +1,15 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n+<html>\n+\n+<head>\n+  <meta charset=\"utf-8\">\n+  <title>iMercata App</title>",
        "created_at": "2021-04-22T13:32:58Z",
        "body": "Do you mean a variable like `{{title}}`?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 642191241,
        "path": "src/mail/mail.service.ts",
        "id": 618406359,
        "diff_hunk": "@@ -0,0 +1,26 @@\n+import { Mailer } from 'nodemailer';\n+import * as hbs from 'nodemailer-express-handlebars';\n+import { Injectable, Inject } from '@nestjs/common';\n+import { ConfigService } from '@nestjs/config';\n+import * as path from 'path';\n+\n+@Injectable()\n+export class MailService {\n+  constructor(\n+    private readonly configService: ConfigService,",
        "created_at": "2021-04-22T13:35:12Z",
        "body": "not being used"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 642191241,
        "path": "src/mail/mail.service.ts",
        "in_reply_to_id": 618406359,
        "id": 618407465,
        "diff_hunk": "@@ -0,0 +1,26 @@\n+import { Mailer } from 'nodemailer';\n+import * as hbs from 'nodemailer-express-handlebars';\n+import { Injectable, Inject } from '@nestjs/common';\n+import { ConfigService } from '@nestjs/config';\n+import * as path from 'path';\n+\n+@Injectable()\n+export class MailService {\n+  constructor(\n+    private readonly configService: ConfigService,",
        "created_at": "2021-04-22T13:36:28Z",
        "body": "I wonder if there is an ESLint rules that would highlight this kind of thing... it might be tricky in situations like defining a callback where you know `err` won't be used or whatever, but there might be something out there that is smart enough for that."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 642191241,
        "path": "src/config/configuration.ts",
        "id": 618413597,
        "diff_hunk": "@@ -36,4 +49,13 @@ export default (): Config => ({\n     jwksRequestsPerMinute: Number(process.env.AUTH0_RATE_LIMIT_THRESHOLD) || 10,\n     tenant: process.env.AUTH0_TENANT,\n   },\n+  aws: {\n+    accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n+    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n+    defaultRegion: process.env.AWS_DEFAULT_REGION,\n+  },\n+  ethereal: {\n+    user: process.env.ETHEREAL_USER,\n+    pass: process.env.ETHEREAL_PASS,\n+  },",
        "created_at": "2021-04-22T13:43:11Z",
        "body": "Does it make sense to add `ethereal`, which is test related env vars, to this real-deal piece of code? I feel like we could simply stick to `process.env` on tests."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 642191241,
        "path": "src/mail/mail.service.spec.ts",
        "id": 618416653,
        "diff_hunk": "@@ -0,0 +1,65 @@\n+import { ConfigModule } from '@nestjs/config';\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { MailService } from './mail.service';\n+import configuration from '../config/configuration';\n+import validation from '../config/validation';\n+import { TransportStub } from '../../test/utils/transport-stub';\n+import { mailToText } from '../../test/utils/mail-helpers';\n+\n+jest.useFakeTimers();\n+\n+describe('MailService', () => {\n+  let mailService: MailService;\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.env.test',\n+          load: [configuration],\n+          validationSchema: validation,\n+        }),\n+      ],\n+      providers: [TransportStub, MailService],\n+    }).compile();",
        "created_at": "2021-04-22T13:46:47Z",
        "body": "pretty sure we will end up with an utility function that enables use to creating test modules with a one-liner that even allows us to pass some mocks/overrides. I mean, almost 10 lines of boilerplate here. But, yeah, just checked the real code and right now `createTestingModule` calls are very different."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 642191241,
        "path": "src/mail/transport-ses.ts",
        "in_reply_to_id": 618318773,
        "id": 618418067,
        "diff_hunk": "@@ -0,0 +1,26 @@\n+import { ConfigService } from '@nestjs/config';\n+\n+import * as nodemailer from 'nodemailer';\n+import * as ses from 'nodemailer-ses-transport';\n+import { AwsConfig } from '../config/configuration';\n+\n+export const TransportSes = {\n+  provide: 'Transport',\n+  useFactory: (configService: ConfigService) => {\n+    const aws = configService.get<AwsConfig>('aws');\n+\n+    const transport = nodemailer.createTransport(\n+      ses({\n+        accessKeyId: aws.accessKeyId,\n+        secretAccessKey: aws.secretAccessKey,\n+        region: aws.defaultRegion,\n+      }),\n+      {\n+        from: '\"iMercata Team\" <noreply@imercata.com>',",
        "created_at": "2021-04-22T13:48:18Z",
        "body": "agree with this one ‚òùÔ∏è "
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 642191241,
        "path": "src/mail/transport-ethereal.ts",
        "in_reply_to_id": 618318475,
        "id": 618420341,
        "diff_hunk": "@@ -0,0 +1,24 @@\n+import { ConfigService } from '@nestjs/config';\n+\n+import * as nodemailer from 'nodemailer';\n+import { EtherealConfig } from '../config/configuration';\n+\n+export const TransportEthereal = {\n+  provide: 'Transport',\n+  useFactory: (configService: ConfigService) => {\n+    const ethereal = configService.get<EtherealConfig>('ethereal');\n+\n+    const transport = nodemailer.createTransport({\n+      host: 'smtp.ethereal.email',\n+      port: 587,",
        "created_at": "2021-04-22T13:50:53Z",
        "body": "This is test-related code, so I wouldn't pollute `ConfigService` with test configuration. I would either just put some static values, like what is being done here, or rely on `process.env.*` directly (which is extracted from `.env.test` for flexibility)."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 642191241,
        "path": "src/templates/layout/template.hbs",
        "in_reply_to_id": 618319120,
        "id": 618422316,
        "diff_hunk": "@@ -0,0 +1,15 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n+<html>\n+\n+<head>\n+  <meta charset=\"utf-8\">\n+  <title>iMercata App</title>",
        "created_at": "2021-04-22T13:53:06Z",
        "body": "if this does affect email deliverability or even readability, then I agree. But feels like it is so easy to stick a `{{{title}}}` there or something that I wouldn't even read about these two fancy \"*bility\" words and just add it."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 642191241,
        "path": "test/utils/transport-stub.ts",
        "id": 618424416,
        "diff_hunk": "@@ -0,0 +1,14 @@\n+import { ConfigService } from '@nestjs/config';\n+\n+import * as nodemailer from 'nodemailer';\n+import { stubTransport } from 'nodemailer-stub';\n+\n+export const TransportStub = {\n+  provide: 'Transport',\n+  useFactory: () => {\n+    const transport = nodemailer.createTransport(stubTransport);\n+\n+    return transport;\n+  },\n+  inject: [ConfigService],\n+};",
        "created_at": "2021-04-22T13:55:30Z",
        "body": "why do you need that? Why not use `transport-ethereal` directly? Also, it is my impression that the injected `ConfigService` is not being used here."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 642259640,
        "path": "test/utils/transport-stub.ts",
        "in_reply_to_id": 618424416,
        "id": 618443579,
        "diff_hunk": "@@ -0,0 +1,14 @@\n+import { ConfigService } from '@nestjs/config';\n+\n+import * as nodemailer from 'nodemailer';\n+import { stubTransport } from 'nodemailer-stub';\n+\n+export const TransportStub = {\n+  provide: 'Transport',\n+  useFactory: () => {\n+    const transport = nodemailer.createTransport(stubTransport);\n+\n+    return transport;\n+  },\n+  inject: [ConfigService],\n+};",
        "created_at": "2021-04-22T14:16:55Z",
        "body": "It is a true stub, so no network activity is involved, it also provides a `lastEmail` helper. This is very helpful, so we can test actual emails, both properties, and rendered content.\r\n"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 642333924,
        "path": "src/templates/layout/template.hbs",
        "in_reply_to_id": 618319120,
        "id": 618497271,
        "diff_hunk": "@@ -0,0 +1,15 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n+<html>\n+\n+<head>\n+  <meta charset=\"utf-8\">\n+  <title>iMercata App</title>",
        "created_at": "2021-04-22T15:17:13Z",
        "body": "I will research a little bit. Maybe add the subject value."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 642349618,
        "path": ".env.test.example",
        "in_reply_to_id": 618394251,
        "id": 618508649,
        "diff_hunk": "@@ -21,4 +21,8 @@ AUTH0_TENANT=https://imercata-dev.us.auth0.com\n AUTH0_ENDUSER=bruno.krebs@imercatus.com\n AUTH0_ENDUSER_PASSWORD=myPassword!2123\n AUTH0_CLIENT_ID=ibtB...3EGdn\n-AUTH0_CLIENT_SECRET=X__MDVUI...4R_vDkITdFUN\n\\ No newline at end of file\n+AUTH0_CLIENT_SECRET=X__MDVUI...4R_vDkITdFUN\n+\n+# Email testing with Ethereal service\n+ETHEREAL_USER=\n+ETHEREAL_PASS=",
        "created_at": "2021-04-22T15:30:49Z",
        "body": "I think we should adopt a practice of any secrets that need to be shared, go in a 1Pass Vault. This will be good for project hand-off and better to start early, I think. DM'ing secrets works, but is ultimately is not helping future developers and is insecure for its own reasons.\r\n\r\nThat being said, `ETHEREAL_USER/PASS` is not a big deal to be compromised, but I think if we have a secure practice for all of these, it means we will not get sloppy with more sensitive configs."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 642450796,
        "path": "src/mail/transport-ethereal.ts",
        "in_reply_to_id": 618318475,
        "id": 618578503,
        "diff_hunk": "@@ -0,0 +1,24 @@\n+import { ConfigService } from '@nestjs/config';\n+\n+import * as nodemailer from 'nodemailer';\n+import { EtherealConfig } from '../config/configuration';\n+\n+export const TransportEthereal = {\n+  provide: 'Transport',\n+  useFactory: (configService: ConfigService) => {\n+    const ethereal = configService.get<EtherealConfig>('ethereal');\n+\n+    const transport = nodemailer.createTransport({\n+      host: 'smtp.ethereal.email',\n+      port: 587,",
        "created_at": "2021-04-22T16:50:21Z",
        "body": "üëç "
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 642451405,
        "path": "src/templates/layout/template.hbs",
        "in_reply_to_id": 618319120,
        "id": 618579100,
        "diff_hunk": "@@ -0,0 +1,15 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n+<html>\n+\n+<head>\n+  <meta charset=\"utf-8\">\n+  <title>iMercata App</title>",
        "created_at": "2021-04-22T16:51:00Z",
        "body": "Yeah, I meant `{{title}}`."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 642478823,
        "path": "src/mail/mail.service.spec.ts",
        "in_reply_to_id": 618416653,
        "id": 618599796,
        "diff_hunk": "@@ -0,0 +1,65 @@\n+import { ConfigModule } from '@nestjs/config';\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { MailService } from './mail.service';\n+import configuration from '../config/configuration';\n+import validation from '../config/validation';\n+import { TransportStub } from '../../test/utils/transport-stub';\n+import { mailToText } from '../../test/utils/mail-helpers';\n+\n+jest.useFakeTimers();\n+\n+describe('MailService', () => {\n+  let mailService: MailService;\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.env.test',\n+          load: [configuration],\n+          validationSchema: validation,\n+        }),\n+      ],\n+      providers: [TransportStub, MailService],\n+    }).compile();",
        "created_at": "2021-04-22T17:21:20Z",
        "body": "This just feels weird, but I thought it was the Nestjs way. Open to DRYing this up. Not sure how. I thought it was intentional for modularity."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 642479854,
        "path": "src/config/configuration.ts",
        "in_reply_to_id": 618413597,
        "id": 618600508,
        "diff_hunk": "@@ -36,4 +49,13 @@ export default (): Config => ({\n     jwksRequestsPerMinute: Number(process.env.AUTH0_RATE_LIMIT_THRESHOLD) || 10,\n     tenant: process.env.AUTH0_TENANT,\n   },\n+  aws: {\n+    accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n+    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n+    defaultRegion: process.env.AWS_DEFAULT_REGION,\n+  },\n+  ethereal: {\n+    user: process.env.ETHEREAL_USER,\n+    pass: process.env.ETHEREAL_PASS,\n+  },",
        "created_at": "2021-04-22T17:22:33Z",
        "body": "Removed `ethereal` from config, I am 50/50 but happy to change."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 642481253,
        "path": "src/mail/mail.service.ts",
        "in_reply_to_id": 618406359,
        "id": 618601492,
        "diff_hunk": "@@ -0,0 +1,26 @@\n+import { Mailer } from 'nodemailer';\n+import * as hbs from 'nodemailer-express-handlebars';\n+import { Injectable, Inject } from '@nestjs/common';\n+import { ConfigService } from '@nestjs/config';\n+import * as path from 'path';\n+\n+@Injectable()\n+export class MailService {\n+  constructor(\n+    private readonly configService: ConfigService,",
        "created_at": "2021-04-22T17:24:07Z",
        "body": "Being used now that after a refactor we set transport `options` in this one spot and it is verbatim from the `MailConfig` object. I like this end result."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 642482324,
        "path": "src/mail/transport-ethereal.ts",
        "in_reply_to_id": 618318475,
        "id": 618602254,
        "diff_hunk": "@@ -0,0 +1,24 @@\n+import { ConfigService } from '@nestjs/config';\n+\n+import * as nodemailer from 'nodemailer';\n+import { EtherealConfig } from '../config/configuration';\n+\n+export const TransportEthereal = {\n+  provide: 'Transport',\n+  useFactory: (configService: ConfigService) => {\n+    const ethereal = configService.get<EtherealConfig>('ethereal');\n+\n+    const transport = nodemailer.createTransport({\n+      host: 'smtp.ethereal.email',\n+      port: 587,",
        "created_at": "2021-04-22T17:25:19Z",
        "body": "I did this."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 642483376,
        "path": "src/mail/transport-ses.ts",
        "in_reply_to_id": 618318773,
        "id": 618603004,
        "diff_hunk": "@@ -0,0 +1,26 @@\n+import { ConfigService } from '@nestjs/config';\n+\n+import * as nodemailer from 'nodemailer';\n+import * as ses from 'nodemailer-ses-transport';\n+import { AwsConfig } from '../config/configuration';\n+\n+export const TransportSes = {\n+  provide: 'Transport',\n+  useFactory: (configService: ConfigService) => {\n+    const aws = configService.get<AwsConfig>('aws');\n+\n+    const transport = nodemailer.createTransport(\n+      ses({\n+        accessKeyId: aws.accessKeyId,\n+        secretAccessKey: aws.secretAccessKey,\n+        region: aws.defaultRegion,\n+      }),\n+      {\n+        from: '\"iMercata Team\" <noreply@imercata.com>',",
        "created_at": "2021-04-22T17:26:26Z",
        "body": "Great suggestion, I refactored to take `MailConfig` and pass along to `createTransport`'s options parameter. "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 642633369,
        "path": "src/templates/layout/template.hbs",
        "in_reply_to_id": 618319120,
        "id": 618712922,
        "diff_hunk": "@@ -0,0 +1,15 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n+<html>\n+\n+<head>\n+  <meta charset=\"utf-8\">\n+  <title>iMercata App</title>",
        "created_at": "2021-04-22T20:21:21Z",
        "body": "I made it a `{{title}}`, added some tests that it gets set. I would like data objects passed to mailers to handle title and think that should be in the first actual business-related email story than now.\r\n\r\n[Commit](https://github.com/iMercatus/imercata-backend/pull/29/commits/d5543e741748c660dda9cc06967faae7acd5c071)\r\n\r\nThis is how titles end up behaving for deliverablity, accessibility etc:\r\n\r\n> Proper use of the <title> tag has two benefits email subscribers. First, this tag will set a title on the tab of the webpage when viewing the email in a browser. It also provides a title and some context for users with assistive technology, such as screen readers.\r\n\r\n"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 642639511,
        "path": ".env.test.example",
        "in_reply_to_id": 618394251,
        "id": 618717660,
        "diff_hunk": "@@ -21,4 +21,8 @@ AUTH0_TENANT=https://imercata-dev.us.auth0.com\n AUTH0_ENDUSER=bruno.krebs@imercatus.com\n AUTH0_ENDUSER_PASSWORD=myPassword!2123\n AUTH0_CLIENT_ID=ibtB...3EGdn\n-AUTH0_CLIENT_SECRET=X__MDVUI...4R_vDkITdFUN\n\\ No newline at end of file\n+AUTH0_CLIENT_SECRET=X__MDVUI...4R_vDkITdFUN\n+\n+# Email testing with Ethereal service\n+ETHEREAL_USER=\n+ETHEREAL_PASS=",
        "created_at": "2021-04-22T20:29:13Z",
        "body": "Let's discuss in Slack."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "imercatusScott",
        "html_url": "https://github.com/imercatusScott"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/28",
      "updated_at": "2021-07-02T18:12:39Z",
      "title": "[Snyk] Upgrade rxjs from 6.6.6 to 6.6.7",
      "state": "closed",
      "number": 28,
      "merged_at": "2021-04-22T13:11:11Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "51afcbd773855179c7cf86527336cd4937e9f890",
        "ref": "snyk-upgrade-de782c5d8dd8101d70391552548b8330"
      },
      "created_at": "2021-04-21T02:20:00Z",
      "closed_at": "2021-04-22T13:11:11Z",
      "body": "<h3>Snyk has created this PR to upgrade rxjs from 6.6.6 to 6.6.7.</h3>\n\n![merge advice](https://app.snyk.io/badges/merge-advice/?package_manager=npm&package_name=rxjs&from_version=6.6.6&to_version=6.6.7&pr_id=eba94e63-5757-4c55-b4f1-415a90517b88&visibility=true&has_feature_flag=false)\nAs this is a private repository, Snyk-bot does not have access. Therefore, this PR has been created automatically, but appears to have been created by a real user.</br>\n    :sparkles: Snyk has automatically assigned this pull request, [set who gets assigned](https://app.snyk.io/org/imercatusscott/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/settings/integration).\n\n:information_source: Keep your dependencies up-to-date. This makes it easier to fix existing vulnerabilities and to more quickly identify and fix newly disclosed vulnerabilities when they affect your project.\n<hr/>\n\n- The recommended version is **1 version** ahead of your current version.\n- The recommended version was released **23 days ago**, on 2021-03-28.\n\n\n<details>\n<summary><b>Release notes</b></summary>\n<br/>\n  <details>\n    <summary>Package name: <b>rxjs</b></summary>\n    <ul>\n      <li>\n        <b>6.6.7</b> - <a href=\"https://snyk.io/redirect/github/ReactiveX/rxjs/releases/tag/6.6.7\">2021-03-28</a></br><p>chore(publish): 6.6.7</p>\n      </li>\n      <li>\n        <b>6.6.6</b> - <a href=\"https://snyk.io/redirect/github/ReactiveX/rxjs/releases/tag/6.6.6\">2021-02-25</a></br><p>chore(publish): 6.6.6</p>\n      </li>\n    </ul>\n    from <a href=\"https://snyk.io/redirect/github/reactivex/rxjs/releases\">rxjs GitHub release notes</a>\n  </details>\n</details>\n<hr/>\n\n**Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open upgrade PRs.*\n\nFor more information:  <img src=\"https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJlYmE5NGU2My01NzU3LTRjNTUtYjRmMS00MTVhOTA1MTdiODgiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImViYTk0ZTYzLTU3NTctNGM1NS1iNGYxLTQxNWE5MDUxN2I4OCJ9fQ==\" width=\"0\" height=\"0\"/>\n\nüßê [View latest project report](https://app.snyk.io/org/imercatusscott/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüë©‚Äçüíª [Set who automatically gets assigned](https://app.snyk.io/org/imercatusscott/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr/)\n\nüõ† [Adjust upgrade PR settings](https://app.snyk.io/org/imercatusscott/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr)\n\nüîï [Ignore this dependency or unsubscribe from future upgrade PRs](https://app.snyk.io/org/imercatusscott/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2/settings/integration?pkg&#x3D;rxjs&amp;utm_source&#x3D;github&amp;utm_medium&#x3D;upgrade-pr#auto-dep-upgrades)\n\n<!--- (snyk:metadata:{\"prId\":\"eba94e63-5757-4c55-b4f1-415a90517b88\",\"prPublicId\":\"eba94e63-5757-4c55-b4f1-415a90517b88\",\"dependencies\":[{\"name\":\"rxjs\",\"from\":\"6.6.6\",\"to\":\"6.6.7\"}],\"packageManager\":\"npm\",\"type\":\"auto\",\"projectUrl\":\"https://app.snyk.io/org/imercatusscott/project/87e2f02e-ddbc-4bb7-b086-002440cb0cf2?utm_source=github&utm_medium=upgrade-pr\",\"projectPublicId\":\"87e2f02e-ddbc-4bb7-b086-002440cb0cf2\",\"env\":\"prod\",\"prType\":\"upgrade\",\"vulns\":[],\"issuesToFix\":[],\"upgrade\":[],\"upgradeInfo\":{\"versionsDiff\":1,\"publishedDate\":\"2021-03-28T23:13:44.848Z\"},\"templateVariants\":[\"merge-advice-badge-shown\"],\"hasFixes\":false,\"isMajorUpgrade\":false,\"isBreakingChange\":false,\"priorityScoreList\":[]}) --->\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "4c10e566e31f9408e2206819160a049a5eedda6a",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/27",
      "updated_at": "2021-04-21T00:49:04Z",
      "title": "[IMERC-105] Making ESLint and Prettier more omnipresent",
      "state": "closed",
      "number": 27,
      "merged_at": "2021-04-21T00:49:03Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "1161463f6394d5b8d545067b68868650e05431ac",
        "ref": "IMERC-105/prettier-eslint-omnipresence"
      },
      "created_at": "2021-04-18T18:45:20Z",
      "closed_at": "2021-04-21T00:49:03Z",
      "body": "This makes, like the title is saying, ESLint and Prettier more present everywhere. More specifically, I was seeing ESLint notifications on VSCode on some config files and also having diffs when saving changes to non-`src` and non-`test` files. So I decided to submit this PR (which has a counterpart on the `-web` project).",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "54f8fe75dc47269a41216c339248bf913de0c040",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/26",
      "updated_at": "2021-04-19T15:57:51Z",
      "title": "[IMERC-105] Partials & Patch Endpoints",
      "state": "closed",
      "number": 26,
      "merged_at": "2021-04-19T15:57:50Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "42e6eed4faaedc9b6ac480bd223b43a0c824d9b0",
        "ref": "IMERC-105/patch-endpoints"
      },
      "created_at": "2021-04-17T19:36:57Z",
      "closed_at": "2021-04-19T15:57:51Z",
      "body": "The goal of this PR is to centralize validation and OpenAPI documentation on the entities, instead of having these scattered and duplicated among entities and DTOs.\r\n\r\nIf we agree to move that way, it will be nice to update `Company` endpoints as well.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "54f8fe75dc47269a41216c339248bf913de0c040",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 638276564,
        "path": "src/users/dto/update-user.dto.ts",
        "id": 615306974,
        "diff_hunk": "@@ -1,3 +1,4 @@\n+import { PartialType } from '@nestjs/swagger';\n import { CreateUserDto } from './create-user.dto';\n \n-export class UpdateUserDto extends CreateUserDto {}\n+export class UpdateUserDto extends PartialType(CreateUserDto) {}",
        "created_at": "2021-04-17T21:35:32Z",
        "body": "Were you able to discover why validations working when you are introducing `PartialType` again? I see the test, so it looks like they are working, just curious what the difference is from the original commits."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 638276628,
        "path": "src/users/users.controller.ts",
        "id": 615307096,
        "diff_hunk": "@@ -49,6 +49,7 @@ export class UsersController {\n       ...updateUserDto,\n       sub: idToken.sub,\n     };\n-    return this.usersService.update(id, updatedUser);\n+    await this.usersService.update(id, updatedUser);\n+    return this.usersService.findOne(id);",
        "created_at": "2021-04-17T21:36:57Z",
        "body": "`update` does not return an up-to-date record and we have to query again?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 638276661,
        "path": "src/users/users.service.ts",
        "id": 615307203,
        "diff_hunk": "@@ -13,15 +11,15 @@ export class UsersService {\n     private userRepository: Repository<User>,\n   ) {}\n \n-  create(createUserInput: CreateUserDto): Promise<User> {\n+  create(createUserInput: Partial<User>): Promise<User> {\n     return this.userRepository.save(createUserInput);\n   }\n \n   findOne(id: number) {\n     return this.userRepository.findOne(id);\n   }\n \n-  update(id: number, updateUserDto: UpdateUserDto) {\n-    return this.userRepository.save(updateUserDto);\n+  update(id: number, updateUserDto: Partial<User>) {",
        "created_at": "2021-04-17T21:37:33Z",
        "body": "Can you explain what `Partial<User>` does?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 638276700,
        "path": "test/users.e2e-spec.ts",
        "id": 615307274,
        "diff_hunk": "@@ -151,7 +151,32 @@ describe('AppController (e2e)', () => {\n       });\n   });\n \n-  it('PUT /users/<:user_id> (200)', (done) => {\n+  it('PATCH /users/<:user_id> (200) - partial fields', (done) => {\n+    updateUserDto = new UpdateUserDto();\n+    updateUserDto.firstName = 'J';\n+\n+    request(http)\n+      .patch(`/users/${user.id}`)\n+      .send(updateUserDto)\n+      .set('Accept', 'application/json')\n+      .set('Authorization', `Bearer ${idToken}`)\n+      .expect('Content-Type', /json/)\n+      .end((err, res) => {\n+        expect(res.body).toMatchObject({\n+          firstName: 'J',\n+          lastName: 'Smith',\n+          email: 'jim@foo.com',\n+          phone: '+1(604)555-5555',\n+          onboardingStep: 1,\n+        });\n+        expect(res.body.sub).toBeDefined();\n+        expect(res.body.sub.length).toBeGreaterThan(0);\n+        expect(res.status).toBe(200);\n+        done();\n+      });\n+  });",
        "created_at": "2021-04-17T21:38:02Z",
        "body": "üèÖ "
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 638276957,
        "path": "src/users/users.controller.ts",
        "in_reply_to_id": 615307096,
        "id": 615307704,
        "diff_hunk": "@@ -49,6 +49,7 @@ export class UsersController {\n       ...updateUserDto,\n       sub: idToken.sub,\n     };\n-    return this.usersService.update(id, updatedUser);\n+    await this.usersService.update(id, updatedUser);\n+    return this.usersService.findOne(id);",
        "created_at": "2021-04-17T21:43:35Z",
        "body": "nope, it returns an `UpdateResult` instance which has no info about the updated record. The `update` method can actually update many records, depending on the first param. That's the signature:\r\n\r\n```typescript\r\nupdate(criteria: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindConditions<Entity>, partialEntity: QueryDeepPartialEntity<Entity>): Promise<UpdateResult>;\r\n```\r\n\r\nAnd that's `UpdateResult`:\r\n\r\n```typescript\r\nexport declare class UpdateResult {\r\n    /**\r\n     * Raw SQL result returned by executed query.\r\n     */\r\n    raw: any;\r\n    /**\r\n     * Number of affected rows/documents\r\n     * Not all drivers support this\r\n     */\r\n    affected?: number;\r\n    /**\r\n     * Contains inserted entity id.\r\n     * Has entity-like structure (not just column database name and values).\r\n     */\r\n    /**\r\n     * Generated values returned by a database.\r\n     * Has entity-like structure (not just column database name and values).\r\n     */\r\n    generatedMaps: ObjectLiteral[];\r\n}\r\n```"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 638277003,
        "path": "src/users/dto/update-user.dto.ts",
        "in_reply_to_id": 615306974,
        "id": 615307793,
        "diff_hunk": "@@ -1,3 +1,4 @@\n+import { PartialType } from '@nestjs/swagger';\n import { CreateUserDto } from './create-user.dto';\n \n-export class UpdateUserDto extends CreateUserDto {}\n+export class UpdateUserDto extends PartialType(CreateUserDto) {}",
        "created_at": "2021-04-17T21:44:35Z",
        "body": "Nope, I haven't checked any previous commit. Just read the docs, then started doing it. I have the impression that might be related to the fact that I moved all decorations to `.entity`."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 638277170,
        "path": "src/users/users.service.ts",
        "in_reply_to_id": 615307203,
        "id": 615308154,
        "diff_hunk": "@@ -13,15 +11,15 @@ export class UsersService {\n     private userRepository: Repository<User>,\n   ) {}\n \n-  create(createUserInput: CreateUserDto): Promise<User> {\n+  create(createUserInput: Partial<User>): Promise<User> {\n     return this.userRepository.save(createUserInput);\n   }\n \n   findOne(id: number) {\n     return this.userRepository.findOne(id);\n   }\n \n-  update(id: number, updateUserDto: UpdateUserDto) {\n-    return this.userRepository.save(updateUserDto);\n+  update(id: number, updateUserDto: Partial<User>) {",
        "created_at": "2021-04-17T21:47:50Z",
        "body": "It accepts any parameters defined by `User`: https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype\r\n\r\nI feel like it is useful because this method now allows devs to update whatever they want on an `User`. Even any future property that might be introduced but that is not part of the `UpdateUserDto` class (i.e., that is not exposed to update or insert through the API).\r\n\r\nI can switch back if you prefer, but it makes more sense to me to leave like that. (btw, if we leave like that, I will change the name of the param)."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 639020384,
        "path": "src/users/users.service.ts",
        "in_reply_to_id": 615307203,
        "id": 615959539,
        "diff_hunk": "@@ -13,15 +11,15 @@ export class UsersService {\n     private userRepository: Repository<User>,\n   ) {}\n \n-  create(createUserInput: CreateUserDto): Promise<User> {\n+  create(createUserInput: Partial<User>): Promise<User> {\n     return this.userRepository.save(createUserInput);\n   }\n \n   findOne(id: number) {\n     return this.userRepository.findOne(id);\n   }\n \n-  update(id: number, updateUserDto: UpdateUserDto) {\n-    return this.userRepository.save(updateUserDto);\n+  update(id: number, updateUserDto: Partial<User>) {",
        "created_at": "2021-04-19T15:39:44Z",
        "body": "Thanks. I like it, just seeking clarity.\r\n"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 639020790,
        "path": "src/users/users.controller.ts",
        "in_reply_to_id": 615307096,
        "id": 615959851,
        "diff_hunk": "@@ -49,6 +49,7 @@ export class UsersController {\n       ...updateUserDto,\n       sub: idToken.sub,\n     };\n-    return this.usersService.update(id, updatedUser);\n+    await this.usersService.update(id, updatedUser);\n+    return this.usersService.findOne(id);",
        "created_at": "2021-04-19T15:40:05Z",
        "body": "This is good news. Thanks.\r\n"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/25",
      "updated_at": "2021-04-17T19:28:32Z",
      "title": "[IMERC-105] VSCode launch configurations",
      "state": "closed",
      "number": 25,
      "merged_at": "2021-04-17T19:28:32Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "dc2d3b76a24d21508cf6940da50ea41699c68f99",
        "ref": "IMERC-105/debugging-config"
      },
      "created_at": "2021-04-17T15:48:38Z",
      "closed_at": "2021-04-17T19:28:32Z",
      "body": "This PR adds a couple of launch configurations and fixes the existing one. With that in place, we can simply hit `F5` (or the play button) on VSCode to debug unit tests, e2e tests, and the standalone server itself. Just to make things more clear, if you run the `Debug Unit Tests` launch config, you will be able to put breakpoints both on `.spec.ts` files as on the `.ts` files that are executed as part of the development server.\r\n\r\nOh, and the existing launch config, now called `Debug NestJS API`, will run on \"watch\" mode. That is, you can debug it and, if you change some file, the server will restart automatically.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "7dce6af45e1b7d9809f9a3f3b395646bfc484bcc",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/24",
      "updated_at": "2021-04-17T19:19:45Z",
      "title": "[IMERC-105] Fixing Prettier integration with ESLint",
      "state": "closed",
      "number": 24,
      "merged_at": "2021-04-17T19:19:45Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "d3d82c7564f5fd40822bb905a152d4086ef22750",
        "ref": "IMERC-105/eslint-plugin-prettier"
      },
      "created_at": "2021-04-17T15:40:07Z",
      "closed_at": "2021-04-17T19:19:45Z",
      "body": "Prettier and ESLint were fighting each other on the IDE because sometime in the past we removed the `prettier` plugin for ESLint from its configuration. We did have the dependency already installed (`eslint-plugin-prettier`), but it was simply not being used. That's why you won't find any changes to `package*.json` files related to `prettier` itself.\r\n\r\nHowever, I did install a new dependency called `pretty-quick` which integrates quite well with the `pre-commit` Git hook to make sure all the stages files are formatted _before_ committing it.\r\n\r\nLast comment, I also ran `npm run format` to adjust the style to all our files. So, from now on, we probably won't see any discrepancies when it comes to styling.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "2a257f841a8db1aacc0428cb1883d0955bc33e1b",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/23",
      "updated_at": "2021-04-16T17:59:03Z",
      "title": "Move the test env file to an example, allowing for customization.",
      "state": "closed",
      "number": 23,
      "merged_at": "2021-04-16T17:59:02Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "271bced819d2bc57a9365c4ad7138abc8242f02e",
        "ref": "no-ticket/example-test-dotenv"
      },
      "created_at": "2021-04-16T16:21:50Z",
      "closed_at": "2021-04-16T17:59:02Z",
      "body": "This is more a proposal, looking for input.  In my environment, my PostgreSQL instance for both dev and test is running on a separate VM (with SSD storage) for speed.  This PR just treats the test environment file the same as the dev version.\r\n\r\nI double-checked with @xiang, and the `.env.test` file isn't used by CI at all, meaning there's no requirement, outside of our local development environments, that the file exist at all.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "883f3e4e919c8e316e2451eadac73878fa93a31c",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/22",
      "updated_at": "2021-04-20T19:02:48Z",
      "title": "Feature/imerc 65 be create company endpoint",
      "state": "closed",
      "number": 22,
      "merged_at": "2021-04-20T19:02:47Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "80ebb83df2e62359787e9c39d4c85fea32f909db",
        "ref": "feature/IMERC-65-BE-create-company-endpoint"
      },
      "created_at": "2021-04-16T15:55:48Z",
      "closed_at": "2021-04-20T19:02:47Z",
      "body": "**[IMERC-65 BE - create company endpoint](https://imercatus.backlog.com/view/IMERC-65)**\r\n\r\n**Acceptance Criteria (REST Endpoints)**\r\n\r\n- [x] `GET /companies`\r\n- [x] `GET /companies/{id}`\r\n- [x] `POST /companies`\r\n- [x] `PUT /companies/{id}`\r\n\r\nThis follows closely with @alkema's PR.  I added a few unit tests for the controller, but I'm not sure how much value they provide.\r\n\r\n** Proposed `companies` schema **\r\n\r\n| Attribute | Type |  Required. |\r\n| --------- | -----| ---------- | \r\n| id | int | Y (_auto-generated_) |\r\n| name | string(100) | Y |\r\n| size | int | Y |\r\n| ein | string | N |\r\n| type | enum | N |\r\n| created_at | timestamp | N |\r\n| updated_at | timestamp | N |",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "acf3ba3a1065afecf91d6e0f03e4d5ee7217afe3",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 637878394,
        "path": "src/companies/companies.controller.spec.ts",
        "id": 614967969,
        "diff_hunk": "@@ -0,0 +1,48 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { Repository } from 'typeorm';\n+import { CompaniesController } from './companies.controller';\n+import { CompaniesService } from './companies.service';\n+import { Company } from './entities/company.entity';\n+\n+describe('CompaniesController', () => {\n+  let companiesController: CompaniesController;\n+  let companiesService: CompaniesService;\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      controllers: [CompaniesController],\n+      providers: [\n+        {\n+          provide: 'CompanyRepository',\n+          useClass: Repository,\n+        },\n+        CompaniesService,\n+      ],\n+    }).compile();\n+\n+    companiesService = module.get<CompaniesService>(CompaniesService);\n+    companiesController = module.get<CompaniesController>(CompaniesController);\n+  });\n+\n+  describe('findAll', () => {\n+    it('should return an array of companies', async () => {\n+      const result = [new Company()];\n+      jest.spyOn(companiesService, 'findAll').mockResolvedValue(result);\n+\n+      expect(await companiesController.findAll()).toBe(result);",
        "created_at": "2021-04-16T16:21:51Z",
        "body": "üèÖ I like these tests."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 637878976,
        "path": "src/companies/companies.controller.ts",
        "id": 614968370,
        "diff_hunk": "@@ -0,0 +1,34 @@\n+import {\n+  Body, Controller, Get, Param, Post, Put,\n+  UsePipes, ValidationPipe,\n+} from '@nestjs/common';\n+import { CompaniesService } from './companies.service';\n+import { CreateCompanyDto } from './dto/create-company.dto';\n+import { UpdateCompanyDto } from './dto/update-company.dto';\n+\n+@Controller('companies')\n+export class CompaniesController {\n+  constructor(private readonly companiesService: CompaniesService) {}\n+\n+  @Get()\n+  findAll() {\n+    return this.companiesService.findAll();\n+  }\n+\n+  @Get(':id')\n+  findOne(@Param('id') id: number) {\n+    return this.companiesService.findOne(id);\n+  }\n+\n+  @Post()\n+  @UsePipes(new ValidationPipe())\n+  async create(@Body() createCompanyDto: CreateCompanyDto) {\n+    return this.companiesService.create(createCompanyDto);\n+  }\n+\n+  @Put(':id')\n+  @UsePipes(new ValidationPipe())\n+  async update(@Param('id') id: number, @Body() updateCompanyDto: UpdateCompanyDto) {\n+    return this.companiesService.update(id, updateCompanyDto);\n+  }\n+}",
        "created_at": "2021-04-16T16:22:36Z",
        "body": "Update the AC to not have `PATCH`?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 637899405,
        "path": "src/companies/dto/create-company.dto.ts",
        "id": 614977982,
        "diff_hunk": "@@ -0,0 +1,37 @@\n+import { ApiProperty } from '@nestjs/swagger';\n+import {\n+  MaxLength, IsEnum, IsInt, IsNotEmpty,\n+} from 'class-validator';\n+import { CompanyType } from '../entities/company.entity';\n+\n+export class CreateCompanyDto {\n+  /**\n+   * Company name\n+   */\n+  @IsNotEmpty()\n+  @MaxLength(100)\n+  @ApiProperty()\n+  name: string;\n+\n+  /**\n+   * Company size\n+   */\n+  @IsNotEmpty()\n+  @IsInt()\n+  @ApiProperty()\n+  size: number;\n+\n+  /**\n+   * Company ein\n+   */\n+  @IsNotEmpty()\n+  @ApiProperty()\n+  ein: string;\n+\n+  /**\n+   * Company type\n+   */\n+  @IsEnum(Object.keys(CompanyType).map((k) => CompanyType[k]))\n+  @ApiProperty()",
        "created_at": "2021-04-16T16:34:56Z",
        "body": "How about adding it to the Schema so this info reaches the docs and Schema? e.g.\r\n\r\n```\r\n@ApiProperty({\r\n    type: ..,\r\n    enum: ...,\r\n  })\r\n```\r\n\r\nhttps://docs.nestjs.com/openapi/types-and-parameters"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 637899835,
        "path": "src/companies/entities/company.entity.ts",
        "id": 614978492,
        "diff_hunk": "@@ -0,0 +1,60 @@\n+import {\n+  Column,\n+  CreateDateColumn,\n+  Entity,\n+  PrimaryGeneratedColumn,\n+  UpdateDateColumn,\n+} from 'typeorm';\n+import { ApiProperty } from '@nestjs/swagger';\n+\n+export enum CompanyType {\n+  BS1 = 1,\n+  SS1 = 2,\n+  SS2 = 3,\n+}\n+\n+@Entity({ name: 'companies' })\n+export class Company {\n+  /**\n+   * Company ID\n+   */\n+  @PrimaryGeneratedColumn()\n+  @ApiProperty({ example: 1 })\n+  id: number;\n+\n+  /**\n+   * Company name\n+   */\n+  @Column({ nullable: false, length: 100 })\n+  @ApiProperty({ example: 'Acme Corporation' })\n+  name: string;\n+\n+  /**\n+   * Company size\n+   */\n+  @Column({ nullable: false, type: 'int' })\n+  @ApiProperty({ example: 55 })\n+  size: number;\n+\n+  /**\n+   * Company ein\n+   */\n+  @Column({ nullable: false, length: 50, unique: true })\n+  @ApiProperty({ example: '1234ABCD' })\n+  ein: string;\n+\n+  /**\n+   * Company type\n+   */\n+  @Column({ type: 'enum', enum: CompanyType, nullable: true })",
        "created_at": "2021-04-16T16:35:29Z",
        "body": "üëç \r\n"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 637903248,
        "path": "test/companies.e2e-spec.ts",
        "id": 614982675,
        "diff_hunk": "@@ -0,0 +1,54 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { INestApplication } from '@nestjs/common';\n+import * as request from 'supertest';\n+import { getRepository, Repository } from 'typeorm';\n+import AppModule from '../src/app.module';\n+import { Company, CompanyType } from '../src/companies/entities/company.entity';\n+import { CreateCompanyDto } from '../src/companies/dto/create-company.dto';\n+\n+describe('CompaniesController', () => {\n+  let app: INestApplication;\n+  let http: any;\n+  let company: Company;\n+  let companiesRepo: Repository<Company>;\n+  let createCompanyDto: CreateCompanyDto;\n+\n+  beforeAll(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [AppModule],\n+    }).compile();\n+\n+    app = module.createNestApplication();\n+    await app.init();\n+\n+    http = app.getHttpServer();\n+\n+    createCompanyDto = new CreateCompanyDto();\n+    createCompanyDto.name = 'ACME Corporation';\n+    createCompanyDto.size = 50;\n+    createCompanyDto.ein = 'SOMETHING';\n+    createCompanyDto.type = CompanyType.BS1;\n+\n+    companiesRepo = getRepository(Company);\n+    company = companiesRepo.create(createCompanyDto);\n+    await companiesRepo.save(company);\n+  });\n+\n+  it('POST /companies (201)', (done) => {\n+    request(http)\n+      .post('/companies')\n+      .send(createCompanyDto)\n+      .set('Accept', 'application/json')\n+      .expect('Content-Type', /json/)\n+      .expect(201)\n+      .end((err, res) => {\n+        expect(res.body).toMatchObject({\n+          name: 'ACME Corporation',\n+          size: 50,\n+          ein: 'SOMETHING',\n+          type: 1,\n+        });\n+        done();\n+      });\n+  });\n+});",
        "created_at": "2021-04-16T16:39:55Z",
        "body": "Does the failing case for `POST` work without all the params sent? I found a bug in `/users` when I tested that case, where it reached the `SQL` before `DTO` validations IIRC."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 637930737,
        "path": "src/companies/dto/create-company.dto.ts",
        "in_reply_to_id": 614977982,
        "id": 615005297,
        "diff_hunk": "@@ -0,0 +1,37 @@\n+import { ApiProperty } from '@nestjs/swagger';\n+import {\n+  MaxLength, IsEnum, IsInt, IsNotEmpty,\n+} from 'class-validator';\n+import { CompanyType } from '../entities/company.entity';\n+\n+export class CreateCompanyDto {\n+  /**\n+   * Company name\n+   */\n+  @IsNotEmpty()\n+  @MaxLength(100)\n+  @ApiProperty()\n+  name: string;\n+\n+  /**\n+   * Company size\n+   */\n+  @IsNotEmpty()\n+  @IsInt()\n+  @ApiProperty()\n+  size: number;\n+\n+  /**\n+   * Company ein\n+   */\n+  @IsNotEmpty()\n+  @ApiProperty()\n+  ein: string;\n+\n+  /**\n+   * Company type\n+   */\n+  @IsEnum(Object.keys(CompanyType).map((k) => CompanyType[k]))\n+  @ApiProperty()",
        "created_at": "2021-04-16T17:14:11Z",
        "body": "```\r\n  @ApiProperty({ enum: CatBreed, enumName: 'CatBreed' })\r\n```\r\n"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 637976216,
        "path": "src/migrations/1618237704280-CreateCompanies.ts",
        "id": 615040109,
        "diff_hunk": "@@ -0,0 +1,56 @@\n+import { MigrationInterface, QueryRunner, Table } from 'typeorm';\n+\n+export class CreateCompanies1618237704280 implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.createTable(\n+      new Table({\n+        name: 'companies',\n+        columns: [\n+          {\n+            name: 'id',\n+            type: 'int',\n+            isPrimary: true,\n+            isGenerated: true,\n+            generationStrategy: 'increment',\n+          },\n+          {\n+            name: 'name',\n+            type: 'varchar',\n+            isNullable: false,\n+            length: '100',\n+          },\n+          {\n+            name: 'size',\n+            type: 'int',\n+            isNullable: false,\n+          },\n+          {\n+            name: 'ein',\n+            type: 'varchar',\n+            isNullable: true,\n+            length: '50',",
        "created_at": "2021-04-16T18:16:37Z",
        "body": "unique?\r\n\r\nIt would actually be something like:\r\n\r\n```ts\r\nawait queryRunner.createUniqueConstraint(...)\r\n```\r\n\r\nref: https://orkhan.gitbook.io/typeorm/docs/migrations"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 637978419,
        "path": "test/companies.e2e-spec.ts",
        "in_reply_to_id": 614982675,
        "id": 615041790,
        "diff_hunk": "@@ -0,0 +1,54 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { INestApplication } from '@nestjs/common';\n+import * as request from 'supertest';\n+import { getRepository, Repository } from 'typeorm';\n+import AppModule from '../src/app.module';\n+import { Company, CompanyType } from '../src/companies/entities/company.entity';\n+import { CreateCompanyDto } from '../src/companies/dto/create-company.dto';\n+\n+describe('CompaniesController', () => {\n+  let app: INestApplication;\n+  let http: any;\n+  let company: Company;\n+  let companiesRepo: Repository<Company>;\n+  let createCompanyDto: CreateCompanyDto;\n+\n+  beforeAll(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [AppModule],\n+    }).compile();\n+\n+    app = module.createNestApplication();\n+    await app.init();\n+\n+    http = app.getHttpServer();\n+\n+    createCompanyDto = new CreateCompanyDto();\n+    createCompanyDto.name = 'ACME Corporation';\n+    createCompanyDto.size = 50;\n+    createCompanyDto.ein = 'SOMETHING';\n+    createCompanyDto.type = CompanyType.BS1;\n+\n+    companiesRepo = getRepository(Company);\n+    company = companiesRepo.create(createCompanyDto);\n+    await companiesRepo.save(company);\n+  });\n+\n+  it('POST /companies (201)', (done) => {\n+    request(http)\n+      .post('/companies')\n+      .send(createCompanyDto)\n+      .set('Accept', 'application/json')\n+      .expect('Content-Type', /json/)\n+      .expect(201)\n+      .end((err, res) => {\n+        expect(res.body).toMatchObject({\n+          name: 'ACME Corporation',\n+          size: 50,\n+          ein: 'SOMETHING',\n+          type: 1,\n+        });\n+        done();\n+      });\n+  });\n+});",
        "created_at": "2021-04-16T18:19:45Z",
        "body": "hmmm, yeah, a few more `.e2e` tests would be nice like those related to failing scenarios and `PUT` requests. Thoughts?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 637979169,
        "path": "src/companies/dto/create-company.dto.ts",
        "id": 615042391,
        "diff_hunk": "@@ -0,0 +1,37 @@\n+import { ApiProperty } from '@nestjs/swagger';\n+import {\n+  MaxLength, IsEnum, IsInt, IsNotEmpty,\n+} from 'class-validator';\n+import { CompanyType } from '../entities/company.entity';\n+\n+export class CreateCompanyDto {\n+  /**\n+   * Company name\n+   */\n+  @IsNotEmpty()\n+  @MaxLength(100)\n+  @ApiProperty()\n+  name: string;\n+\n+  /**\n+   * Company size\n+   */\n+  @IsNotEmpty()\n+  @IsInt()\n+  @ApiProperty()\n+  size: number;\n+\n+  /**\n+   * Company ein\n+   */\n+  @IsNotEmpty()\n+  @ApiProperty()",
        "created_at": "2021-04-16T18:20:46Z",
        "body": "Shouldn't we be validating these properties with stuff like `@MaxLength(100)`?"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 638029633,
        "path": "src/companies/companies.controller.ts",
        "in_reply_to_id": 614968370,
        "id": 615081030,
        "diff_hunk": "@@ -0,0 +1,34 @@\n+import {\n+  Body, Controller, Get, Param, Post, Put,\n+  UsePipes, ValidationPipe,\n+} from '@nestjs/common';\n+import { CompaniesService } from './companies.service';\n+import { CreateCompanyDto } from './dto/create-company.dto';\n+import { UpdateCompanyDto } from './dto/update-company.dto';\n+\n+@Controller('companies')\n+export class CompaniesController {\n+  constructor(private readonly companiesService: CompaniesService) {}\n+\n+  @Get()\n+  findAll() {\n+    return this.companiesService.findAll();\n+  }\n+\n+  @Get(':id')\n+  findOne(@Param('id') id: number) {\n+    return this.companiesService.findOne(id);\n+  }\n+\n+  @Post()\n+  @UsePipes(new ValidationPipe())\n+  async create(@Body() createCompanyDto: CreateCompanyDto) {\n+    return this.companiesService.create(createCompanyDto);\n+  }\n+\n+  @Put(':id')\n+  @UsePipes(new ValidationPipe())\n+  async update(@Param('id') id: number, @Body() updateCompanyDto: UpdateCompanyDto) {\n+    return this.companiesService.update(id, updateCompanyDto);\n+  }\n+}",
        "created_at": "2021-04-16T19:34:28Z",
        "body": "Replaced it with `PUT`."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 638060349,
        "path": "src/migrations/1618237704280-CreateCompanies.ts",
        "in_reply_to_id": 615040109,
        "id": 615103803,
        "diff_hunk": "@@ -0,0 +1,56 @@\n+import { MigrationInterface, QueryRunner, Table } from 'typeorm';\n+\n+export class CreateCompanies1618237704280 implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.createTable(\n+      new Table({\n+        name: 'companies',\n+        columns: [\n+          {\n+            name: 'id',\n+            type: 'int',\n+            isPrimary: true,\n+            isGenerated: true,\n+            generationStrategy: 'increment',\n+          },\n+          {\n+            name: 'name',\n+            type: 'varchar',\n+            isNullable: false,\n+            length: '100',\n+          },\n+          {\n+            name: 'size',\n+            type: 'int',\n+            isNullable: false,\n+          },\n+          {\n+            name: 'ein',\n+            type: 'varchar',\n+            isNullable: true,\n+            length: '50',",
        "created_at": "2021-04-16T20:24:14Z",
        "body": "Added."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/21",
      "updated_at": "2021-04-16T18:18:51Z",
      "title": "[IMERC-97] User Decorators",
      "state": "closed",
      "number": 21,
      "merged_at": "2021-04-16T18:08:36Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "35a1d7d4eca8e23aa41e5931f1f44bb0c3ba83bc",
        "ref": "IMERC-97/injecting-user"
      },
      "created_at": "2021-04-16T15:48:37Z",
      "closed_at": "2021-04-16T18:08:36Z",
      "body": "This PR introduces a new decorator, `@IdToken()`, that allows developers to inject the ID token of the caller on a controller:\r\n\r\n```ts\r\n@Get('/secured')\r\n@UseGuards(AuthenticationGuard)\r\ngetSecuredHello(@IdToken() idToken: UserProfile) {\r\n  const response = {\r\n    message: this.appService.getHello(),\r\n    callerEmail: idToken.email,\r\n  };\r\n  return response;\r\n}\r\n```\r\n\r\nThe next PR will introduce a similar decorator, but that will load the user information from the database, in case we need more data. Prefer this one if you don't need user data apart from their subject id and/or email address.\r\n\r\nFor testing environments, you will need the following env vars:\r\n\r\n```\r\n... typeorm vars not changed\r\n\r\n# Auth0 config\r\nAUTH0_TENANT=https://imercata-dev.us.auth0.com\r\n\r\n# Auth0 E2E test config\r\nAUTH0_ENDUSER=bruno.krebs@imercatus.com\r\nAUTH0_ENDUSER_PASSWORD=myPassword!2123\r\nAUTH0_CLIENT_ID=ibtB...3EGdn\r\nAUTH0_CLIENT_SECRET=X__MDVUI...4R_vDkITdFUN\r\n```\r\n\r\nAsk me for those. By the way, `.env.test` is now on `.gitignore`. So you will need to make a copy of the `.env.test.example` and update it accordingly.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "7b561378f4b5ada58c912d282d52e04c86d125ae",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 637919733,
        "path": "src/users/id-token.decorator.ts",
        "id": 614997063,
        "diff_hunk": "@@ -0,0 +1,19 @@\n+import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n+\n+export interface UserProfile {\n+  email?: string | null;\n+  email_verified?: boolean | null;\n+  name?: string | null;\n+  nickname?: string | null;\n+  picture?: string | null;\n+  sub?: string | null;\n+  updated_at?: string | null;\n+  [key: string]: unknown; // Any custom claim which could be in the profile",
        "created_at": "2021-04-16T16:59:36Z",
        "body": "Thoughts on storing this profile as `JSONB` on the user? Would that be helpful or is it overkill?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 637963021,
        "path": "src/users/id-token.decorator.ts",
        "in_reply_to_id": 614997063,
        "id": 615030304,
        "diff_hunk": "@@ -0,0 +1,19 @@\n+import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n+\n+export interface UserProfile {\n+  email?: string | null;\n+  email_verified?: boolean | null;\n+  name?: string | null;\n+  nickname?: string | null;\n+  picture?: string | null;\n+  sub?: string | null;\n+  updated_at?: string | null;\n+  [key: string]: unknown; // Any custom claim which could be in the profile",
        "created_at": "2021-04-16T17:58:13Z",
        "body": "No, I would keep this info fresh by just relying on Auth0. We might be needing a thing or two from time to time (e.g., persisting the picture on our side to make creating UI easier), but then I would add those explicitly."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 637977824,
        "path": "src/users/id-token.decorator.ts",
        "in_reply_to_id": 614997063,
        "id": 615041322,
        "diff_hunk": "@@ -0,0 +1,19 @@\n+import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n+\n+export interface UserProfile {\n+  email?: string | null;\n+  email_verified?: boolean | null;\n+  name?: string | null;\n+  nickname?: string | null;\n+  picture?: string | null;\n+  sub?: string | null;\n+  updated_at?: string | null;\n+  [key: string]: unknown; // Any custom claim which could be in the profile",
        "created_at": "2021-04-16T18:18:51Z",
        "body": "Agreed."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/20",
      "updated_at": "2021-04-16T13:04:01Z",
      "title": "Feature: Adds user onboarding step",
      "state": "closed",
      "number": 20,
      "merged_at": "2021-04-16T13:04:01Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "5eca483c416b9e66db80d10de490b76e05b80091",
        "ref": "IMERC-66-onboarding-workflow"
      },
      "created_at": "2021-04-15T22:18:03Z",
      "closed_at": "2021-04-16T13:04:01Z",
      "body": "IMERC-66 BE - create resource - onboarding workflow\r\nhttps://imercatus.backlog.com/view/IMERC-66\r\n\r\n```\r\n‚ûú  imercata-backend git:(IMERC-66-onboarding-workflow) curl -X 'POST' \\\r\n  'http://[::1]:4000/users' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"firstName\": \"Jody\",\r\n  \"lastName\": \"Alkema\",\r\n  \"email\": \"jody.alkema@imercatus.com\",\r\n  \"phone\": \"+1(604)555-5555\",\r\n  \"onboardingStep\": 1\r\n}'\r\n...\r\n{\r\n  \"firstName\":\"Jody\",\r\n  \"lastName\":\"Alkema\",\r\n  \"email\":\"jody.alkema@imercatus.com\",\r\n  \"phone\":\"+1(604)555-5555\",\r\n  \"onboardingStep\":1,\r\n  \"id\":4,\r\n  \"createdAt\":\"2021-04-15T22:35:58.835Z\",\r\n  \"updatedAt\":\"2021-04-15T22:35:58.835Z\"\r\n}\r\n‚ûú  imercata-backend git:(IMERC-66-onboarding-workflow)\r\n```\r\n\r\n**Swagger screenshot**\r\n\r\n<img width=\"1513\" alt=\"Screen Shot 2021-04-15 at 3 31 47 PM\" src=\"https://user-images.githubusercontent.com/43570/114946285-be4ef900-9dff-11eb-9667-78d3f4268995.png\">\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "e58cd64880da46b113e1965a7a230a4d7ef4372e",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/19",
      "updated_at": "2021-04-15T20:58:16Z",
      "title": "Bugfix: Production start script broken",
      "state": "closed",
      "number": 19,
      "merged_at": "2021-04-15T20:58:15Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "4aeba7206d2963f58412b102d23c372dcab931ef",
        "ref": "bugfix/cannot-start-prod"
      },
      "created_at": "2021-04-15T20:24:51Z",
      "closed_at": "2021-04-15T20:58:16Z",
      "body": "https://imercatus.backlog.com/view/IMERC-103\r\n\r\n**Before**\r\n\r\n```\r\n‚ûú  imercata-backend git:(main) npm run build\r\n\r\n> imercata-backend@0.0.1 prebuild /Users/jody/src/imercata-backend\r\n> rimraf dist\r\n\r\n\r\n> imercata-backend@0.0.1 build /Users/jody/src/imercata-backend\r\n> nest build\r\n\r\n‚ûú  imercata-backend git:(main) NODE_ENV=production npm run start:prod\r\n\r\n> imercata-backend@0.0.1 start:prod /Users/jody/src/imercata-backend\r\n> node dist/main\r\n\r\ninternal/modules/cjs/loader.js:883\r\n  throw err;\r\n  ^\r\n\r\nError: Cannot find module '/Users/jody/src/imercata-backend/dist/main'\r\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:880:15)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\r\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\r\n    at internal/main/run_main_module.js:17:47 {\r\n  code: 'MODULE_NOT_FOUND',\r\n  requireStack: []\r\n}\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno 1\r\nnpm ERR! imercata-backend@0.0.1 start:prod: `node dist/main`\r\nnpm ERR! Exit status 1\r\nnpm ERR!\r\nnpm ERR! Failed at the imercata-backend@0.0.1 start:prod script.\r\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     /Users/jody/.npm/_logs/2021-04-15T20_18_45_880Z-debug.log\r\n```\r\n\r\n**After**\r\n\r\n```\r\n‚ûú  imercata-backend git:(bugfix/cannot-start-prod) npm run build\r\n\r\n> imercata-backend@0.0.1 prebuild /Users/jody/src/imercata-backend\r\n> rimraf dist\r\n\r\n\r\n> imercata-backend@0.0.1 build /Users/jody/src/imercata-backend\r\n> nest build\r\n\r\n‚ûú  imercata-backend git:(bugfix/cannot-start-prod) NODE_ENV=production npm run start:prod\r\n\r\n> imercata-backend@0.0.1 start:prod /Users/jody/src/imercata-backend\r\n> node dist/src/main\r\n\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [NestFactory] Starting Nest application...\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [InstanceLoader] TypeOrmModule dependencies initialized +44ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [InstanceLoader] ConfigHostModule dependencies initialized +1ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [InstanceLoader] ConfigModule dependencies initialized +1ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [InstanceLoader] ConfigModule dependencies initialized +0ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [InstanceLoader] TypeOrmCoreModule dependencies initialized +52ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [InstanceLoader] TypeOrmModule dependencies initialized +0ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [InstanceLoader] AppModule dependencies initialized +1ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [InstanceLoader] UsersModule dependencies initialized +1ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [RoutesResolver] AppController {}: +129ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [RouterExplorer] Mapped {, GET} route +3ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [RouterExplorer] Mapped {/secured, GET} route +0ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [RoutesResolver] UsersController {/users}: +1ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [RouterExplorer] Mapped {/users, POST} route +0ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [RouterExplorer] Mapped {/users/:id, GET} route +1ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [RouterExplorer] Mapped {/users/:id, PUT} route +0ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [RoutesResolver] UsersController {/users}: +1ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [RouterExplorer] Mapped {/users, POST} route +0ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [RouterExplorer] Mapped {/users/:id, GET} route +1ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [RouterExplorer] Mapped {/users/:id, PUT} route +0ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [NestApplication] Nest application successfully started +2ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [App] NODE_ENV: production +3ms\r\n[Nest] 45167   - 2021-04-15, 1:19:54 p.m.   [App] Server started at http://[::1]:4000 +0ms\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "63302f1e8f8bcb057cd26224b225e6131e0d2772",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/18",
      "updated_at": "2021-04-15T17:11:00Z",
      "title": "Downgrade to lockfileVersion@1, npm 6.14.11",
      "state": "closed",
      "number": 18,
      "merged_at": "2021-04-15T17:10:42Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "f3b0992db5ce1c87beb76095dad7603d6eec76c7",
        "ref": "no-ticket/npm-6.14.11"
      },
      "created_at": "2021-04-15T17:06:58Z",
      "closed_at": "2021-04-15T17:10:42Z",
      "body": "Reverts a needless `lockfileVersion` change to 2 from an npm version `7.9.0`.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "519cf7b48c90df2431ee17042d8ff01189b892c0",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/17",
      "updated_at": "2021-04-15T16:11:56Z",
      "title": "Auto-load dotenv variables prior to clearing the test database.",
      "state": "closed",
      "number": 17,
      "merged_at": "2021-04-15T16:11:55Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "eb0412b93e4c8a1dbee0d4aa588f4d22331ddf2b",
        "ref": "no-ticket/dotenv-clear-test-db"
      },
      "created_at": "2021-04-15T15:38:23Z",
      "closed_at": "2021-04-15T16:11:55Z",
      "body": "This adds just enough code to auto-load the test `.dotenv` configuration when clearing the test db.  All it does is alleviate the need to prefix the command with any dotenv logic.  So:\r\n```\r\n$ npm run test:prepare\r\n```\r\nshould be enough.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "97a940a826de7c24deb84175fec7a44d6b6acd82",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/16",
      "updated_at": "2021-04-14T23:55:17Z",
      "title": "Mocking JwtMiddlewareFactory on e2e tests",
      "state": "closed",
      "number": 16,
      "merged_at": "2021-04-14T23:55:17Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "821a996932db60e94e39d9f1e476d4da6935bf1f",
        "ref": "hotfix/mocked-jwt-middleware"
      },
      "created_at": "2021-04-14T23:39:50Z",
      "closed_at": "2021-04-14T23:55:17Z",
      "body": "This PR introduces a test for a guarded endpoint. This should serve as a reference for future secured endpoints.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "cc2fcef3c5c663f40cbfd0a3b0441d9138f75b4b",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/15",
      "updated_at": "2021-04-14T23:07:05Z",
      "title": "Fixing AuthGuard",
      "state": "closed",
      "number": 15,
      "merged_at": "2021-04-14T23:07:04Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "42b727c596dd54a3a1ec5a6e7f5161bf7dcc2e29",
        "ref": "hotfix/auth-guard-e2e"
      },
      "created_at": "2021-04-14T22:32:21Z",
      "closed_at": "2021-04-14T23:07:04Z",
      "body": "- Adds `AUTH0_TENANT` to `.env.development.example`\r\n- Isolates integration with Auth0 (`express-jwt` and `jwks-rsa`) on a factory to facilitate mocking\r\n- Fixes Swagger and the `/` endpoint by allowing requests to them",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "8d8f6663871d8a61afe29cee84718a3c453cde6d",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/14",
      "updated_at": "2021-04-15T00:13:16Z",
      "title": "Feature create user endpoint [2]",
      "state": "closed",
      "number": 14,
      "merged_at": "2021-04-15T00:12:47Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c84e150b4f3c9695f0bd591e297bcc2bcb3a0c57",
        "ref": "feature/IMERC-64-BE-create-user-endpoint-2"
      },
      "created_at": "2021-04-14T19:31:29Z",
      "closed_at": "2021-04-15T00:12:47Z",
      "body": "**[IMERC-64 BE - create user endpoint](https://imercatus.backlog.com/view/IMERC-64)**\r\n\r\n2 of 2 PRs, PR 1 [here](https://github.com/iMercatus/imercata-backend/pull/13).\r\n\r\n- Use Camel Case for API and Snake Case for DB, configure DB Snake Case at app level\r\n- Changes API to return Camel case",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "aa82d5b4de9ad7b0e1011fdcee4395cec04bd3b2",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 636152116,
        "path": "src/users/users.controller.ts",
        "id": 613644645,
        "diff_hunk": "@@ -19,16 +19,16 @@ export class UsersController {\n   }\n \n   @Get(':id')\n-  findOne(@Param('id') id: string) {\n-    return this.usersService.findOne(+id);\n+  findOne(@Param('id') id: number) {\n+    return this.usersService.findOne(id);\n   }\n \n-  @Patch(':id')\n+  @Put(':id')\n   @UsePipes(new ValidationPipe())\n   async update(\n-  @Param('id') id: string,\n+  @Param('id') id: number,",
        "created_at": "2021-04-14T23:15:22Z",
        "body": "it looks like this indentation is wrong... `lint` doesn't catch this? BTW, do you have Prettier's extension on VS Code? It should format for you automatically."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 636167544,
        "path": "src/users/users.controller.ts",
        "in_reply_to_id": 613644645,
        "id": 613657681,
        "diff_hunk": "@@ -19,16 +19,16 @@ export class UsersController {\n   }\n \n   @Get(':id')\n-  findOne(@Param('id') id: string) {\n-    return this.usersService.findOne(+id);\n+  findOne(@Param('id') id: number) {\n+    return this.usersService.findOne(id);\n   }\n \n-  @Patch(':id')\n+  @Put(':id')\n   @UsePipes(new ValidationPipe())\n   async update(\n-  @Param('id') id: string,\n+  @Param('id') id: number,",
        "created_at": "2021-04-14T23:53:59Z",
        "body": "I do have the prettier extension. Both missed that one for some reason... Anyways fixed."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/13",
      "updated_at": "2021-04-14T20:02:29Z",
      "title": "Feature - create user endpoint",
      "state": "closed",
      "number": 13,
      "merged_at": "2021-04-14T16:37:03Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ea6dc778f813f4c43119589a67be38469371fdf7",
        "ref": "feature/IMERC-64-BE-create-user-endpoint"
      },
      "created_at": "2021-04-09T06:11:03Z",
      "closed_at": "2021-04-14T16:37:03Z",
      "body": "**[IMERC-64 BE - create user endpoint](https://imercatus.backlog.com/view/IMERC-64)**\r\n\r\n**Acceptance Criteria (REST Endpoints)**\r\n\r\n- [x] `POST /users`\r\n- [x] `GET /users/{id}`\r\n- [x] `PATCH /users/{id}`\r\n\r\nIn order to get something working, this PR made a few decisions that are open to discussion (or change in a subsequent PR):\r\n\r\n- [DTOs](https://docs.nestjs.com/controllers) to define schema.\r\n- [NestJS/Swagger](https://docs.nestjs.com/openapi/introduction) for documentation and schema generation.\r\n- A working [e2e test ](https://docs.nestjs.com/fundamentals/testing) for testing some endpoints.\r\n- A database cleaner script, so the test suite can be run against a test DB deterministically.\r\n- Validations for models using [class-validator](https://github.com/typestack/class-validator).\r\n- Connecting model validations to the API with [ValidationPipes](https://docs.nestjs.com/techniques/validation), [globally](https://docs.nestjs.com/pipes#global-scoped-pipes).\r\n- Use of [NestJS plugins](https://trilon.io/blog/eliminating-redundancy-with-nestjs-cli-plugins) to map Model property comments to schema comments and some validations to schema details within Swagger.\r\n\r\n**Current `users` DB schema**\r\n\r\n```\r\nimercata_development=# \\d users\r\n                                        Table \"public.users\"\r\n   Column   |            Type             | Collation | Nullable |              Default\r\n------------+-----------------------------+-----------+----------+-----------------------------------\r\n id         | integer                     |           | not null | nextval('users_id_seq'::regclass)\r\n first_name | character varying(100)      |           | not null |\r\n created_at | timestamp without time zone |           | not null | CURRENT_TIMESTAMP\r\n updated_at | timestamp without time zone |           | not null | CURRENT_TIMESTAMP\r\n last_name  | character varying(100)      |           | not null |\r\n email      | character varying(100)      |           | not null |\r\n phone      | character varying(100)      |           | not null |\r\nIndexes:\r\n    \"PK_a3ffb1c0c8416b9fc6f907b7433\" PRIMARY KEY, btree (id)\r\n```\r\n\r\n**Swagger Docs**\r\n\r\nThis PR adds Swagger integration with schema defined in DTOs available at http://[::1]:3000/api/.\r\n\r\n![Screen Shot 2021-04-13 at 4 39 28 PM](https://user-images.githubusercontent.com/43570/114634631-d267ee80-9c77-11eb-89bf-dd92a2f0a298.png)\r\n\r\nSome open questions that we don't have to resolve in this PR:\r\n\r\n- API convention: attribute casing, they are underscored here.\r\n- API schema: It is available from the browser here: http://localhost:3000/api-json. I have not confirmed its structure. I would like to discuss how we want to use schemas for the project before we get too far along though, as I am not convinced we can manage all the schema details with Nest/Swagger.\r\n\r\nWe could go on, but it might be best to merge this as clean as possible and change upstream.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ac056369531446c0e6b3b68dfa8eba3e62f1991a",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 633917010,
        "path": "bin/clear_test_db.ts",
        "id": 611916071,
        "diff_hunk": "@@ -0,0 +1,27 @@\n+#!/usr/bin/env ts-node\n+\n+\"use strict\";",
        "created_at": "2021-04-12T20:00:32Z",
        "body": "https://stackoverflow.com/questions/31391760/use-strict-needed-in-a-typescript-file"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 633917010,
        "path": "bin/clear_test_db.ts",
        "id": 611917967,
        "diff_hunk": "@@ -0,0 +1,27 @@\n+#!/usr/bin/env ts-node\n+\n+\"use strict\";\n+\n+import { ConnectionOptions, createConnection, QueryRunner } from \"typeorm\";\n+\n+if (process.env.NODE_ENV === 'test') {\n+    createConnection().then(async connection => {\n+        if (connection.driver['database'] != 'imercata_tdest') {\n+            console.log(`database (${connection.driver['database']}) is not 'imercata_test', exiting`)\n+            process.exit(1);\n+        }\n+\n+        const entities = connection.entityMetadatas;\n+        for (const entity of entities) {\n+            const repository = await connection.getRepository(entity.name);\n+            const s = await repository.query(\n+                `TRUNCATE TABLE ${entity.tableName} RESTART IDENTITY;`\n+            );\n+            console.log(s)\n+        }\n+        connection.close();\n+    });\n+} else {\n+    console.log(`NODE_ENV (${process.env.NODE_ENV}) is not 'test', exiting`);\n+    process.exit(1);",
        "created_at": "2021-04-12T20:03:56Z",
        "body": "I would use early-exits to improve with readability. In that case, I would do:\r\n\r\n```ts\r\nif (process.env.NODE_ENV !== 'test') {\r\n    console.log(`NODE_ENV (${process.env.NODE_ENV}) is not 'test', exiting`);\r\n    return process.exit(1);\r\n}\r\n\r\ncreateConnection().then(...\r\n```"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 633917010,
        "path": "package.json",
        "id": 611918309,
        "diff_hunk": "@@ -14,11 +14,12 @@\n     \"start:debug\": \"nest start --debug --watch\",\n     \"start:prod\": \"node dist/main\",\n     \"lint\": \"eslint \\\"{src,test}/**/*.ts\\\"\",\n+    \"test:prepare\": \"bin/clear_test_db.ts\",",
        "created_at": "2021-04-12T20:04:38Z",
        "body": "I would rather go with hyphen-separated filenames (`clear-test-db.ts`), looks more conventional to me"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 633979736,
        "path": "bin/clear_test_db.ts",
        "in_reply_to_id": 611916071,
        "id": 611965167,
        "diff_hunk": "@@ -0,0 +1,27 @@\n+#!/usr/bin/env ts-node\n+\n+\"use strict\";",
        "created_at": "2021-04-12T21:26:08Z",
        "body": "will ‚úÇÔ∏è "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 633981271,
        "path": "bin/clear_test_db.ts",
        "in_reply_to_id": 611917967,
        "id": 611966438,
        "diff_hunk": "@@ -0,0 +1,27 @@\n+#!/usr/bin/env ts-node\n+\n+\"use strict\";\n+\n+import { ConnectionOptions, createConnection, QueryRunner } from \"typeorm\";\n+\n+if (process.env.NODE_ENV === 'test') {\n+    createConnection().then(async connection => {\n+        if (connection.driver['database'] != 'imercata_tdest') {\n+            console.log(`database (${connection.driver['database']}) is not 'imercata_test', exiting`)\n+            process.exit(1);\n+        }\n+\n+        const entities = connection.entityMetadatas;\n+        for (const entity of entities) {\n+            const repository = await connection.getRepository(entity.name);\n+            const s = await repository.query(\n+                `TRUNCATE TABLE ${entity.tableName} RESTART IDENTITY;`\n+            );\n+            console.log(s)\n+        }\n+        connection.close();\n+    });\n+} else {\n+    console.log(`NODE_ENV (${process.env.NODE_ENV}) is not 'test', exiting`);\n+    process.exit(1);",
        "created_at": "2021-04-12T21:28:26Z",
        "body": "Will do, `return` won't be allowed unless within a function body though."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 634033131,
        "path": "package.json",
        "in_reply_to_id": 611918309,
        "id": 612009636,
        "diff_hunk": "@@ -14,11 +14,12 @@\n     \"start:debug\": \"nest start --debug --watch\",\n     \"start:prod\": \"node dist/main\",\n     \"lint\": \"eslint \\\"{src,test}/**/*.ts\\\"\",\n+    \"test:prepare\": \"bin/clear_test_db.ts\",",
        "created_at": "2021-04-12T23:07:00Z",
        "body": "agreed, done."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 634955892,
        "path": "bin/clear-test-db.ts",
        "id": 612722617,
        "diff_hunk": "@@ -0,0 +1,24 @@\n+#!/usr/bin/env ts-node\n+\n+import { createConnection } from \"typeorm\";\n+\n+if (process.env.NODE_ENV !== 'test') {\n+    console.log(`NODE_ENV (${process.env.NODE_ENV}) is not 'test', exiting`);\n+    process.exit(1);\n+}\n+\n+createConnection().then(async connection => {\n+    if (connection.driver['database'] != 'imercata_test') {\n+        console.log(`database (${connection.driver['database']}) is not 'imercata_test', exiting`)\n+        process.exit(1);\n+    }",
        "created_at": "2021-04-13T19:34:03Z",
        "body": "What is the point of this check?  I get what it's doing, but why?  If the database name has to be `imercata_test`, why don't we just hard-code it into the codebase?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 634984426,
        "path": "bin/clear-test-db.ts",
        "in_reply_to_id": 612722617,
        "id": 612744264,
        "diff_hunk": "@@ -0,0 +1,24 @@\n+#!/usr/bin/env ts-node\n+\n+import { createConnection } from \"typeorm\";\n+\n+if (process.env.NODE_ENV !== 'test') {\n+    console.log(`NODE_ENV (${process.env.NODE_ENV}) is not 'test', exiting`);\n+    process.exit(1);\n+}\n+\n+createConnection().then(async connection => {\n+    if (connection.driver['database'] != 'imercata_test') {\n+        console.log(`database (${connection.driver['database']}) is not 'imercata_test', exiting`)\n+        process.exit(1);\n+    }",
        "created_at": "2021-04-13T20:11:10Z",
        "body": "Good question, this an area that is outstanding for improvement in the PR.\r\n\r\nWhen the command is run without making sure the environment variables are exported for test, then the system will use `.env` and run this on the development database, this prevents that.\r\n\r\nFor now I am doing this for better or worse:\r\n\r\n```\r\ndotenv -e .env.test npm run test:e2e\r\n```"
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 634990149,
        "path": "bin/clear-test-db.ts",
        "in_reply_to_id": 612722617,
        "id": 612748557,
        "diff_hunk": "@@ -0,0 +1,24 @@\n+#!/usr/bin/env ts-node\n+\n+import { createConnection } from \"typeorm\";\n+\n+if (process.env.NODE_ENV !== 'test') {\n+    console.log(`NODE_ENV (${process.env.NODE_ENV}) is not 'test', exiting`);\n+    process.exit(1);\n+}\n+\n+createConnection().then(async connection => {\n+    if (connection.driver['database'] != 'imercata_test') {\n+        console.log(`database (${connection.driver['database']}) is not 'imercata_test', exiting`)\n+        process.exit(1);\n+    }",
        "created_at": "2021-04-13T20:18:34Z",
        "body": "Are you sure about this?  My understanding (and my experience thus far) has been that dotenv will automatically load the correct file for the environment.  I believe this is the point in importing `dotenv` in the configuration logic, and using it to set our values.  Has this not been your experience?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 635047293,
        "path": "bin/clear-test-db.ts",
        "in_reply_to_id": 612722617,
        "id": 612792963,
        "diff_hunk": "@@ -0,0 +1,24 @@\n+#!/usr/bin/env ts-node\n+\n+import { createConnection } from \"typeorm\";\n+\n+if (process.env.NODE_ENV !== 'test') {\n+    console.log(`NODE_ENV (${process.env.NODE_ENV}) is not 'test', exiting`);\n+    process.exit(1);\n+}\n+\n+createConnection().then(async connection => {\n+    if (connection.driver['database'] != 'imercata_test') {\n+        console.log(`database (${connection.driver['database']}) is not 'imercata_test', exiting`)\n+        process.exit(1);\n+    }",
        "created_at": "2021-04-13T21:36:58Z",
        "body": "The core issue is we have 2 values for `TYPEORM_DATABASE`, `imercata_development` and `imercata_test`. The safety check is making sure you are not truncating tables if your current `TYPEORM_DATABASE` is `imercata_development`, which is entirely possible if it is exported that way.\r\n\r\nI am only using `dotenv` to toggle between those 2 values. Not nec. recommending it here."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "brunokrebs",
        "html_url": "https://github.com/brunokrebs"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/12",
      "updated_at": "2021-04-09T00:02:47Z",
      "title": "[IMERC-28] Configure Nest.js to be an Auth0 API",
      "state": "closed",
      "number": 12,
      "merged_at": "2021-04-09T00:02:46Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "72e0fd18f2ea45efc6cf6840bf07e461eaf252b9",
        "ref": "feature/IMERC-28-configure-auth0"
      },
      "created_at": "2021-04-08T13:56:23Z",
      "closed_at": "2021-04-09T00:02:46Z",
      "body": "## Task\r\n\r\n[[IMERC-28] Configure Nest.js to be an Auth0 API](https://imercatus.backlog.com/view/IMERC-28)\r\n\r\nThis PR also has a frontend counterpart that you can find here: https://github.com/iMercatus/imercata-web/pull/10\r\n\r\n## Description\r\n\r\nBasically speaking, the changes introduced by this PR create a [NestJS Guard](https://docs.nestjs.com/guards) that can be used to secure endpoints. Using this guard is straightforward, simply add `@UseGuards(AuthenticationGuard)` to a class or class methods and the endpoint(s) will become private.\r\n\r\nAccessing endpoints secured by this guard will require a JWT (more specifically an ID token) issued by Auth0 during an authentication process. Check [the frontend PR](https://github.com/iMercatus/imercata-web/pull/10) for more information.\r\n",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "2abaa35642ad1e89aad88c59fb33bc3c9ffa5e6e",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 631474343,
        "path": "src/app.controller.spec.ts",
        "id": 609769100,
        "diff_hunk": "@@ -1,12 +1,22 @@\n+import { ConfigModule } from '@nestjs/config';\n import { Test, TestingModule } from '@nestjs/testing';\n import AppController from './app.controller';\n import AppService from './app.service';\n+import configuration from './config/configuration';\n+import validation from './config/validation';\n \n describe('AppController', () => {\n   let appController: AppController;\n \n   beforeEach(async () => {\n     const app: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: process.env.NODE_ENV === 'test' ? '.env.test' : '.env',",
        "created_at": "2021-04-08T14:34:38Z",
        "body": "I guess I could just set `.env.test` here?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 631515255,
        "path": "src/app.controller.ts",
        "id": 609803794,
        "diff_hunk": "@@ -1,12 +1,21 @@\n-import { Controller, Get } from '@nestjs/common';\n+import { Controller, Get, UseGuards } from '@nestjs/common';\n import AppService from './app.service';\n+import AuthenticationGuard from './auth/authentication.guard';\n+\n+interface HelloWorldMessage {\n+  message: string;\n+}",
        "created_at": "2021-04-08T15:07:57Z",
        "body": "not really needed as TypeScript can infer the structure returned by `getHello()` but... I can remove if you guys prefer"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 631516414,
        "path": "src/auth/authentication.guard.spec.ts",
        "id": 609804867,
        "diff_hunk": "@@ -0,0 +1,9 @@\n+import { ConfigService } from '@nestjs/config';\n+import AuthenticationGuard from './authentication.guard';\n+\n+describe('AuthGuard', () => {\n+  it('should be defined', () => {\n+    const configService = new ConfigService({ auth0: { cache: true } });\n+    expect(new AuthenticationGuard(configService)).toBeDefined();",
        "created_at": "2021-04-08T15:08:55Z",
        "body": "hmmm, I guess I could put more tests here? Will evaluate."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 631722891,
        "path": "src/app.controller.spec.ts",
        "in_reply_to_id": 609769100,
        "id": 609995002,
        "diff_hunk": "@@ -1,12 +1,22 @@\n+import { ConfigModule } from '@nestjs/config';\n import { Test, TestingModule } from '@nestjs/testing';\n import AppController from './app.controller';\n import AppService from './app.service';\n+import configuration from './config/configuration';\n+import validation from './config/validation';\n \n describe('AppController', () => {\n   let appController: AppController;\n \n   beforeEach(async () => {\n     const app: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: process.env.NODE_ENV === 'test' ? '.env.test' : '.env',",
        "created_at": "2021-04-08T18:39:47Z",
        "body": "I don't understand what you mean, Bruno. Under test mode the app declares where the config comes from here, `.env.test`. Nothing to set as far as I can see."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 631723384,
        "path": "src/app.controller.ts",
        "in_reply_to_id": 609803794,
        "id": 609995415,
        "diff_hunk": "@@ -1,12 +1,21 @@\n-import { Controller, Get } from '@nestjs/common';\n+import { Controller, Get, UseGuards } from '@nestjs/common';\n import AppService from './app.service';\n+import AuthenticationGuard from './auth/authentication.guard';\n+\n+interface HelloWorldMessage {\n+  message: string;\n+}",
        "created_at": "2021-04-08T18:40:24Z",
        "body": "Sure, ‚úÇÔ∏è  it."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 631726147,
        "path": "src/app.controller.spec.ts",
        "in_reply_to_id": 609769100,
        "id": 609997577,
        "diff_hunk": "@@ -1,12 +1,22 @@\n+import { ConfigModule } from '@nestjs/config';\n import { Test, TestingModule } from '@nestjs/testing';\n import AppController from './app.controller';\n import AppService from './app.service';\n+import configuration from './config/configuration';\n+import validation from './config/validation';\n \n describe('AppController', () => {\n   let appController: AppController;\n \n   beforeEach(async () => {\n     const app: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: process.env.NODE_ENV === 'test' ? '.env.test' : '.env',",
        "created_at": "2021-04-08T18:43:52Z",
        "body": "One sec, I just realized you added this - my bad. Yes, we only set `.env.test` for `bootstrap()`, I think it makes sense to hard code this as `.env.test` as it is a spec so it will never be another value."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 631727738,
        "path": "src/config/configuration.ts",
        "id": 609998868,
        "diff_hunk": "@@ -1,6 +1,14 @@\n export interface Config {\n   port: number;\n   typeorm: TypeORMConfig;\n+  auth0: Auth0Config;\n+}\n+\n+export interface Auth0Config {\n+  cache: boolean;\n+  rateLimit: boolean;\n+  jwksRequestsPerMinute: number;\n+  tenant: string;",
        "created_at": "2021-04-08T18:45:56Z",
        "body": "üèÖ Love adding the typing to config!"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 631729799,
        "path": "src/auth/authentication.guard.spec.ts",
        "in_reply_to_id": 609804867,
        "id": 610000541,
        "diff_hunk": "@@ -0,0 +1,9 @@\n+import { ConfigService } from '@nestjs/config';\n+import AuthenticationGuard from './authentication.guard';\n+\n+describe('AuthGuard', () => {\n+  it('should be defined', () => {\n+    const configService = new ConfigService({ auth0: { cache: true } });\n+    expect(new AuthenticationGuard(configService)).toBeDefined();",
        "created_at": "2021-04-08T18:48:28Z",
        "body": "Can you add a spec for `canActivate`?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 631923167,
        "path": "src/auth/authentication.guard.spec.ts",
        "in_reply_to_id": 609804867,
        "id": 610211029,
        "diff_hunk": "@@ -0,0 +1,9 @@\n+import { ConfigService } from '@nestjs/config';\n+import AuthenticationGuard from './authentication.guard';\n+\n+describe('AuthGuard', () => {\n+  it('should be defined', () => {\n+    const configService = new ConfigService({ auth0: { cache: true } });\n+    expect(new AuthenticationGuard(configService)).toBeDefined();",
        "created_at": "2021-04-08T23:52:53Z",
        "body": "Unit testing this would be _really_ hard (if feasible). I have two alternatives:\r\n- wait until you add your e2e tests so I can rebase my branch and add an e2e test here (wait to avoid conflicts)\r\n- add a task to our backlog to cover that later\r\n\r\nUnless you can see how to test this, because I don't (I would have to mock `ExecutionContext`, `jwt`, and `expressJwtSecret`). Thoughts?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 631924123,
        "path": "src/auth/authentication.guard.spec.ts",
        "in_reply_to_id": 609804867,
        "id": 610212557,
        "diff_hunk": "@@ -0,0 +1,9 @@\n+import { ConfigService } from '@nestjs/config';\n+import AuthenticationGuard from './authentication.guard';\n+\n+describe('AuthGuard', () => {\n+  it('should be defined', () => {\n+    const configService = new ConfigService({ auth0: { cache: true } });\n+    expect(new AuthenticationGuard(configService)).toBeDefined();",
        "created_at": "2021-04-08T23:55:27Z",
        "body": "üëç \r\n"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 631924325,
        "path": "src/auth/authentication.guard.spec.ts",
        "in_reply_to_id": 609804867,
        "id": 610212944,
        "diff_hunk": "@@ -0,0 +1,9 @@\n+import { ConfigService } from '@nestjs/config';\n+import AuthenticationGuard from './authentication.guard';\n+\n+describe('AuthGuard', () => {\n+  it('should be defined', () => {\n+    const configService = new ConfigService({ auth0: { cache: true } });\n+    expect(new AuthenticationGuard(configService)).toBeDefined();",
        "created_at": "2021-04-08T23:56:05Z",
        "body": "add the task, sure."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/11",
      "updated_at": "2021-04-07T21:44:56Z",
      "title": "Bugfix add more info and code related to installing asdf as an option locally",
      "state": "closed",
      "number": 11,
      "merged_at": "2021-04-07T21:44:49Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "6b5f369a590bbacc24e18fa0c4f4d2d8aa316abd",
        "ref": "bugfix/asdf_pg"
      },
      "created_at": "2021-04-07T20:50:47Z",
      "closed_at": "2021-04-07T21:44:49Z",
      "body": "Bugfix to make installing postgres using asdf helpful.\r\n\r\nTicket: https://imercatus.backlog.com/board/IMERC?selectedIssueKey=IMERC-78&milestone=47257\r\n\r\n```\r\n‚ûú  imercata-backend git:(bugfix/asdf_pg) ‚úó bin/asdf_install_postgres\r\n+ export POSTGRES_VERSION=12.4\r\n+ POSTGRES_VERSION=12.4\r\n++ asdf plugin list\r\n++ grep postgres\r\n+ '[' -z postgres ']'\r\n++ asdf list postgres\r\n++ grep 12.4\r\n+ '[' -z 12.4 ']'\r\n+ asdf local postgres 12.4\r\n+ asdf reshim postgres 12.4\r\n+ echo 'postgres install location:'\r\npostgres install location:\r\n+ asdf where postgres\r\n/Users/jody/.asdf/installs/postgres/12.4\r\n+ echo 'Start/stop postgres with pg_ctl (start|stop)'\r\nStart/stop postgres with pg_ctl (start|stop)\r\n‚ûú  imercata-backend git:(bugfix/asdf_pg) ‚úó pg_ctl start\r\nwaiting for server to start....2021-04-07 13:55:51.530 PDT [13780] LOG:  starting PostgreSQL 12.4 on x86_64-apple-darwin20.3.0, compiled by Apple clang version 12.0.0 (clang-1200.0.32.29), 64-bit\r\n2021-04-07 13:55:51.532 PDT [13780] LOG:  listening on IPv6 address \"::1\", port 5432\r\n2021-04-07 13:55:51.532 PDT [13780] LOG:  listening on IPv4 address \"127.0.0.1\", port 5432\r\n2021-04-07 13:55:51.532 PDT [13780] LOG:  listening on Unix socket \"/tmp/.s.PGSQL.5432\"\r\n2021-04-07 13:55:51.545 PDT [13781] LOG:  database system was shut down at 2021-04-07 13:53:18 PDT\r\n2021-04-07 13:55:51.549 PDT [13780] LOG:  database system is ready to accept connections\r\n done\r\nserver started\r\n‚ûú  imercata-backend git:(bugfix/asdf_pg) ‚úó createdb imercata_development\r\n‚ûú  imercata-backend git:(bugfix/asdf_pg) ‚úó psql imercata_development\r\npsql (12.4)\r\nType \"help\" for help.\r\n\r\nimercata_development=# exit\r\n‚ûú  imercata-backend git:(bugfix/asdf_pg) ‚úó\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9e281820ecab77979a034f5127ce14b1eca4d01c",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/10",
      "updated_at": "2021-04-07T19:43:17Z",
      "title": "Switch to airbnb typescript linting.",
      "state": "closed",
      "number": 10,
      "merged_at": "2021-04-07T19:19:07Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "3952500b00d3c86dfa070718c93da0308abc75f0",
        "ref": "feature/IMERC-36-linter-style"
      },
      "created_at": "2021-04-07T18:09:32Z",
      "closed_at": "2021-04-07T19:19:07Z",
      "body": "This switches the default linting rules to the airbnb style for typescript.\r\n\r\nAfter adding the airbnb linting rules, each error encountered was handled in its own commit.  Since these fixes were subjective, I thought it would be beneficial to look at each choice in its own context and decide if the approach I took aligns with the team.   Feel free to offer up alternatives.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "0391532b05a73ebe81c0025d0efbfcff5980233f",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 630425709,
        "path": "src/config/configuration.ts",
        "id": 608910444,
        "diff_hunk": "@@ -12,16 +12,14 @@ export interface TypeORMConfig {\n   database: string;\n }\n \n-export default (): Config => {\n-  return {\n-    port: Number(process.env.PORT),\n-    typeorm: {\n-      type: process.env.TYPEORM_CONNECTION,\n-      host: process.env.TYPEORM_HOST,\n-      port: Number(process.env.TYPEORM_PORT),\n-      username: process.env.TYPEORM_USERNAME,\n-      password: process.env.TYPEORM_PASSWORD,\n-      database: process.env.TYPEORM_DATABASE,\n-    },\n-  };\n-};\n+export default (): Config => ({\n+  port: Number(process.env.PORT),",
        "created_at": "2021-04-07T18:44:58Z",
        "body": "Is removing the implicit return part of the linter complaints?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 630426354,
        "path": "src/config/validation.ts",
        "id": 608910844,
        "diff_hunk": "@@ -7,4 +7,4 @@ const validation = Joi.object({\n   PORT: Joi.number().default(3000),\n });\n \n-export { validation };\n+export default validation;",
        "created_at": "2021-04-07T18:45:20Z",
        "body": "I like this one."
      },
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 630431007,
        "path": "src/config/configuration.ts",
        "in_reply_to_id": 608910444,
        "id": 608913738,
        "diff_hunk": "@@ -12,16 +12,14 @@ export interface TypeORMConfig {\n   database: string;\n }\n \n-export default (): Config => {\n-  return {\n-    port: Number(process.env.PORT),\n-    typeorm: {\n-      type: process.env.TYPEORM_CONNECTION,\n-      host: process.env.TYPEORM_HOST,\n-      port: Number(process.env.TYPEORM_PORT),\n-      username: process.env.TYPEORM_USERNAME,\n-      password: process.env.TYPEORM_PASSWORD,\n-      database: process.env.TYPEORM_DATABASE,\n-    },\n-  };\n-};\n+export default (): Config => ({\n+  port: Number(process.env.PORT),",
        "created_at": "2021-04-07T18:47:39Z",
        "body": "Correct.  It wants single-line functions to have an implicit return."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 630451764,
        "path": "src/config/configuration.ts",
        "id": 608928640,
        "diff_hunk": "@@ -20,6 +20,6 @@ export default (): Config => ({\n     port: Number(process.env.TYPEORM_PORT),\n     username: process.env.TYPEORM_USERNAME,\n     password: process.env.TYPEORM_PASSWORD,\n-    database: process.env.TYPEORM_DATABASE,\n+    database: process.env.TYPEORM_DATABASE",
        "created_at": "2021-04-07T18:58:47Z",
        "body": "I vote to enforce trailing commas."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 630452565,
        "path": "src/app.module.spec.ts",
        "id": 608930115,
        "diff_hunk": "@@ -1,7 +1,7 @@\n import { INestApplication } from '@nestjs/common';\n import { Test } from '@nestjs/testing';\n-import AppModule from './app.module';\n import { ConfigService } from '@nestjs/config';\n+import AppModule from './app.module';",
        "created_at": "2021-04-07T18:59:41Z",
        "body": "I vote to keep import order warnings."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/9",
      "updated_at": "2021-04-07T18:41:36Z",
      "title": "Follow recommended Nest way of src organization",
      "state": "closed",
      "number": 9,
      "merged_at": "2021-04-07T18:41:32Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "9b404339d4f744e3186b8b38e4e46c2934ea5638",
        "ref": "no-ticket/relation-based-src-layout"
      },
      "created_at": "2021-04-07T16:51:49Z",
      "closed_at": "2021-04-07T18:41:32Z",
      "body": "This PR changes the organization of `src` to follow what the `nest` cli defaults to. It is also the way the project's repo uses in examples. It keeps files organized near to one another based on their corresponding relation/entity.\r\n\r\nhttps://github.com/nestjs/nest/tree/master/sample\r\nhttps://github.com/nestjs/nest/tree/master/sample/05-sql-typeorm/src\r\nhttps://github.com/nestjs/nest/tree/master/sample/05-sql-typeorm/src/users\r\n\r\n```\r\n‚ûú  imercata-backend git:(no-ticket/relation-based-src-layout) ‚úó npx nest generate controller Foos\r\nCREATE src/foos/foos.controller.spec.ts (478 bytes)\r\nCREATE src/foos/foos.controller.ts (97 bytes)\r\nUPDATE src/app.module.ts (1472 bytes)\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "da65ea57234230e859fe727afbe2f9b27ac43590",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "t3hpr1m3",
        "html_url": "https://github.com/t3hpr1m3"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/8",
      "updated_at": "2021-04-06T22:27:14Z",
      "title": "Feature: Add testing libraries",
      "state": "closed",
      "number": 8,
      "merged_at": "2021-04-06T15:58:49Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "ff75bf5b9f89d0f45b31d1eea250c66c94791d94",
        "ref": "feature/IMERC-25-setup-testing"
      },
      "created_at": "2021-04-06T15:07:17Z",
      "closed_at": "2021-04-06T15:58:49Z",
      "body": "Story: https://imercatus.backlog.com/view/IMERC-25\r\n\r\nThis is a very subjective topic, and most of the major players for testing are already present.  I'm adding [nock](https://github.com/nock/nock) here to help with mocking any external services during testing.",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "f7d311e76b10ab9aa265d33e6ac2469a3cbd0e1b",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/7",
      "updated_at": "2021-04-06T22:21:55Z",
      "title": "Feature: Configure TypeORM (persistence layer)",
      "state": "closed",
      "number": 7,
      "merged_at": "2021-04-06T22:21:51Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "6f1f18769267982b0c2c611354b610805bad76dd",
        "ref": "feature/IMERC-23-configure-typeorm-simple"
      },
      "created_at": "2021-04-06T05:58:24Z",
      "closed_at": "2021-04-06T22:21:51Z",
      "body": "Story: https://imercatus.backlog.com/view/IMERC-23\r\n\r\n## Acceptance Criteria\r\n\r\n- [x] App connects to database when running in `NODE_ENV` of development and production\r\n- [x] App can display data from the database when running\r\n- [x] Migrations can be created\r\n- [x] Migrations can be run in `NODE_ENV` of development, test and production\r\n- [x] Transactions are handled\r\n\r\n\r\n**Notes:**\r\n\r\n1.  Using the convention of `TYPEORM_` environment variables for `TYPEORM_HOST`, `TYPEORM_PORT`, `TYPEORM_USERNAME`, `TYPEORM_PASSWORD`, and `TYPEORM_DATABASE` allows the Nest app to load using the same rdbms db config as the migrations.\r\n\r\n2. Migrations [are not part of the Nest lifecycle](https://docs.nestjs.com/techniques/database#migrations), this means configuring them is about connecting TypeORM and Nest.\r\n\r\n> Migration classes are separate from the Nest application source code. Their lifecycle is maintained by the TypeORM CLI. Therefore, you are not able to leverage dependency injection and other Nest specific features with migrations. To learn more about migrations, follow the guide in the TypeORM documentation.\r\n\r\n3. Best I can tell the only way to run migrations under `NODE_ENV` production is to reach into the JS:\r\nhttps://stackoverflow.com/questions/59435293/typeorm-entity-in-nestjs-cannot-use-import-statement-outside-a-module\r\n\r\n\r\n**Create migration**\r\n```\r\n‚ûú  imercata-backend git:(feature/IMERC-23-configure-typeorm-simple) npm run typeorm -- migration:create -n CreateUsers\r\n\r\n> imercata-backend@0.0.1 typeorm /Users/jody/src/imercata-backend\r\n> ts-node ./node_modules/typeorm/cli.js \"migration:create\" \"-n\" \"CreateUsers\"\r\n\r\nMigration /Users/jody/src/imercata-backend/src/migrations/1617688404619-CreateUsers.ts has been generated successfully.\r\n‚ûú  imercata-backend git:(feature/IMERC-23-configure-typeorm-simple) ‚úó\r\n```\r\n\r\n**Run migrations**\r\n\r\n```\r\n‚ûú  imercata-backend git:(feature/IMERC-23-configure-typeorm-simple) ‚úó npm run typeorm migration:run\r\n\r\n> imercata-backend@0.0.1 typeorm /Users/jody/src/imercata-backend\r\n> ts-node ./node_modules/typeorm/cli.js \"migration:run\"\r\n\r\nquery: SELECT * FROM \"information_schema\".\"tables\" WHERE \"table_schema\" = current_schema() AND \"table_name\" = 'migrations'\r\nquery: CREATE TABLE \"migrations\" (\"id\" SERIAL NOT NULL, \"timestamp\" bigint NOT NULL, \"name\" character varying NOT NULL, CONSTRAINT \"PK_8c82d7f526340ab734260ea46be\" PRIMARY KEY (\"id\"))\r\nquery: SELECT * FROM \"migrations\" \"migrations\" ORDER BY \"id\" DESC\r\n0 migrations are already loaded in the database.\r\n1 migrations were found in the source code.\r\n1 migrations are new migrations that needs to be executed.\r\nquery: START TRANSACTION\r\nquery: CREATE TABLE \"users\" (\"id\" SERIAL NOT NULL, \"first_name\" varchar NOT NULL, \"created_at\" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, \"updated_at\" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, CONSTRAINT \"PK_a3ffb1c0c8416b9fc6f907b7433\" PRIMARY KEY (\"id\"))\r\nquery: INSERT INTO \"migrations\"(\"timestamp\", \"name\") VALUES ($1, $2) -- PARAMETERS: [1617661118597,\"CreateUsers1617661118597\"]\r\nMigration CreateUsers1617661118597 has been executed successfully.\r\nquery: COMMIT\r\n```\r\n\r\n**Render data from DB**\r\n\r\n```\r\n‚ûú  imercata-backend git:(feature/IMERC-23-configure-typeorm-simple) ‚úó npm run start\r\n\r\n> imercata-backend@0.0.1 start /Users/jody/src/imercata-backend\r\n> nest start\r\n\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [NestFactory] Starting Nest application...\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [InstanceLoader] TypeOrmModule dependencies initialized +103ms\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [InstanceLoader] ConfigHostModule dependencies initialized +1ms\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [InstanceLoader] ConfigModule dependencies initialized +0ms\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [InstanceLoader] ConfigModule dependencies initialized +1ms\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [InstanceLoader] TypeOrmCoreModule dependencies initialized +71ms\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [InstanceLoader] TypeOrmModule dependencies initialized +1ms\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [InstanceLoader] AppModule dependencies initialized +0ms\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [RoutesResolver] AppController {}: +6ms\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [RouterExplorer] Mapped {, GET} route +2ms\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [RoutesResolver] UsersController {/users}: +1ms\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [RouterExplorer] Mapped {/users, GET} route +0ms\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [NestApplication] Nest application successfully started +3ms\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [App] NODE_ENV: development +3ms\r\n[Nest] 25668   - 2021-04-05, 10:56:52 p.m.   [App] Server started at http://[::1]:3000 +1ms\r\n\r\n‚ûú  imercata-backend git:(feature/IMERC-23-configure-typeorm-simple) ‚úó curl http://localhost:3000/users\r\n[{\"id\":1,\"first_name\":\"jody\",\"created_at\":\"2021-04-06T05:56:35.293Z\",\"updated_at\":\"2021-04-06T05:56:35.293Z\"}]%                                                                                       ‚ûú  imercata-backend git:(feature/IMERC-23-configure-typeorm-simple) ‚úó\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "f9decdf39a0daebd930172e49c82fbd152b152c0",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "t3hpr1m3",
          "html_url": "https://github.com/t3hpr1m3"
        },
        "pull_request_review_id": 629001676,
        "path": "README.md",
        "id": 607872259,
        "diff_hunk": "@@ -7,6 +7,7 @@ Node version `14.16.0`\n ## Development Setup\n \n ```bash\n+$ createdb imercata_development",
        "created_at": "2021-04-06T13:56:07Z",
        "body": "Slight nit-pick, but is there a reason this wasn't rolled into `bin/dev_setup`?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 629006807,
        "path": ".env.development.example",
        "id": 607876203,
        "diff_hunk": "@@ -0,0 +1,12 @@\n+PORT=3000\n+TYPEORM_CONNECTION=postgres\n+TYPEORM_HOST=localhost\n+TYPEORM_USERNAME=\n+TYPEORM_PASSWORD=\n+TYPEORM_DATABASE=imercata\n+TYPEORM_PORT=5432\n+# Used by typeorm:cli for NODE_ENV of development and production\n+TYPEORM_ENTITIES=src/**/*.model.ts\n+TYPEORM_ENTITIES_DIR=src/models",
        "created_at": "2021-04-06T14:00:21Z",
        "body": "you need both `TYPEORM_ENTITIES` and `TYPEORM_ENTITIES_DIR`? I thought just the former would be enough. In fact, from the config here, it looks like the second one will never actually be used (e.g., if we put models outside `src/models`)"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 629006807,
        "path": "src/migrations/1617661118597-CreateUsers.ts",
        "id": 607879230,
        "diff_hunk": "@@ -0,0 +1,38 @@\n+import { MigrationInterface, QueryRunner, Table } from 'typeorm';\n+\n+export class CreateUsers1617661118597 implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.createTable(\n+      new Table({\n+        name: 'users',\n+        columns: [\n+          {\n+            name: 'id',\n+            type: 'int',\n+            isPrimary: true,\n+            isGenerated: true,\n+            generationStrategy: 'increment',\n+          },\n+          {\n+            name: 'first_name',\n+            type: 'varchar',",
        "created_at": "2021-04-06T14:03:59Z",
        "body": "Couple of questions:\r\n- should we limit?\r\n- is it required (not null)?\r\n\r\nI also wonder if you consider this something to be revised in a task where we actually implement this onboarding workflow for users. If that's your thinking, I'm all good here."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 629006807,
        "path": "src/main.ts",
        "id": 607886946,
        "diff_hunk": "@@ -2,8 +2,10 @@ import { Logger } from '@nestjs/common';\n import { NestFactory } from '@nestjs/core';\n import { AppModule } from './app.module';\n import { ConfigService } from '@nestjs/config';\n+import { initializeTransactionalContext } from 'typeorm-transactional-cls-hooked';\n \n async function bootstrap() {\n+  initializeTransactionalContext();",
        "created_at": "2021-04-06T14:12:45Z",
        "body": "well, it looks like I convinced someone to use the annotated approach??? üï∫ "
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 629006807,
        "path": "src/app.module.ts",
        "id": 607892345,
        "diff_hunk": "@@ -15,8 +19,20 @@ import { validation } from './config/validation';\n       load: [configuration],\n       validationSchema: validation,\n     }),\n+    TypeOrmModule.forRootAsync({\n+      imports: [ConfigModule],\n+      inject: [ConfigService],\n+      useFactory: async (configService: ConfigService) => {\n+        const typeOrm = configService.get('typeorm');\n+        const appTypeOrm = {\n+          entities: [User],\n+        };\n+        return { ...typeOrm, ...appTypeOrm } as TypeOrmModule;",
        "created_at": "2021-04-06T14:18:47Z",
        "body": "using `const config: TypeOrmModule = { ...typeOrm, ...appTypeOrm }` is a bit safer. By using `as TypeOrmModule` you are telling TS to disregard this line and believe that you know that whatever is to the left is going to be ok `as TypeOrmModule`."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 629006807,
        "path": "src/models/user.model.ts",
        "id": 607893767,
        "diff_hunk": "@@ -0,0 +1,21 @@\n+import {\n+  Column,\n+  CreateDateColumn,\n+  Entity,\n+  PrimaryGeneratedColumn,\n+} from 'typeorm';\n+\n+@Entity({ name: 'users' })\n+export class User {\n+  @PrimaryGeneratedColumn()\n+  id: number;\n+\n+  @Column()",
        "created_at": "2021-04-06T14:20:19Z",
        "body": "I added a question above about this being required/not null and length. If something changed there, this is a reminder to update here. Otherwise, feel free to ignore."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 629006807,
        "path": "bin/dev_setup",
        "id": 607899243,
        "diff_hunk": "@@ -28,3 +28,4 @@ fi\n # Install dependencies, prepare project\n npm install\n npm run prepare\n+npm run typeorm migration:run",
        "created_at": "2021-04-06T14:26:20Z",
        "body": "Adding a `migrate` script to `package.json` might help in the future. At least I've used it and it is easier to remember `npm run migrate` other than searching for this command."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 629006807,
        "path": ".env.development.example",
        "in_reply_to_id": 607876203,
        "id": 607901747,
        "diff_hunk": "@@ -0,0 +1,12 @@\n+PORT=3000\n+TYPEORM_CONNECTION=postgres\n+TYPEORM_HOST=localhost\n+TYPEORM_USERNAME=\n+TYPEORM_PASSWORD=\n+TYPEORM_DATABASE=imercata\n+TYPEORM_PORT=5432\n+# Used by typeorm:cli for NODE_ENV of development and production\n+TYPEORM_ENTITIES=src/**/*.model.ts\n+TYPEORM_ENTITIES_DIR=src/models",
        "created_at": "2021-04-06T14:29:00Z",
        "body": "actually, why do we need those? I mean, why does typeorm cares about where the entities are? Are we going to use `synchronize` or is it needed for something else?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 629006807,
        "path": ".env.production.example",
        "id": 607902099,
        "diff_hunk": "@@ -0,0 +1,14 @@\n+NODE_ENV=production\n+PORT=5000\n+TYPEORM_CONNECTION=postgres\n+TYPEORM_HOST=localhost\n+TYPEORM_USERNAME=\n+TYPEORM_PASSWORD=\n+TYPEORM_DATABASE=imercata_production\n+TYPEORM_PORT=5432\n+# Used by typeorm:cli for NODE_ENV of development and production\n+# TypORM will use js for migrations for NODE_ENV=production\n+TYPEORM_ENTITIES=dist/**/*.model.js\n+TYPEORM_ENTITIES_DIR=dist/models\n+TYPEORM_MIGRATIONS=dist/migrations/**/*.js\n+TYPEORM_MIGRATIONS_DIR=dist/migrations",
        "created_at": "2021-04-06T14:29:24Z",
        "body": "check the questions above to see if they make sense"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 629043445,
        "path": "README.md",
        "in_reply_to_id": 607872259,
        "id": 607903263,
        "diff_hunk": "@@ -7,6 +7,7 @@ Node version `14.16.0`\n ## Development Setup\n \n ```bash\n+$ createdb imercata_development",
        "created_at": "2021-04-06T14:30:40Z",
        "body": "I agree, I was thinking of the handling case of there already being one created, but now that I talk it through it is `setup` not maintenance. I will move it into `bin/dev_setup`."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 629095569,
        "path": ".env.development.example",
        "in_reply_to_id": 607876203,
        "id": 607941585,
        "diff_hunk": "@@ -0,0 +1,12 @@\n+PORT=3000\n+TYPEORM_CONNECTION=postgres\n+TYPEORM_HOST=localhost\n+TYPEORM_USERNAME=\n+TYPEORM_PASSWORD=\n+TYPEORM_DATABASE=imercata\n+TYPEORM_PORT=5432\n+# Used by typeorm:cli for NODE_ENV of development and production\n+TYPEORM_ENTITIES=src/**/*.model.ts\n+TYPEORM_ENTITIES_DIR=src/models",
        "created_at": "2021-04-06T15:13:36Z",
        "body": "Nice catch, this is left over from a slightly different strategy. I tried without `TYPEORM_ENTITIES` and `TYPEORM_ENTITIES_DIR` and the AC are all met still. Thank you."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 629096003,
        "path": "src/app.module.ts",
        "in_reply_to_id": 607892345,
        "id": 607941921,
        "diff_hunk": "@@ -15,8 +19,20 @@ import { validation } from './config/validation';\n       load: [configuration],\n       validationSchema: validation,\n     }),\n+    TypeOrmModule.forRootAsync({\n+      imports: [ConfigModule],\n+      inject: [ConfigService],\n+      useFactory: async (configService: ConfigService) => {\n+        const typeOrm = configService.get('typeorm');\n+        const appTypeOrm = {\n+          entities: [User],\n+        };\n+        return { ...typeOrm, ...appTypeOrm } as TypeOrmModule;",
        "created_at": "2021-04-06T15:13:58Z",
        "body": "I like your suggestion better."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 629448298,
        "path": "README.md",
        "in_reply_to_id": 607872259,
        "id": 608211964,
        "diff_hunk": "@@ -7,6 +7,7 @@ Node version `14.16.0`\n ## Development Setup\n \n ```bash\n+$ createdb imercata_development",
        "created_at": "2021-04-06T22:08:54Z",
        "body": "Done."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 629448390,
        "path": ".env.development.example",
        "in_reply_to_id": 607876203,
        "id": 608212025,
        "diff_hunk": "@@ -0,0 +1,12 @@\n+PORT=3000\n+TYPEORM_CONNECTION=postgres\n+TYPEORM_HOST=localhost\n+TYPEORM_USERNAME=\n+TYPEORM_PASSWORD=\n+TYPEORM_DATABASE=imercata\n+TYPEORM_PORT=5432\n+# Used by typeorm:cli for NODE_ENV of development and production\n+TYPEORM_ENTITIES=src/**/*.model.ts\n+TYPEORM_ENTITIES_DIR=src/models",
        "created_at": "2021-04-06T22:09:02Z",
        "body": "Done."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 629448445,
        "path": "src/migrations/1617661118597-CreateUsers.ts",
        "in_reply_to_id": 607879230,
        "id": 608212072,
        "diff_hunk": "@@ -0,0 +1,38 @@\n+import { MigrationInterface, QueryRunner, Table } from 'typeorm';\n+\n+export class CreateUsers1617661118597 implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.createTable(\n+      new Table({\n+        name: 'users',\n+        columns: [\n+          {\n+            name: 'id',\n+            type: 'int',\n+            isPrimary: true,\n+            isGenerated: true,\n+            generationStrategy: 'increment',\n+          },\n+          {\n+            name: 'first_name',\n+            type: 'varchar',",
        "created_at": "2021-04-06T22:09:08Z",
        "body": "Done."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 629448857,
        "path": "src/migrations/1617661118597-CreateUsers.ts",
        "in_reply_to_id": 607879230,
        "id": 608212409,
        "diff_hunk": "@@ -0,0 +1,38 @@\n+import { MigrationInterface, QueryRunner, Table } from 'typeorm';\n+\n+export class CreateUsers1617661118597 implements MigrationInterface {\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.createTable(\n+      new Table({\n+        name: 'users',\n+        columns: [\n+          {\n+            name: 'id',\n+            type: 'int',\n+            isPrimary: true,\n+            isGenerated: true,\n+            generationStrategy: 'increment',\n+          },\n+          {\n+            name: 'first_name',\n+            type: 'varchar',",
        "created_at": "2021-04-06T22:09:53Z",
        "body": "It is just here to render some text, but I like your suggestion for completeness."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 629448966,
        "path": "src/main.ts",
        "in_reply_to_id": 607886946,
        "id": 608212517,
        "diff_hunk": "@@ -2,8 +2,10 @@ import { Logger } from '@nestjs/common';\n import { NestFactory } from '@nestjs/core';\n import { AppModule } from './app.module';\n import { ConfigService } from '@nestjs/config';\n+import { initializeTransactionalContext } from 'typeorm-transactional-cls-hooked';\n \n async function bootstrap() {\n+  initializeTransactionalContext();",
        "created_at": "2021-04-06T22:10:06Z",
        "body": "üëç "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 629449176,
        "path": "src/app.module.ts",
        "in_reply_to_id": 607892345,
        "id": 608212694,
        "diff_hunk": "@@ -15,8 +19,20 @@ import { validation } from './config/validation';\n       load: [configuration],\n       validationSchema: validation,\n     }),\n+    TypeOrmModule.forRootAsync({\n+      imports: [ConfigModule],\n+      inject: [ConfigService],\n+      useFactory: async (configService: ConfigService) => {\n+        const typeOrm = configService.get('typeorm');\n+        const appTypeOrm = {\n+          entities: [User],\n+        };\n+        return { ...typeOrm, ...appTypeOrm } as TypeOrmModule;",
        "created_at": "2021-04-06T22:10:27Z",
        "body": "Done."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 629449222,
        "path": "src/models/user.model.ts",
        "in_reply_to_id": 607893767,
        "id": 608212737,
        "diff_hunk": "@@ -0,0 +1,21 @@\n+import {\n+  Column,\n+  CreateDateColumn,\n+  Entity,\n+  PrimaryGeneratedColumn,\n+} from 'typeorm';\n+\n+@Entity({ name: 'users' })\n+export class User {\n+  @PrimaryGeneratedColumn()\n+  id: number;\n+\n+  @Column()",
        "created_at": "2021-04-06T22:10:33Z",
        "body": "Done."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 629449516,
        "path": "bin/dev_setup",
        "in_reply_to_id": 607899243,
        "id": 608212974,
        "diff_hunk": "@@ -28,3 +28,4 @@ fi\n # Install dependencies, prepare project\n npm install\n npm run prepare\n+npm run typeorm migration:run",
        "created_at": "2021-04-06T22:11:05Z",
        "body": "I added this script for `npm run migrate`."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 629449644,
        "path": ".env.production.example",
        "in_reply_to_id": 607902099,
        "id": 608213076,
        "diff_hunk": "@@ -0,0 +1,14 @@\n+NODE_ENV=production\n+PORT=5000\n+TYPEORM_CONNECTION=postgres\n+TYPEORM_HOST=localhost\n+TYPEORM_USERNAME=\n+TYPEORM_PASSWORD=\n+TYPEORM_DATABASE=imercata_production\n+TYPEORM_PORT=5432\n+# Used by typeorm:cli for NODE_ENV of development and production\n+# TypORM will use js for migrations for NODE_ENV=production\n+TYPEORM_ENTITIES=dist/**/*.model.js\n+TYPEORM_ENTITIES_DIR=dist/models\n+TYPEORM_MIGRATIONS=dist/migrations/**/*.js\n+TYPEORM_MIGRATIONS_DIR=dist/migrations",
        "created_at": "2021-04-06T22:11:19Z",
        "body": "This is fixed now."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/6",
      "updated_at": "2021-03-31T20:39:19Z",
      "title": "Update README to explain config more, log NODE_ENV on startup",
      "state": "closed",
      "number": 6,
      "merged_at": "2021-03-31T20:39:17Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "c59757e1a2eb49d286eec71b33c46dcb3c84c49f",
        "ref": "no-ticket/config_readme_updates"
      },
      "created_at": "2021-03-31T18:01:28Z",
      "closed_at": "2021-03-31T20:39:17Z",
      "body": "Small PR to update the README.\r\n\r\n- [x] Write up application config documentation\r\n- [x] Log `NODE_ENV` on startup",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "72441a520c24e552a249a2510ec8698608ed0651",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "xiang",
        "html_url": "https://github.com/xiang"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/5",
      "updated_at": "2021-04-20T17:42:29Z",
      "title": "sfortner/dockerize",
      "state": "closed",
      "number": 5,
      "merged_at": "2021-03-31T18:56:56Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "3ccd7ac33bea0bc5f3c52a3bd54a8fdc14fd4c48",
        "ref": "sfortner/dockerize"
      },
      "created_at": "2021-03-31T17:17:37Z",
      "closed_at": "2021-03-31T18:56:56Z",
      "body": "Dockerfile",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "72441a520c24e552a249a2510ec8698608ed0651",
        "ref": "main"
      }
    },
    "comments": []
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/4",
      "updated_at": "2021-04-01T16:34:47Z",
      "title": "Add SSL support",
      "state": "closed",
      "number": 4,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "a92f167a001b74a890008df884512d817dd28a2e",
        "ref": "no-ticket/ssl_support"
      },
      "created_at": "2021-03-31T16:51:38Z",
      "closed_at": "2021-04-01T16:34:44Z",
      "body": "It can be helpful to have SSL as an option locally for dev/prod parity.\r\n\r\n```\r\n‚ûú  imercata-backend git:(no-ticket/ssl_support) npm run start\r\n\r\n> imercata-backend@0.0.1 start /Users/jody/src/imercata-backend\r\n> nest start\r\n\r\n[Nest] 45956   - 2021-03-31, 9:50:05 a.m.   [NestFactory] Starting Nest application...\r\n[Nest] 45956   - 2021-03-31, 9:50:05 a.m.   [InstanceLoader] ConfigHostModule dependencies initialized +89ms\r\n[Nest] 45956   - 2021-03-31, 9:50:05 a.m.   [InstanceLoader] AppModule dependencies initialized +1ms\r\n[Nest] 45956   - 2021-03-31, 9:50:05 a.m.   [InstanceLoader] ConfigModule dependencies initialized +0ms\r\n[Nest] 45956   - 2021-03-31, 9:50:05 a.m.   [RoutesResolver] AppController {}: +34ms\r\n[Nest] 45956   - 2021-03-31, 9:50:05 a.m.   [RouterExplorer] Mapped {, GET} route +2ms\r\n[Nest] 45956   - 2021-03-31, 9:50:05 a.m.   [NestApplication] Nest application successfully started +2ms\r\n[Nest] 45956   - 2021-03-31, 9:50:05 a.m.   Server started at https://[::1]:3000 +4ms\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "72441a520c24e552a249a2510ec8698608ed0651",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 625769138,
        "path": "src/main.ts",
        "id": 605261168,
        "diff_hunk": "@@ -2,12 +2,32 @@ import { Logger } from '@nestjs/common';\n import { NestFactory } from '@nestjs/core';\n import { AppModule } from './app.module';\n import { ConfigService } from '@nestjs/config';\n+import * as fs from 'fs';\n+import configuration from './config/configuration';",
        "created_at": "2021-03-31T22:30:02Z",
        "body": "being picky on two comments about the two lines above:\r\n- line 5: `import { readFileSync } from 'fs'`? reads better\r\n- line 6: are we going to use the `@/config` and similar import strategy?\r\n\r\nagain, very minor/picky comments, feel free to ignore"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 625770178,
        "path": "src/main.ts",
        "id": 605261990,
        "diff_hunk": "@@ -2,12 +2,32 @@ import { Logger } from '@nestjs/common';\n import { NestFactory } from '@nestjs/core';\n import { AppModule } from './app.module';\n import { ConfigService } from '@nestjs/config';\n+import * as fs from 'fs';\n+import configuration from './config/configuration';\n \n async function bootstrap() {\n-  const app = await NestFactory.create(AppModule);\n-  const configService = app.get<ConfigService>(ConfigService);\n+  const app = await NestFactory.create(AppModule, {\n+    ...httpsOptions(),\n+  });\n+\n+  const configService = app.get(ConfigService);\n \n   await app.listen(configService.get<number>('port'));\n   Logger.log(`Server started at ${await app.getUrl()}`);\n }\n bootstrap();\n+\n+function httpsOptions() {\n+  const sslConfig = configuration().ssl;",
        "created_at": "2021-03-31T22:32:09Z",
        "body": "I don't even know if I should be adding those pick comments, so if you feel it is too much, just tell me to read the god damn thing from a broader perspective instead of being as syntax highlighter (seriously, tell me one time and I will understand). Having said that, why not:\r\n\r\n```typescript\r\nconst { ssl }  = configuration();\r\n```\r\n\r\n"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 625770709,
        "path": "bin/dev_ssl",
        "id": 605262422,
        "diff_hunk": "@@ -0,0 +1,9 @@\n+#!/usr/bin/env bash",
        "created_at": "2021-03-31T22:33:12Z",
        "body": "no readme mention about this new dev script?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 625771359,
        "path": "src/config/configuration.spec.ts",
        "id": 605262945,
        "diff_hunk": "@@ -15,6 +15,36 @@ describe('Environment variables', () => {\n     expect(config.port).toEqual(4000);\n   });\n \n+  test('when SSL is enabled is TRUE', () => {\n+    process.env.SSL_ENABLED = 'TRUE';\n+    process.env.SSL_KEY_PATH = '/cert/key.pem';\n+    process.env.SSL_CERT_PATH = '/cert/cert.pem';\n+\n+    const config = configuration();\n+    const sslConfig = config.ssl;\n+\n+    expect(sslConfig).toBeDefined();\n+    expect(sslConfig.enabled).toEqual(true);\n+    expect(sslConfig.keyPath).toEqual('/cert/key.pem');\n+    expect(sslConfig.certPath).toEqual('/cert/cert.pem');\n+  });\n+\n+  test('when SSL is enabled is true', () => {\n+    process.env.SSL_ENABLED = 'true';\n+\n+    const config = configuration();\n+    const sslConfig = config.ssl;\n+\n+    expect(sslConfig.enabled).toEqual(true);\n+  });\n+\n+  test('when SSL is not enabled', () => {\n+    process.env.SSL_ENABLED = 'FALSE';",
        "created_at": "2021-03-31T22:34:35Z",
        "body": "what about the scenario where `SSL_ENABLED` will not be defined at all (literally undefined)?"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/3",
      "updated_at": "2021-03-29T21:15:41Z",
      "title": "IMERC 21 configure developer tools",
      "state": "closed",
      "number": 3,
      "merged_at": "2021-03-29T21:15:38Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "696feb98074185344fc332788895f7e8dbdc4b13",
        "ref": "feature/IMERC-21-configure-developer-tools"
      },
      "created_at": "2021-03-29T17:50:53Z",
      "closed_at": "2021-03-29T21:15:38Z",
      "body": "[IMERC-21 Configure developer tools (ESLint, Prettier, etc)](https://imercatus.backlog.com/view/IMERC-21)\r\n\r\nNote: [IMERC-36 Configure linter and formatter to implement team coding style](https://imercatus.backlog.com/view/IMERC-36) will implement our team's actual coding style, this is a starter story to keep things linted and formated in general until we decide on a coding style.\r\n\r\n**Acceptance Criteria**\r\n\r\n- [x] Install and configure `eslint` with default syntax configuration\r\n- [x] `prettier` is integrated with `eslint`\r\n- [x] Ensure git hooks are setup with setup script\r\n- [x] When a developer pushes to GitHub, then a `git` `pre-push` hook is run with the following commands:\r\n  - [x] lint command\r\n  - [x] test suite command\r\n\r\n**Example with code that violates prettier**\r\n\r\n```\r\n‚ûú  imercata-backend git:(feature/IMERC-21-configure-developer-tools) ‚úó git add -p\r\ndiff --git a/src/app.controller.ts b/src/app.controller.ts\r\nindex cce879ee..d44ca41a 100644\r\n--- a/src/app.controller.ts\r\n+++ b/src/app.controller.ts\r\n@@ -3,7 +3,7 @@ import { AppService } from './app.service';\r\n\r\n @Controller()\r\n export class AppController {\r\n-  constructor(private readonly appService: AppService) {}\r\n+  constructor(private readonly appService: AppService) {   }\r\n\r\n   @Get()\r\n   getHello(): string {\r\n(1/1) Stage this hunk [y,n,q,a,d,e,?]? y\r\n\r\n‚ûú  imercata-backend git:(feature/IMERC-21-configure-developer-tools) ‚úó git push origin head\r\n\r\n> imercata-backend@0.0.1 lint /Users/jody/src/imercata-backend\r\n> eslint \"{src,test}/**/*.ts\"\r\n\r\n\r\n/Users/jody/src/imercata-backend/src/app.controller.ts\r\n  6:57  error  Delete `¬∑¬∑¬∑`  prettier/prettier\r\n\r\n‚úñ 1 problem (1 error, 0 warnings)\r\n  1 error and 0 warnings potentially fixable with the `--fix` option.\r\n\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno 1\r\nnpm ERR! imercata-backend@0.0.1 lint: `eslint \"{src,test}/**/*.ts\"`\r\nnpm ERR! Exit status 1\r\nnpm ERR!\r\nnpm ERR! Failed at the imercata-backend@0.0.1 lint script.\r\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     /Users/jody/.npm/_logs/2021-03-29T17_50_07_662Z-debug.log\r\nhusky - pre-push hook exited with code 1 (error)\r\nerror: failed to push some refs to 'github.com:iMercatus/imercata-backend.git'\r\n```\r\n\r\n**Successful push**\r\n\r\n```\r\n‚ûú  imercata-backend git:(feature/IMERC-21-configure-developer-tools) ‚úó git push origin head -f\r\n\r\n> imercata-backend@0.0.1 lint /Users/jody/src/imercata-backend\r\n> eslint \"{src,test}/**/*.ts\"\r\n\r\n\r\n> imercata-backend@0.0.1 test /Users/jody/src/imercata-backend\r\n> jest\r\n\r\n PASS  src/config/configuration.spec.ts\r\n PASS  src/app.controller.spec.ts\r\n PASS  src/app.module.spec.ts\r\n\r\nTest Suites: 3 passed, 3 total\r\nTests:       3 passed, 3 total\r\nSnapshots:   0 total\r\nTime:        2.7 s, estimated 3 s\r\nRan all test suites.\r\nEnumerating objects: 18, done.\r\nCounting objects: 100% (18/18), done.\r\nDelta compression using up to 8 threads\r\nCompressing objects: 100% (10/10), done.\r\nWriting objects: 100% (11/11), 1.77 KiB | 1.77 MiB/s, done.\r\nTotal 11 (delta 6), reused 0 (delta 0), pack-reused 0\r\nremote: Resolving deltas: 100% (6/6), completed with 6 local objects.\r\nTo github.com:iMercatus/imercata-backend.git\r\n + 33c0df90...7217401e head -> feature/IMERC-21-configure-developer-tools (forced update)\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "bd35825df7ca4d6dbbe0157d1734d5b68346cd17",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 623596311,
        "path": ".husky/.gitignore",
        "id": 603572161,
        "diff_hunk": "@@ -0,0 +1 @@\n+_",
        "created_at": "2021-03-29T19:55:49Z",
        "body": "why is this needed?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 623596311,
        "path": "README.md",
        "id": 603572719,
        "diff_hunk": "@@ -21,21 +21,44 @@ $ npm run start:dev\n \n # production mode\n $ PORT=5000 npm run start:prod\n+\n+# List all commands\n+npm run\n ```\n \n ## Test\n \n ```bash\n-# unit tests\n+# Unit tests\n $ npm run test\n \n # e2e tests\n $ npm run test:e2e\n \n-# test coverage\n+# Test coverage\n $ npm run test:cov\n ```\n \n+## Linting\n+\n+```",
        "created_at": "2021-03-29T19:56:49Z",
        "body": "bash"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 623596311,
        "path": "README.md",
        "id": 603572752,
        "diff_hunk": "@@ -21,21 +21,44 @@ $ npm run start:dev\n \n # production mode\n $ PORT=5000 npm run start:prod\n+\n+# List all commands\n+npm run\n ```\n \n ## Test\n \n ```bash\n-# unit tests\n+# Unit tests\n $ npm run test\n \n # e2e tests\n $ npm run test:e2e\n \n-# test coverage\n+# Test coverage\n $ npm run test:cov\n ```\n \n+## Linting\n+\n+```\n+# Linter\n+npm run lint\n+\n+# Fix fixable linting errors\n+npm run lint -- --fix\n+\n+# Prettier formatter\n+npm run format\n+```\n+\n+The repo is configured to run a `pre-push` git hook. This runs the project's lint command and then the test suite.\n+To skip the git hook pass `--no-verify` to `git` like:\n+\n+```",
        "created_at": "2021-03-29T19:56:52Z",
        "body": "bash"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 623596311,
        "path": "package.json",
        "id": 603574228,
        "diff_hunk": "@@ -13,12 +13,13 @@\n     \"start:dev\": \"nest start --watch\",\n     \"start:debug\": \"nest start --debug --watch\",\n     \"start:prod\": \"node dist/main\",\n-    \"lint\": \"eslint \\\"{src,apps,libs,test}/**/*.ts\\\" --fix\",\n+    \"lint\": \"eslint \\\"{src,test}/**/*.ts\\\"\",",
        "created_at": "2021-03-29T19:59:16Z",
        "body": "so, does that mean that the hook won't fix automatically? From what I'm reading of this PR is that any attempt to push something that does not pass our rules, the hook will issue an error instead of trying to fix automatically. Is that the correct understanding?\r\n\r\nIf so, do you think that eslint might cause troubles if it fixes automatically and no one evaluates? Or am I misunderstanding the whole thing?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 623596311,
        "path": ".husky/pre-push",
        "id": 603575110,
        "diff_hunk": "@@ -0,0 +1,5 @@\n+#!/bin/sh\n+. \"$(dirname \"$0\")/_/husky.sh\"",
        "created_at": "2021-03-29T20:00:37Z",
        "body": "my noob bash skills prevent me to understand what exactly is going on here. Mind explaining?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 623604516,
        "path": "package.json",
        "in_reply_to_id": 603574228,
        "id": 603578339,
        "diff_hunk": "@@ -13,12 +13,13 @@\n     \"start:dev\": \"nest start --watch\",\n     \"start:debug\": \"nest start --debug --watch\",\n     \"start:prod\": \"node dist/main\",\n-    \"lint\": \"eslint \\\"{src,apps,libs,test}/**/*.ts\\\" --fix\",\n+    \"lint\": \"eslint \\\"{src,test}/**/*.ts\\\"\",",
        "created_at": "2021-03-29T20:06:29Z",
        "body": "The strategy is to just fail, prevent the push, and allow the developer to fix things locally, and edit the commit or make a new one. This PR removes the auto-fixing. I agree, the expectation is that auto-fix would potentially cause issues if we allow it to run. "
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 623604949,
        "path": ".husky/pre-push",
        "in_reply_to_id": 603575110,
        "id": 603578640,
        "diff_hunk": "@@ -0,0 +1,5 @@\n+#!/bin/sh\n+. \"$(dirname \"$0\")/_/husky.sh\"",
        "created_at": "2021-03-29T20:07:04Z",
        "body": "This is the default Husky install."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 623605164,
        "path": ".husky/.gitignore",
        "in_reply_to_id": 603572161,
        "id": 603578781,
        "diff_hunk": "@@ -0,0 +1 @@\n+_",
        "created_at": "2021-03-29T20:07:20Z",
        "body": "This is the default Husky install.\r\n\r\nhttps://stackoverflow.com/questions/66207880/husky-5-huskey-gitignore"
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/2",
      "updated_at": "2021-03-27T00:06:56Z",
      "title": "Create a new nestjs application",
      "state": "closed",
      "number": 2,
      "merged_at": "2021-03-27T00:06:51Z",
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "53c0b119aa72550d94f1f31737e951eee2aeacd7",
        "ref": "feature/IMERC-20-create-a-new-nestjs-application"
      },
      "created_at": "2021-03-26T18:20:16Z",
      "closed_at": "2021-03-27T00:06:51Z",
      "body": "[IMERC-20](https://imercatus.backlog.com/view/IMERC-20)\r\n\r\n**Acceptance Criteria**\r\n\r\n- [x] Root \"Hello World\" route/controller\r\n- [x] Working basic unit and e2e tests\r\n- [x] Per-environment (NODE_ENV) config: `production`, `development`, `test`\r\n- [x] Add Visual Studio Code config for debugging\r\n- [x] Add setup script for developers `bin/setup`\r\n- [x] Instructions for setup/installation/requirements\r\n\r\n**Bonus**\r\n\r\n- [x] Add some help with asdf instructions and script (nvm alternative) `bin/asdf_install`\r\n\r\n**Server**\r\n\r\n```\r\n‚ûú  imercata-backend git:(feature/IMERC-20-create-a-new-nestjs-application) npm run start\r\n\r\n> imercata-backend@0.0.1 start /Users/jody/src/imercata-backend\r\n> nest start\r\n\r\n[Nest] 57313   - 2021-03-26, 2:28:03 p.m.   [NestFactory] Starting Nest application...\r\n[Nest] 57313   - 2021-03-26, 2:28:03 p.m.   [InstanceLoader] ConfigHostModule dependencies initialized +86ms\r\n[Nest] 57313   - 2021-03-26, 2:28:03 p.m.   [InstanceLoader] AppModule dependencies initialized +1ms\r\n[Nest] 57313   - 2021-03-26, 2:28:03 p.m.   [InstanceLoader] ConfigModule dependencies initialized +0ms\r\n[Nest] 57313   - 2021-03-26, 2:28:03 p.m.   [RoutesResolver] AppController {}: +5ms\r\n[Nest] 57313   - 2021-03-26, 2:28:03 p.m.   [RouterExplorer] Mapped {, GET} route +2ms\r\n[Nest] 57313   - 2021-03-26, 2:28:03 p.m.   [NestApplication] Nest application successfully started +2ms\r\n[Nest] 57313   - 2021-03-26, 2:28:03 p.m.   Server started at http://[::1]:3000 +5ms\r\n```\r\n\r\n**API**\r\n\r\n```\r\n‚ûú  imercata-backend git:(feature/IMERC-20-create-a-new-nestjs-application) curl http://[::1]:3000\r\nHello World!%\r\n```\r\n\r\n**Tests**\r\n\r\n```\r\n‚ûú  imercata-backend git:(feature/IMERC-20-create-a-new-nestjs-application) npm run test\r\n\r\n> imercata-backend@0.0.1 test /Users/jody/src/imercata-backend\r\n> jest\r\n\r\n PASS  src/config/configuration.spec.ts\r\n PASS  src/app.controller.spec.ts\r\n PASS  src/app.module.spec.ts\r\n\r\nTest Suites: 3 passed, 3 total\r\nTests:       3 passed, 3 total\r\nSnapshots:   0 total\r\nTime:        5.207 s, estimated 7 s\r\nRan all test suites.\r\n```\r\n\r\n**Coverage**\r\n\r\n```\r\n‚ûú  imercata-backend git:(feature/IMERC-20-create-a-new-nestjs-application) ‚úó npm run test:cov\r\n\r\n> imercata-backend@0.0.1 test:cov /Users/jody/src/imercata-backend\r\n> jest --coverage\r\n\r\n PASS  src/config/configuration.spec.ts\r\n PASS  src/app.controller.spec.ts (5.759 s)\r\n PASS  src/app.module.spec.ts (6.24 s)\r\n--------------------|---------|----------|---------|---------|-------------------\r\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s\r\n--------------------|---------|----------|---------|---------|-------------------\r\nAll files           |     100 |       50 |     100 |     100 |\r\n src                |     100 |       50 |     100 |     100 |\r\n  app.controller.ts |     100 |      100 |     100 |     100 |\r\n  app.module.ts     |     100 |       50 |     100 |     100 | 14\r\n  app.service.ts    |     100 |      100 |     100 |     100 |\r\n src/config         |     100 |      100 |     100 |     100 |\r\n  configuration.ts  |     100 |      100 |     100 |     100 |\r\n  validation.ts     |     100 |      100 |     100 |     100 |\r\n--------------------|---------|----------|---------|---------|-------------------\r\n\r\nTest Suites: 3 passed, 3 total\r\nTests:       3 passed, 3 total\r\nSnapshots:   0 total\r\nTime:        7.01 s\r\nRan all test suites.\r\n```",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "4e5e0b2490519f266147f555a599b63da6cdba8a",
        "ref": "main"
      }
    },
    "comments": [
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 622433022,
        "path": "README.md",
        "id": 602509528,
        "diff_hunk": "@@ -1,3 +1,54 @@\n-## Description\n+iMercata Backend API\n \n-Backend repo for iMercata\n+## Requirements\n+\n+Node version `14.16.0`\n+\n+## Development Setup\n+\n+```bash\n+$ bin/setup\n+```\n+\n+## Running the app\n+\n+```bash\n+# development\n+$ npm run start\n+\n+# watch mode\n+$ npm run start:dev\n+\n+# production mode\n+$ PORT=5000 npm run start:prod\n+```\n+\n+## Test\n+\n+```bash\n+# unit tests\n+$ npm run test\n+\n+# e2e tests\n+$ npm run test:e2e\n+\n+# test coverage\n+$ npm run test:cov\n+```\n+\n+## Runtime version management\n+\n+[asdf](https://asdf-vm.com/) is a suitable alternative to `nvm`. \n+\n+It can support multiple runtimes for languages and databases per-project, with a single CLI tool.\n+\n+```\n+git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.8.0\n+```\n+and enable it in your shell by adding the following line to the appropriate\n+initialization file for your shell (`~/.bash_profile` for bash, `~/.zshrc`\n+for zsh):\n+```\n+. $HOME/.asdf/asdf.sh",
        "created_at": "2021-03-26T18:30:07Z",
        "body": "is it missing the closing quotes?"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 622576291,
        "path": "src/config/validation.ts",
        "id": 602620259,
        "diff_hunk": "@@ -0,0 +1,10 @@\n+import * as Joi from 'joi';\n+\n+const validation = Joi.object({\n+  NODE_ENV: Joi.string()\n+    .valid('production', 'development', 'test')\n+    .default('development'),\n+  PORT: Joi.number().default(3000),\n+});\n+\n+export { validation };",
        "created_at": "2021-03-26T22:47:05Z",
        "body": "isn't it the same as:\r\n\r\n```typescript\r\nexport const validation = Joi.object(...);\r\n```\r\n\r\nif it is just a matter of preference, I don't mind having this way. Just sharing."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 622576291,
        "path": "src/main.ts",
        "id": 602622825,
        "diff_hunk": "@@ -0,0 +1,16 @@\n+import { Logger } from '@nestjs/common';\n+import { NestFactory } from '@nestjs/core';\n+import { AppModule } from './app.module';\n+import { ConfigService } from '@nestjs/config';\n+import { Config } from './config/configuration';\n+\n+async function bootstrap() {\n+  const app = await NestFactory.create(AppModule);\n+  const configService: ConfigService<Config> = app.get<ConfigService>(\n+    'ConfigService',\n+  );",
        "created_at": "2021-03-26T22:56:36Z",
        "body": "any particular reason for:\r\n1. being so verbose about the typing\r\n2. using a \"magic\" string?\r\n\r\n```typescript\r\nconst configService = app.get<ConfigService>(ConfigService);\r\n```\r\n\r\nshould be enough, no?"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 622580359,
        "path": "src/main.ts",
        "in_reply_to_id": 602622825,
        "id": 602623906,
        "diff_hunk": "@@ -0,0 +1,16 @@\n+import { Logger } from '@nestjs/common';\n+import { NestFactory } from '@nestjs/core';\n+import { AppModule } from './app.module';\n+import { ConfigService } from '@nestjs/config';\n+import { Config } from './config/configuration';\n+\n+async function bootstrap() {\n+  const app = await NestFactory.create(AppModule);\n+  const configService: ConfigService<Config> = app.get<ConfigService>(\n+    'ConfigService',\n+  );",
        "created_at": "2021-03-26T23:00:22Z",
        "body": "I change it to be so verbose to get something working at one point. \r\n\r\nI will try the simplified again, now that things have solidified a bit. Stay tuned."
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 622580718,
        "path": "src/app.module.ts",
        "id": 602624196,
        "diff_hunk": "@@ -0,0 +1,22 @@\n+import { Module } from '@nestjs/common';\n+import { AppController } from './app.controller';\n+import { AppService } from './app.service';\n+import { ConfigModule, ConfigService } from '@nestjs/config';\n+import configuration, { Config } from './config/configuration';",
        "created_at": "2021-03-26T23:01:34Z",
        "body": "btw, apparently, `ConfigService` and `Config` are not being used here"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 622580937,
        "path": "src/app.module.ts",
        "id": 602624377,
        "diff_hunk": "@@ -0,0 +1,22 @@\n+import { Module } from '@nestjs/common';\n+import { AppController } from './app.controller';\n+import { AppService } from './app.service';\n+import { ConfigModule, ConfigService } from '@nestjs/config';\n+import configuration, { Config } from './config/configuration';\n+import { validation } from './config/validation';\n+\n+@Module({\n+imports: [\n+  ConfigModule.forRoot({\n+    // Expect environment variables for production\n+    ignoreEnvFile: process.env.NODE_ENV === 'production',\n+    // Allow per-dev environment variables development with .env\n+    envFilePath: process.env.NODE_ENV === 'test' ? '.env.test' : '.env',\n+    load: [configuration],\n+    validationSchema: validation,\n+  }),\n+],\n+controllers: [AppController],\n+providers: [AppService]\n+})\n+export class AppModule {}",
        "created_at": "2021-03-26T23:02:18Z",
        "body": "also, it looks like there is some indentation issues on this file. I guess we need the \"formatOnSave\" option on VS code config for this repo"
      },
      {
        "user": {
          "login": "brunokrebs",
          "html_url": "https://github.com/brunokrebs"
        },
        "pull_request_review_id": 622581138,
        "path": "src/app.module.ts",
        "in_reply_to_id": 602624377,
        "id": 602624535,
        "diff_hunk": "@@ -0,0 +1,22 @@\n+import { Module } from '@nestjs/common';\n+import { AppController } from './app.controller';\n+import { AppService } from './app.service';\n+import { ConfigModule, ConfigService } from '@nestjs/config';\n+import configuration, { Config } from './config/configuration';\n+import { validation } from './config/validation';\n+\n+@Module({\n+imports: [\n+  ConfigModule.forRoot({\n+    // Expect environment variables for production\n+    ignoreEnvFile: process.env.NODE_ENV === 'production',\n+    // Allow per-dev environment variables development with .env\n+    envFilePath: process.env.NODE_ENV === 'test' ? '.env.test' : '.env',\n+    load: [configuration],\n+    validationSchema: validation,\n+  }),\n+],\n+controllers: [AppController],\n+providers: [AppService]\n+})\n+export class AppModule {}",
        "created_at": "2021-03-26T23:02:54Z",
        "body": "also, there is a nice git hook that can help with that (with formatting before commiting)"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 622584778,
        "path": "src/main.ts",
        "in_reply_to_id": 602622825,
        "id": 602627776,
        "diff_hunk": "@@ -0,0 +1,16 @@\n+import { Logger } from '@nestjs/common';\n+import { NestFactory } from '@nestjs/core';\n+import { AppModule } from './app.module';\n+import { ConfigService } from '@nestjs/config';\n+import { Config } from './config/configuration';\n+\n+async function bootstrap() {\n+  const app = await NestFactory.create(AppModule);\n+  const configService: ConfigService<Config> = app.get<ConfigService>(\n+    'ConfigService',\n+  );",
        "created_at": "2021-03-26T23:16:03Z",
        "body": "Suggestion works. Pushed the fix."
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 622584807,
        "path": "src/app.module.ts",
        "in_reply_to_id": 602624196,
        "id": 602627801,
        "diff_hunk": "@@ -0,0 +1,22 @@\n+import { Module } from '@nestjs/common';\n+import { AppController } from './app.controller';\n+import { AppService } from './app.service';\n+import { ConfigModule, ConfigService } from '@nestjs/config';\n+import configuration, { Config } from './config/configuration';",
        "created_at": "2021-03-26T23:16:10Z",
        "body": "fixed"
      },
      {
        "user": {
          "login": "alkema",
          "html_url": "https://github.com/alkema"
        },
        "pull_request_review_id": 622584930,
        "path": "src/app.module.ts",
        "in_reply_to_id": 602624377,
        "id": 602627908,
        "diff_hunk": "@@ -0,0 +1,22 @@\n+import { Module } from '@nestjs/common';\n+import { AppController } from './app.controller';\n+import { AppService } from './app.service';\n+import { ConfigModule, ConfigService } from '@nestjs/config';\n+import configuration, { Config } from './config/configuration';\n+import { validation } from './config/validation';\n+\n+@Module({\n+imports: [\n+  ConfigModule.forRoot({\n+    // Expect environment variables for production\n+    ignoreEnvFile: process.env.NODE_ENV === 'production',\n+    // Allow per-dev environment variables development with .env\n+    envFilePath: process.env.NODE_ENV === 'test' ? '.env.test' : '.env',\n+    load: [configuration],\n+    validationSchema: validation,\n+  }),\n+],\n+controllers: [AppController],\n+providers: [AppService]\n+})\n+export class AppModule {}",
        "created_at": "2021-03-26T23:16:37Z",
        "body": "Yes, let's add a story for git hooks for formatting."
      }
    ]
  },
  {
    "pull": {
      "user": {
        "login": "alkema",
        "html_url": "https://github.com/alkema"
      },
      "url": "https://api.github.com/repos/iMercatus/imercata-backend/pulls/1",
      "updated_at": "2021-03-25T20:21:47Z",
      "title": "Create a new NestJS application",
      "state": "closed",
      "number": 1,
      "head": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "6c9505f37b700c3b5e972687eced3dc4f5878d15",
        "ref": "feature/IMERC-20-create-a-new-nestjs-application"
      },
      "created_at": "2021-03-25T20:13:45Z",
      "closed_at": "2021-03-25T20:20:07Z",
      "body": "",
      "base": {
        "user": {
          "login": "iMercatus",
          "html_url": "https://github.com/iMercatus"
        },
        "sha": "4e5e0b2490519f266147f555a599b63da6cdba8a",
        "ref": "main"
      }
    },
    "comments": []
  }
]
